// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.getInterceptor(dartException).toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  },
  is$Function: true
};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_liblib2$_keys>",
  containsKey$1: function(key) {
    if ($.eqB(key, "__proto__"))
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  operator$index$1: function(key) {
    if (this.containsKey$1(key) !== true)
      return;
    return this._jsObject[key];
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this._liblib2$_keys;
    t2 = new $.ConstantMap_forEach_anon(this, f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function() {
    return $.MappedIterable$(this._liblib2$_keys, new $.ConstantMap_values_anon(this), $.String, $.getRuntimeTypeInfo(this)[0]);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  operator$indexSet$2: function(key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(key) {
    return this._throwUnmodifiable$0();
  },
  clear$0: function() {
    return this._throwUnmodifiable$0();
  },
  is$Map: function() {
    return true;
  }
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib2$_map",
  get$iterator: function() {
    var t1 = this._liblib2$_map._liblib2$_keys;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib2$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1, matchEnd;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.getInterceptor$JSStringJSArray(m).operator$index$1(m, 0);
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    matchEnd = matchStart + t1;
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib2$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  is$JSSyntaxRegExp: true,
  is$RegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  group$1: function(index) {
    var t1 = this._groups;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$index$1: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout5(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout5: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    this._liblib2$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib2$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  operator$index$1: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if (!$.eqB(group_, 0))
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(elements).get$iterator(elements); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  is$Collection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.FallThroughError = {"": "Object;"};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.ltB(t1.i_1, t2.length); t3 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1)) {
      if ($.gtB(t1.i_1, 0)) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t5 = $.Error_safeToString(t2[t4]);
      $.getInterceptor$JSArray(t3).add$1(t3, t5);
    }
    t2 = this._namedArguments;
    if (!(t2 == null)) {
      t3 = new $.NoSuchMethodError_toString_anon(t1);
      $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
    }
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = $.getInterceptor(t3).toString$0(t3);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t4 = t2[i];
      $.getInterceptor$JSArray(t3).add$1(t3, t4);
    }
    t1 = t1.sb_0;
    formalParameters = $.getInterceptor(t1).toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t2 = env1;
        t1 = env0;
        break;
      case 2:
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t4 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, 1)) {
            if ($.gtB(t1.i_1, 0)) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.operator$index$1(t2, t1.i_1));
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
        t2 = this._namedArguments;
        if (!(t2 == null)) {
          t3 = new $.NoSuchMethodError_toString_anon(t1);
          $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
        }
        t2 = this._existingArgumentNames;
      case 2:
        var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = $.getInterceptor(t3).toString$0(t3);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = t3.operator$index$1(t2, i);
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
          t1 = t1.sb_0;
          formalParameters = $.getInterceptor(t1).toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  is$Exception: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  is$Exception: true
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  is$Exception: true
};

$$.Iterable = {"": "Object;",
  where$1: function(f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeInfo(this)[0]);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.getRuntimeTypeInfo(this)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
    return t1;
  },
  get$length: function() {
    var it, count;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.getInterceptor$JSArray(this).get$iterator(this).moveNext$0() !== true;
  },
  get$last: function() {
    var it, result;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    t3 = this._keys;
    t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
    if (t3 !== (t3 | 0))
      return this._probeForAdding$1$bailout(2, key, t3, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this._probeForAdding$1$bailout(3, key, insertionIndex, t1, hash, numberOfProbes);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.eqB(existingKey, key))
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT5)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(4, hash, numberOfProbes0, key, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env1;
        key = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        key = env0;
        break;
      case 3:
        numberOfProbes = env4;
        hash = env3;
        t1 = env2;
        insertionIndex = env1;
        key = env0;
        break;
      case 4:
        insertionIndex = env3;
        key = env2;
        numberOfProbes0 = env1;
        hash = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.getInterceptor(key).get$hashCode(key);
      case 1:
        state0 = 0;
        t3 = this._keys;
        t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
        hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t3);
        numberOfProbes = 1;
        insertionIndex = -1;
      default:
        var t1, key, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
              case 3:
                state0 = 0;
                existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
                if (existingKey == null) {
                  if ($.ltB(insertionIndex, 0))
                    return hash;
                  return insertionIndex;
                } else if ($.eqB(existingKey, key))
                  return hash;
                else if ($.ltB(insertionIndex, 0) && existingKey === $.CONSTANT5)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                t1 = this._keys;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
              case 4:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    t2 = this._keys;
    t2 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    t2 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1);
    hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _ensureCapacity$0: function() {
    var t1, newNumberOfEntries, capacity, numberOfFreeOrDeleted, numberOfFree;
    t1 = this._numberOfEntries;
    newNumberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    if ($.geB(newNumberOfEntries, this._loadLimit)) {
      t1 = this._keys;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      this._grow$1($.getInterceptor$JSNumber(t1).operator$mul$1(t1, 2));
      return;
    }
    t1 = this._keys;
    capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    numberOfFreeOrDeleted = $.getInterceptor$JSNumber(capacity).operator$sub$1(capacity, newNumberOfEntries);
    t1 = this._numberOfDeleted;
    numberOfFree = $.getInterceptor$JSNumber(numberOfFreeOrDeleted).operator$sub$1(numberOfFreeOrDeleted, t1);
    if ($.gtB(this._numberOfDeleted, numberOfFree)) {
      t1 = this._keys;
      this._grow$1($.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _grow$1: function(newCapacity) {
    var t1, capacity, t2, oldKeys, oldValues, t5, i, key, value, newIndex;
    t1 = this._keys;
    capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, newCapacity, capacity);
    t2 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
    this._loadLimit = $.getInterceptor$JSNumber(t2).operator$tdiv$1(t2, 4);
    oldKeys = this._keys;
    if (typeof oldKeys !== "string" && (typeof oldKeys !== "object" || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
      return this._grow$1$bailout(2, newCapacity, oldKeys, capacity);
    oldValues = this._values;
    if (typeof oldValues !== "string" && (typeof oldValues !== "object" || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
      return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
    t5 = $.List_List$fixedLength(newCapacity, null);
    $.setRuntimeTypeInfo(t5, []);
    this._keys = t5;
    t5 = $.List_List$fixedLength(newCapacity, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t5;
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT5)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, newIndex, key);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, newIndex, value);
    }
    this._numberOfDeleted = 0;
  },
  _grow$1$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        capacity = env1;
        newCapacity = env0;
        break;
      case 2:
        capacity = env2;
        oldKeys = env1;
        newCapacity = env0;
        break;
      case 3:
        capacity = env3;
        oldValues = env2;
        oldKeys = env1;
        newCapacity = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._keys;
        capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
        this._loadLimit = $.getInterceptor$JSNumber(t2).operator$tdiv$1(t2, 4);
        oldKeys = this._keys;
      case 2:
        state0 = 0;
        oldValues = this._values;
      case 3:
        var t1, capacity, newCapacity, t2, oldKeys, oldValues, t5, i, key, value, newIndex, t3;
        state0 = 0;
        t5 = $.List_List$fixedLength(newCapacity, null);
        $.setRuntimeTypeInfo(t5, []);
        this._keys = t5;
        t5 = $.List_List$fixedLength(newCapacity, null, $.getRuntimeTypeInfo(this)[1]);
        $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeInfo(this)[1]]);
        this._values = t5;
        for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; $.ltB(i, capacity); ++i) {
          key = t1.operator$index$1(oldKeys, i);
          if (key == null || key === $.CONSTANT5)
            continue;
          value = t2.operator$index$1(oldValues, i);
          newIndex = this._probeForAdding$1(key);
          t3 = this._keys;
          $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, newIndex, key);
          t3 = this._values;
          $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, newIndex, value);
        }
        this._numberOfDeleted = 0;
    }
  },
  clear$0: function() {
    var t1, length$, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.clear$0$bailout(1, length$);
    for (i = 0; i < length$; ++i) {
      t1 = this._keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
  },
  clear$0$bailout: function(state0, length$) {
    var i, t1;
    for (i = 0; $.ltB(i, length$); ++i) {
      t1 = this._keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
  },
  operator$indexSet$2: function(key, value) {
    var index, t1, t2;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout0(1, key, value, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    if (!(t1[index] == null)) {
      if (index >= t1.length)
        throw $.ioore(index);
      t2 = t1[index] === $.CONSTANT5;
      t1 = t2;
    } else
      t1 = true;
    if (t1) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.operator$indexSet$2$bailout0(3, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout0(4, key, value, t1, index);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout0(5, value, t1, index);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env3;
        index = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 3:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 4:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 5:
        index = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && !($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) == null))
          switch (state0) {
            case 0:
              t1 = this._keys;
            case 2:
              state0 = 0;
              t3 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) === $.CONSTANT5;
              t1 = t3;
          }
        else
          t1 = true;
      case 3:
        if (state0 === 3 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 3:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
          }
        t1 = this._keys;
      case 4:
        state0 = 0;
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, index, key);
        t1 = this._values;
      case 5:
        var index, t1, value, key, t3;
        state0 = 0;
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, index, value);
    }
  },
  operator$index$1: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.operator$index$1$bailout0(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout0(2, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout0: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        index = env0;
        break;
      case 2:
        index = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
        if ($.ltB(index, 0))
          return;
        t1 = this._values;
      case 2:
        var index, t1;
        state0 = 0;
        return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
    }
  },
  remove$1: function(key) {
    var index, t1, t2, value;
    index = this._probeForLookup$1(key);
    if ($.geB(index, 0)) {
      t1 = this._numberOfEntries;
      this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1);
      t2 = this._values;
      value = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index);
      t2 = this._values;
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, index, null);
      t2 = this._keys;
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, index, $.CONSTANT5);
      t2 = this._numberOfDeleted;
      this._numberOfDeleted = $.getInterceptor$JSNumber(t2).operator$add$1(t2, 1);
      return value;
    }
    return;
  },
  get$isEmpty: function() {
    return $.eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t1 = this._values;
      t3 = it.get$current();
      f.call$2(t2, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t3));
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this, $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this, $.getRuntimeTypeInfo(this)[1]);
  },
  containsKey$1: function(key) {
    return !$.eqB(this._probeForLookup$1(key), -1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    var t1 = $.List_List$fixedLength(8, null);
    $.setRuntimeTypeInfo(t1, []);
    this._keys = t1;
    t1 = $.List_List$fixedLength(8, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t1;
  },
  is$Map: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length$, t3, newIndex, key;
    t1 = this._map;
    t2 = t1.get$_keys();
    length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    if (typeof length$ !== "number")
      return this.moveNext$0$bailout1(1, length$, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout1(2, length$, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < length$;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout1(3, t2, newIndex, length$, t1);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT5)) {
        this._liblib1$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length$;
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        length$ = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        length$ = env0;
        break;
      case 3:
        t1 = env3;
        length$ = env2;
        newIndex = env1;
        t2 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._map;
        t2 = t1.get$_keys();
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
      case 3:
        var t1, t2, length$, t3, newIndex, key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.ltB(newIndex, length$))
                  break L0;
                t2 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, newIndex);
                if (!(key == null) && !(key === $.CONSTANT5)) {
                  this._liblib1$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = $.getInterceptor$JSNumber(newIndex).operator$add$1(newIndex, 1);
            }
        this._index = length$;
        this._liblib1$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_index,_liblib1$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(keys).operator$index$1(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_liblib1$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(values).operator$index$1(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib1$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib1$_list,_map",
  operator$indexSet$2: function(key, value) {
    var t1, t2, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.operator$indexSet$2$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      t1 = this._liblib1$_list;
      t2 = $._KeyValuePair$(key, value);
      $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
      t2 = this._map;
      if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.is$JavaScriptIndexingBehavior())
        return this.operator$indexSet$2$bailout(2, key, t2);
      t3 = this._liblib1$_list.lastEntry$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t2.length)
        throw $.ioore(key);
      t2[key] = t3;
    }
  },
  operator$indexSet$2$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        t2 = env1;
        key = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var t1, value, key, t2, t3;
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              t1 = this._liblib1$_list;
              t2 = $._KeyValuePair$(key, value);
              $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
              t2 = this._map;
            case 2:
              state0 = 0;
              t3 = this._liblib1$_list.lastEntry$0();
              $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, key, t3);
          }
    }
  },
  operator$index$1: function(key) {
    var t1, entry;
    t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    entry = t1[key];
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  operator$index$1$bailout: function(state0, key, t1) {
    var entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSArray(t1).remove$1(t1, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    var t1, t2, t3;
    t1 = this._liblib1$_list;
    t2 = new $._LinkedHashMapImpl_keys_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    var t1, t2, t3;
    t1 = this._liblib1$_list;
    t2 = new $._LinkedHashMapImpl_values_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[1]);
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this._liblib1$_list;
    t2 = new $._LinkedHashMapImpl_forEach_anon(f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    var t1 = this._map;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  clear$0: function() {
    var t1 = this._map;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._liblib1$_list;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    var t1, t2, t3;
    t1 = $.getRuntimeTypeInfo(this)[0];
    t2 = $.getRuntimeTypeInfo(this);
    this._map = $.HashMap_HashMap(t1, [$.DoubleLinkedQueueEntry, [$._KeyValuePair, t2[0], t2[1]]]);
    t3 = $.getRuntimeTypeInfo(this);
    this._liblib1$_list = $.DoubleLinkedQueue$([$._KeyValuePair, t3[0], t3[1]]);
  },
  is$Map: function() {
    return true;
  }
};

$$.Object = {"": ";",
  operator$eq$1: function(other) {
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_liblib1$_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._liblib1$_element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._liblib1$_element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._liblib1$_element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_liblib1$_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.eqB(entry.get$element(), o)) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  is$Collection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib1$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib1$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib1$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.operator$indexSet$2(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  is$Collection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT5)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT5;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$._StringBufferImpl = {"": "Object;_buffer,_length",
  get$length: function() {
    return this._length;
  },
  get$isEmpty: function() {
    return $.eq(this._length, 0);
  },
  add$1: function(obj) {
    var str, t1;
    str = $.getInterceptor(obj).toString$0(obj);
    if (!(typeof str === "string"))
      throw $.$$throw($.ArgumentError$("toString() did not return a string"));
    if ($.CONSTANT1.get$isEmpty(str) === true)
      return;
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, str);
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, t1, str);
    this._length = t1 + str.length;
  },
  add$1$bailout: function(state0, t1, str) {
    var t3 = str.length;
    this._length = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
  },
  addAll$1: function(objects) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(objects).get$iterator(objects); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  clear$0: function() {
    var t1 = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    this._buffer = t1;
    this._length = 0;
  },
  toString$0: function() {
    var t1, result;
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      return "";
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
      t1 = this._buffer;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    }
    result = $.Strings__toJsStringArray(this._buffer).join("");
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, result);
    return result;
  },
  _StringBufferImpl$1: function(content$) {
    this.clear$0();
    this.add$1(content$);
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.MappedIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  },
  get$length: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib5$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib5$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib5$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib5$_current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.WhereIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ObjectInterceptor = {"": "Object;",
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  operator$indexSet$2: function(receiver, a0, a1) {
    return receiver.operator$indexSet$2(a0, a1);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  operator$index$1: function(receiver, a0) {
    return receiver.operator$index$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  operator$sub$1: function(receiver, a0) {
    return receiver.operator$sub$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  operator$mul$1: function(receiver, a0) {
    return receiver.operator$mul$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  operator$mod$1: function(receiver, a0) {
    return receiver.operator$mod$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  operator$tdiv$1: function(receiver, a0) {
    return receiver.operator$tdiv$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase$0();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  operator$or$1: function(receiver, a0) {
    return receiver.operator$or$1(a0);
  },
  operator$and$1: function(receiver, a0) {
    return receiver.operator$and$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  operator$shr$1: function(receiver, a0) {
    return receiver.operator$shr$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  toDouble$0: function(receiver) {
    return receiver.toDouble$0();
  },
  operator$add$1: function(receiver, a0) {
    return receiver.operator$add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  operator$negate$0: function(receiver) {
    return receiver.operator$negate$0();
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  operator$shl$1: function(receiver, a0) {
    return receiver.operator$shl$1(a0);
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  operator$div$1: function(receiver, a0) {
    return receiver.operator$div$1(a0);
  },
  operator$xor$1: function(receiver, a0) {
    return receiver.operator$xor$1(a0);
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  is$Function: true
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  is$bool: true
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(receiver[i], element)) {
        receiver.splice(i, 1);
        return;
      }
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(collection).get$iterator(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  getRange$2: function(receiver, start, length$) {
    var t1, end;
    if (0 === length$)
      return [];
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length$ === "number" && Math.floor(length$) === length$))
      throw $.$$throw($.ArgumentError$(length$));
    t1 = length$ < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + length$;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value(length$));
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, length$) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if (length$ === 0)
      return;
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (length$ < 0)
      throw $.$$throw($.ArgumentError$(length$));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + length$;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - length$;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    var t1 = $.List_List$from(receiver, $.getRuntimeTypeInfo(receiver)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(receiver)[0]]);
    return t1;
  },
  get$iterator: function(receiver) {
    return $._ArrayIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  operator$indexSet$2: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ArrayIterator = {"": "Object;_list,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, nextPosition, length$;
    t1 = this._liblib0$_position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout0(1, t1);
    nextPosition = t1 + 1;
    t1 = this._list;
    length$ = t1.length;
    if (nextPosition < length$) {
      this._liblib0$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib0$_current = t1[nextPosition];
      return true;
    }
    this._liblib0$_position = length$;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t1) {
    var nextPosition, length$;
    nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    t1 = this._list;
    length$ = t1.length;
    if ($.ltB(nextPosition, length$)) {
      this._liblib0$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib0$_current = t1[nextPosition];
      return true;
    }
    this._liblib0$_position = length$;
    this._liblib0$_current = null;
    return false;
  }
};

$$.JSNumber = {"": "Object;",
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  operator$negate$0: function(receiver) {
    return -receiver;
  },
  operator$add$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  operator$sub$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  operator$div$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  operator$mul$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  operator$mod$1: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  operator$tdiv$1: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  operator$shl$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  operator$shr$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  operator$and$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  operator$or$1: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  operator$xor$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  }
};

$$.JSInt = {"": "JSNumber;"};

$$.JSDouble = {"": "JSNumber;"};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (!(typeof index === "number"))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if ($.ltB(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  is$String: true
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId=,nextManagerId=,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, isWorkerDefined, t2;
    t1 = $.get$globalWindow() == null;
    isWorkerDefined = !($.get$globalWorker() == null);
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = isWorkerDefined && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var function$ = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = function$;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true && $.eqB(this.topEventLoop.get$activeTimerCount(), 0);
    } else
      t1 = false;
    if (t1)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id=,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.get$currentContext();
    $globalState.set$currentContext(this);
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      t1 = old;
      $globalState.set$currentContext(t1);
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId);
  },
  register$2: function(portId, port) {
    var t1, t2;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, portId, port);
    t1 = $globalState.get$isolates();
    t2 = this.id;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, this);
  },
  unregister$1: function(portId) {
    var t1, t2;
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).remove$1(t1, portId);
    t1 = this.ports;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true) {
      t1 = $globalState.get$isolates();
      t2 = this.id;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1, t2;
    t1 = this.events;
    t2 = $._IsolateEvent$(isolate, fn, msg);
    $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if (!($globalState.get$rootContext() == null))
      if ($globalState.get$isolates().containsKey$1($globalState.get$rootContext().get$id()) === true)
        if ($globalState.get$fromCommandLine() === true) {
          t1 = $globalState.get$rootContext().get$ports();
          t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var event$ = this.dequeue$0();
    if (event$ == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    event$.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.get$isWorker() !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  set$id: function(i) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  set$onmessage: function(f) {
    throw $.$$throw($.Exception_Exception("onmessage should not be set on MainManagerStub"));
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_BufferingSendPort))
      throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.get$future();
  },
  is$Function: true,
  is$SendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  is$_NativeJsSendPort: true,
  is$SendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  operator$eq$1: function(other) {
    var t1;
    if (typeof other === "object" && other !== null && !!other.is$_WorkerSendPort)
      t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._workerId;
    t1 = $.getInterceptor$JSNumber(t1).operator$shl$1(t1, 16);
    t2 = this._isolateId;
    t2 = $.getInterceptor$JSNumber(t2).operator$shl$1(t2, 8);
    t2 = $.getInterceptor$JSNumber(t1).operator$xor$1(t1, t2);
    t1 = this._receivePortId;
    return $.getInterceptor$JSNumber(t2).operator$xor$1(t2, t1);
  },
  is$_WorkerSendPort: true,
  is$SendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.get$currentContext().unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.get$currentContext().get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, true);
    t1 = new $._PendingSendPortFinder_visitList_anon(this);
    $.getInterceptor$JSArray(list).forEach$1(list, t1);
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, true);
    t1 = map.get$values();
    t2 = new $._PendingSendPortFinder_visitMap_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  visitSendPort$1: function(port) {
    if (!!port.is$_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = t1.operator$index$1(x, 1);
    isolateId = t1.operator$index$1(x, 2);
    receivePortId = t1.operator$index$1(x, 3);
    if ($.eqB(managerId, $globalState.get$currentManagerId())) {
      t1 = $globalState.get$isolates();
      isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  operator$index$1: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  operator$indexSet$2: function(object, info) {
    var t1 = this.tagged;
    $.getInterceptor$JSArray(t1).add$1(t1, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    var t1 = $.List_List(0);
    $.setRuntimeTypeInfo(t1, []);
    this.tagged = t1;
  },
  cleanup$0: function() {
    var t1, length$, i;
    t1 = this.tagged;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.cleanup$0$bailout(1, length$);
    i = 0;
    for (; i < length$; ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, length$) {
    var i, t1;
    i = 0;
    for (; $.ltB(i, length$); ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  operator$index$1: function(object) {
    return;
  },
  operator$indexSet$2: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.is$List()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.is$Map())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
      return this.visitList$1$bailout(1, list);
    t1 = this._visited;
    copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.setRuntimeTypeInfo(copy, []);
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        list = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, copy, len, t3, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.setRuntimeTypeInfo(copy, []);
        t3 = this._visited;
        $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, list, copy);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2, t3;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $.Map_Map();
    t2 = this._visited;
    t3 = t1.copy_0;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, map, t3);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1($.getInterceptor$JSArray(t1).toList$0(t1));
    t2 = map.get$values();
    return ["map", id, keys, this._serializeList$1($.getInterceptor$JSArray(t2).toList$0(t2))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        t1 = env1;
        list = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, len, result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        $.setRuntimeTypeInfo(result, []);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap_HashMap();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
    t1 = this._deserialized;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    dartList = t1.operator$index$1(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        id = env1;
        dartList = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        dartList = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        dartList = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, id, dartList, t2, len, i;
        state0 = 0;
        for (i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(dartList, i, this._deserializeHelper$1(t2.operator$index$1(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
    keys = t1.operator$index$1(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.operator$index$1(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, values, result, keys);
    len = keys.length;
    for (t1 = $.getInterceptor$JSArray(result), i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.operator$indexSet$2(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env3;
        keys = env2;
        result = env1;
        x = env0;
        break;
      case 2:
        keys = env2;
        result = env1;
        values = env0;
        break;
      case 3:
        keys = env4;
        result = env3;
        len = env2;
        t3 = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
        keys = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        values = t1.operator$index$1(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var result, t1, id, t2, keys, x, values, t3, len, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), t2 = $.getInterceptor$JSArray(result), i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(result, this._deserializeHelper$1(t3.operator$index$1(keys, i)), this._deserializeHelper$1(t1.operator$index$1(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    var t1, t2;
    if (!($.get$globalThis().setTimeout == null)) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if ($.eqB(milliseconds, 0))
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, t1, t2, exception;
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "'");
    message = null;
    try {
      t2 = this.error;
      message = $.getInterceptor(t2).toString$0(t2);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    t1.add$1(buffer, message);
    t1.add$1(buffer, "'\n");
    t2 = this.stackTrace;
    if (!(t2 == null)) {
      t1.add$1(buffer, "Stack trace:\n");
      t1.add$1(buffer, $.getInterceptor(t2).toString$0(t2));
      t1.add$1(buffer, "\n");
    }
  },
  toString$0: function() {
    var buffer, t1, cause;
    buffer = $.StringBuffer_StringBuffer("");
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      t1.add$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return t1.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_Timer(0, new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  is$AsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete>",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.is$AsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return !$.eqB(this._state, 0);
  },
  get$_hasValue: function() {
    return $.eq(this._state, 1);
  },
  get$_hasError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 2), 0);
  },
  get$_hasUnhandledError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 4), 0);
  },
  _clearUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$and$1(t1, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  get$_handleError: function() {
    return new $.BoundClosure(this, "_handleError$2");
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure0(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure0(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$or$1(t1, 4);
    $.Timer_Timer(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  is$_FutureImpl: true,
  is$Future: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.is$Future)
      if (!!result.is$_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function(function$, onError) {
    return this._future.then$2$onError(function$, onError);
  },
  then$1: function(function$) {
    return this.then$2$onError(function$, null);
  },
  catchError$2$test: function(function$, test) {
    return this._future.catchError$2$test(function$, test);
  },
  catchError$1: function(function$) {
    return this.catchError$2$test(function$, null);
  },
  is$Future: true
};

$$.Stream = {"": "Object;",
  where$1: function(test) {
    return $.WhereStream$(this, test, $.getRuntimeTypeInfo(this)[0]);
  },
  contains$1: function(match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$length: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function() {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  get$last: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t2 = new $.Stream_last_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_last_anon0(t1, future), t3, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === unsubscribeOnError);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  get$_handleData: function() {
    return new $.BoundClosure(this, "_handleData$2");
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure(this, "_handleError$2");
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure0(this, "_handleDone$1");
  }
};

$$._ForwardingStreamSubscription = {"": "Object;_stream,_liblib4$_onData,_onError,_onDone,_subscription",
  _liblib4$_onData$1: function(arg0) {
    return this._liblib4$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    t1.cancel$0();
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._liblib4$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (!(t1 == null)) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure0(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure0(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure1(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, _onData, _onError, _onDone, unsubscribeOnError) {
    var t1, t2, t3;
    t1 = this._stream._source;
    t2 = this.get$_handleData();
    t3 = this.get$_handleError();
    this._subscription = t1.listen$4$onDone$onError$unsubscribeOnError(t2, this.get$_handleDone(), t3, unsubscribeOnError);
  }
};

$$.WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  },
  get$_handleData: function() {
    return new $.BoundClosure(this, "_handleData$2");
  }
};

$$.AbstractWorkerEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.ApplicationCacheEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.BatteryManagerEvents = {"": "Events;_ptr"};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  },
  get$unload: function() {
    return this.operator$index$1("unload");
  },
  unload$0: function() {
    return this.get$unload().call$0();
  }
};

$$.DedicatedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._ChildrenElementList = {"": "Object;_liblib$_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null, $.Element);
    $.setRuntimeTypeInfo(output, [$.Element]);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        t1 = env3;
        t3 = env2;
        len = env1;
        output = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null, $.Element);
        $.setRuntimeTypeInfo(output, [$.Element]);
        len = t3.get$length(t1);
      case 2:
        var t1, t3, output, len, i, t2;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  contains$1: function(element) {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._liblib$_element.firstElementChild == null;
  },
  get$length: function() {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout1(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout1: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    var t1, t2;
    t1 = this._liblib$_element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout1(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  operator$indexSet$2$bailout1: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    var t1 = this.toList$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._liblib$_element; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.is$Element())
      if (object.parentNode === this)
        this._liblib$_element.$$dom_removeChild$1(object);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    this._liblib$_element.textContent = "";
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._liblib$_element.$$dom_removeChild$1(result);
    return result;
  },
  get$last: function() {
    var result = this._liblib$_element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  get$isEmpty: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout3(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout3: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    var t1 = this._nodeList;
    $.getInterceptor$JSArray(t1).set$length(t1, newLength);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this._nodeList;
    return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib$_list,_liblib$_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2, t3;
    t1 = this._liblib$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout2(1, t1);
    nextIndex = t1 + 1;
    t1 = this._liblib$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout2(2, t1, t2, t3, nextIndex);
    if (nextIndex < t3) {
      this._current = t1.operator$index$1(nextIndex);
      this._liblib$_index = nextIndex;
      return true;
    }
    this._liblib$_index = t2.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextIndex = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._liblib$_index;
      case 1:
        state0 = 0;
        nextIndex = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextIndex, t2, t3;
        state0 = 0;
        if ($.ltB(nextIndex, t3)) {
          this._current = t1.operator$index$1(nextIndex);
          this._liblib$_index = nextIndex;
          return true;
        }
        this._liblib$_index = t2.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$.EventSourceEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  },
  open$3: function(arg0, arg1, arg2) {
    return this.get$open().call$3(arg0, arg1, arg2);
  }
};

$$.Events = {"": "Object;_ptr",
  operator$index$1: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.FileReaderEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  }
};

$$.FileWriterEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$write: function() {
    return this.operator$index$1("write");
  },
  write$1: function(arg0) {
    return this.get$write().call$1(arg0);
  },
  get$writeEnd: function() {
    return this.operator$index$1("writeend");
  }
};

$$.HttpRequestEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  }
};

$$.HttpRequestUploadEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  }
};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaStreamEvents = {"": "Events;_ptr"};

$$.MediaStreamTrackEvents = {"": "Events;_ptr"};

$$.MessagePortEvents = {"": "Events;_ptr"};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.is$Node()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  operator$indexSet$2: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
  },
  get$iterator: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  operator$index$1: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout4(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout4: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.NotificationEvents = {"": "Events;_ptr",
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.RtcDataChannelEvents = {"": "Events;_ptr",
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  },
  open$3: function(arg0, arg1, arg2) {
    return this.get$open().call$3(arg0, arg1, arg2);
  }
};

$$.RtcPeerConnectionEvents = {"": "Events;_ptr",
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  },
  open$3: function(arg0, arg1, arg2) {
    return this.get$open().call$3(arg0, arg1, arg2);
  }
};

$$.SharedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.SpeechRecognitionEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$result: function() {
    return this.operator$index$1("result");
  }
};

$$.TextTrackEvents = {"": "Events;_ptr"};

$$.TextTrackCueEvents = {"": "Events;_ptr"};

$$.TextTrackListEvents = {"": "Events;_ptr"};

$$.WebSocketEvents = {"": "Events;_ptr",
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  },
  open$3: function(arg0, arg1, arg2) {
    return this.get$open().call$3(arg0, arg1, arg2);
  }
};

$$.WindowEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$unload: function() {
    return this.operator$index$1("unload");
  },
  unload$0: function() {
    return this.get$unload().call$0();
  }
};

$$.WorkerEvents = {"": "AbstractWorkerEvents;_ptr"};

$$.WorkerContextEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$._FrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  },
  get$unload: function() {
    return this.operator$index$1("unload");
  },
  unload$0: function() {
    return this.get$unload().call$0();
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.operator$index$1(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        len = env3;
        t1 = env2;
        attributes = env1;
        keys = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0, $.String);
        $.setRuntimeTypeInfo(keys, [$.String]);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, keys, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            keys.push(t1.operator$index$1(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push(attributes[i].get$value());
      }
    }
    return values;
  },
  get$values$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        len = env3;
        t1 = env2;
        attributes = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        values = $.List_List(0, $.String);
        $.setRuntimeTypeInfo(values, [$.String]);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, values, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            values.push(t1.operator$index$1(attributes, i).get$value());
        return values;
    }
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  is$Map: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib$_element",
  containsKey$1: function(key) {
    return this._liblib$_element.$$dom_hasAttribute$1(key);
  },
  operator$index$1: function(key) {
    return this._liblib$_element.$$dom_getAttribute$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._liblib$_element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    var t1 = this.get$keys();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (!(t1 == null))
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (!(this._onData == null) && this.get$_paused() !== true)
      this._target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$location: function() {
    return $._LocationCrossFrame__createSafe(this._window.location);
  },
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$._LocationCrossFrame = {"": "Object;_location>"};

$$._LocationWrapper = {"": "Object;_ptr",
  toString$0: function() {
    return this._ptr.toString();
  },
  is$Location: function() {
    return true;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib$_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, nextPosition, t1);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env1;
        t1 = env0;
        break;
      case 3:
        t1 = env1;
        nextPosition = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib$_length;
      case 2:
        state0 = 0;
      case 3:
        var t1, nextPosition;
        if (state0 === 3 || state0 === 0 && $.ltB(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1, t2, t3;
    t1 = this._childNodes;
    t2 = new $.FilteredElementList__filtered_anon();
    t3 = $.List_List$from($.getInterceptor$JSArray(t1).where$1(t1, t2), $.Element);
    $.setRuntimeTypeInfo(t3, [$.Element]);
    return t3;
  },
  forEach$1: function(f) {
    var t1 = this.get$_filtered();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  operator$indexSet$2: function(index, value) {
    this.operator$index$1(index).replaceWith$1(value);
  },
  set$length: function(newLength) {
    var len = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.geB(newLength, len))
      return;
    else if ($.ltB(newLength, 0))
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(newLength, $.getInterceptor$JSNumber(len).operator$sub$1(len, newLength));
  },
  add$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  addLast$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  contains$1: function(element) {
    var t1, t2;
    if (typeof element === "object" && element !== null && element.is$Element()) {
      t1 = this._childNodes;
      t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element) === true;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  removeRange$2: function(start, rangeLength) {
    var t1, t2;
    t1 = this.get$_filtered();
    t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
    t2 = new $.FilteredElementList_removeRange_anon();
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  clear$0: function() {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      result.remove$0();
    return result;
  },
  where$1: function(f) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  remove$1: function(element) {
    var t1, i, indexElement;
    if (!(typeof element === "object" && element !== null && element.is$Element()))
      return;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.ltB(i, t1.get$length(this)); ++i) {
      indexElement = this.operator$index$1(i);
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
    }
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  get$isEmpty: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this.get$_filtered();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout2(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout2: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  get$iterator: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  },
  indexOf$2: function(element, start) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.DatabaseEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.OpenDBRequestEvents = {"": "RequestEvents;_ptr"};

$$.RequestEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$success: function() {
    return this.operator$index$1("success");
  }
};

$$.TransactionEvents = {"": "Events;_ptr",
  get$complete: function() {
    return this.operator$index$1("complete");
  },
  complete$1: function(arg0) {
    return this.get$complete().call$1(arg0);
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.VersionChangeRequestEvents = {"": "RequestEvents;_ptr"};

$$.JsonListener = {"": "Object;",
  handleString$1: function(value) {
  },
  handleNumber$1: function(value) {
  },
  handleBool$1: function(value) {
  },
  handleNull$0: function() {
  },
  beginObject$0: function() {
  },
  propertyName$0: function() {
  },
  propertyValue$0: function() {
  },
  endObject$0: function() {
  },
  beginArray$0: function() {
  },
  arrayElement$0: function() {
  },
  endArray$0: function() {
  },
  fail$3: function(source, position, message) {
  }
};

$$.BuildJsonListener = {"": "JsonListener;stack,currentContainer,key>,value=",
  pushContainer$0: function() {
    var t1 = this.currentContainer;
    if (typeof t1 === "object" && t1 !== null && t1.is$Map())
      this.stack.push(this.key);
    this.stack.push(this.currentContainer);
  },
  popContainer$0: function() {
    var t1, t2;
    this.value = this.currentContainer;
    t1 = this.stack;
    if (0 >= t1.length)
      throw $.ioore(0);
    this.currentContainer = t1.pop();
    t2 = this.currentContainer;
    if (typeof t2 === "object" && t2 !== null && t2.is$Map()) {
      if (0 >= t1.length)
        throw $.ioore(0);
      this.key = t1.pop();
    }
  },
  handleString$1: function(value) {
    this.value = value;
  },
  handleNumber$1: function(value) {
    this.value = value;
  },
  handleBool$1: function(value) {
    this.value = value;
  },
  handleNull$0: function() {
    this.value = this.value;
  },
  beginObject$0: function() {
    this.pushContainer$0();
    this.currentContainer = $.makeLiteralMap([]);
  },
  propertyName$0: function() {
    this.key = this.value;
    this.value = null;
  },
  propertyValue$0: function() {
    var map, t1, t2;
    map = this.currentContainer;
    t1 = this.key;
    t2 = this.value;
    $.getInterceptor$JSArray(map).operator$indexSet$2(map, t1, t2);
    this.value = null;
    this.key = null;
  },
  endObject$0: function() {
    this.popContainer$0();
  },
  beginArray$0: function() {
    this.pushContainer$0();
    this.currentContainer = [];
  },
  arrayElement$0: function() {
    var list, t1;
    list = this.currentContainer;
    t1 = this.value;
    $.getInterceptor$JSArray(list).add$1(list, t1);
    this.value = null;
  },
  endArray$0: function() {
    this.popContainer$0();
  },
  get$result: function() {
    return this.value;
  }
};

$$.ReviverJsonListener = {"": "BuildJsonListener;reviver,stack,currentContainer,key,value",
  reviver$2: function(arg0, arg1) {
    return this.reviver.call$2(arg0, arg1);
  },
  arrayElement$0: function() {
    var list = this.currentContainer;
    this.value = this.reviver$2($.getInterceptor$JSStringJSArray(list).get$length(list), this.value);
    $.BuildJsonListener.prototype.arrayElement$0.call(this);
  },
  propertyValue$0: function() {
    this.value = this.reviver$2(this.key, this.value);
    $.BuildJsonListener.prototype.propertyValue$0.call(this);
  },
  get$result: function() {
    return this.reviver$2("", this.value);
  }
};

$$.JsonParser = {"": "Object;source>,listener>",
  parse$0: function() {
    var states, t1, length$, t2, t3, position, state, char$, t4, position0;
    states = [];
    t1 = this.source;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    for (t2 = $.getInterceptor$JSString(t1), t3 = this.listener, position = 0, state = 0; $.ltB(position, length$);) {
      char$ = t2.charCodeAt$1(t1, position);
      switch (char$) {
        case 32:
        case 13:
        case 10:
        case 9:
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        case 34:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 8), 0))
            this.fail$1(position);
          position0 = this.parseString$1($.getInterceptor$JSNumber(position).operator$add$1(position, 1));
          state = t4.operator$or$1(state, 28);
          position = position0;
          break;
        case 91:
          if (!$.eqB($.getInterceptor$JSNumber(state).operator$and$1(state, 4), 0))
            this.fail$1(position);
          t3.beginArray$0();
          states.push(state);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 1;
          break;
        case 123:
          if (!$.eqB($.getInterceptor$JSNumber(state).operator$and$1(state, 4), 0))
            this.fail$1(position);
          t3.beginObject$0();
          states.push(state);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 6;
          break;
        case 110:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseNull$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 102:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseFalse$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 116:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseTrue$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 58:
          if (!$.eqB(state, 30))
            this.fail$1(position);
          t3.propertyName$0();
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 19;
          break;
        case 44:
          if ($.eqB(state, 31)) {
            t3.propertyValue$0();
            position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
            state = 22;
          } else if ($.eqB(state, 29)) {
            t3.arrayElement$0();
            position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
            state = 17;
          } else
            this.fail$1(position);
          break;
        case 93:
          if ($.eqB(state, 1))
            t3.endArray$0();
          else if ($.eqB(state, 29)) {
            t3.arrayElement$0();
            t3.endArray$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          t4 = states.pop();
          state = $.getInterceptor$JSNumber(t4).operator$or$1(t4, 28);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        case 125:
          if ($.eqB(state, 6))
            t3.endObject$0();
          else if ($.eqB(state, 31)) {
            t3.propertyValue$0();
            t3.endObject$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          t4 = states.pop();
          state = $.getInterceptor$JSNumber(t4).operator$or$1(t4, 28);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        default:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseNumber$2(char$, position);
          state = t4.operator$or$1(state, 28);
          break;
      }
    }
    if (!$.eqB(state, 28))
      this.fail$1(position);
  },
  parseTrue$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseTrue$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(2, position, t1, t3);
    t5 = position + 4;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(3, position, $.CONSTANT2, t2, t1, t3);
    if (t3 === 114) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseTrue$1$bailout(4, position, $.CONSTANT2, t2, t1, t3);
      if (t3 === 117) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseTrue$1$bailout(5, position, $.CONSTANT2, t1);
        t3 = !(t1 === 101);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(true);
    return t5;
  },
  parseTrue$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t2 = env4;
        t1 = env3;
        t3 = env2;
        t4 = env1;
        position = env0;
        break;
      case 4:
        t2 = env4;
        t1 = env3;
        t3 = env2;
        t4 = env1;
        position = env0;
        break;
      case 5:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 4)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 114))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            case 5:
              if (state0 === 5 || state0 === 0 && $.eqB(t2, 117))
                switch (state0) {
                  case 0:
                    t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                    t3 = !$.eqB(t1, 101);
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(true);
        return t4.operator$add$1(position, 4);
    }
  },
  parseFalse$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseFalse$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(2, position, t1, t3);
    t5 = position + 5;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(3, position, t1, $.CONSTANT2, t3, t2);
    if (t3 === 97) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseFalse$1$bailout(4, position, t1, $.CONSTANT2, t3, t2);
      if (t3 === 108) {
        t3 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t3 !== "number")
          return this.parseFalse$1$bailout(5, position, t1, $.CONSTANT2, t3, t2);
        if (t3 === 115) {
          t1 = t2.charCodeAt$1(t1, position + 4);
          if (typeof t1 !== "number")
            return this.parseFalse$1$bailout(6, position, $.CONSTANT2, t1);
          t3 = !(t1 === 101);
          t1 = t3;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(false);
    return t5;
  },
  parseFalse$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 4:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 5:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 6:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 5)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 97))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            default:
              if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(t2, 108))
                switch (state0) {
                  case 0:
                    t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                  case 6:
                    if (state0 === 6 || state0 === 0 && $.eqB(t2, 115))
                      switch (state0) {
                        case 0:
                          t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 4));
                        case 6:
                          state0 = 0;
                          t3 = !$.eqB(t1, 101);
                          t1 = t3;
                      }
                    else
                      t1 = true;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(false);
        return t4.operator$add$1(position, 5);
    }
  },
  parseNull$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseNull$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(2, position, t1, t3);
    t5 = position + 4;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(3, position, $.CONSTANT2, t1, t3, t2);
    if (t3 === 117) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseNull$1$bailout(4, position, $.CONSTANT2, t1, t3, t2);
      if (t3 === 108) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseNull$1$bailout(5, position, $.CONSTANT2, t1);
        t3 = !(t1 === 108);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleNull$0();
    return t5;
  },
  parseNull$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t3 = env4;
        t2 = env3;
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
      case 4:
        t3 = env4;
        t2 = env3;
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
      case 5:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 4)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 117))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            case 5:
              if (state0 === 5 || state0 === 0 && $.eqB(t2, 108))
                switch (state0) {
                  case 0:
                    t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                    t3 = !$.eqB(t1, 108);
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleNull$0();
        return t4.operator$add$1(position, 4);
    }
  },
  parseString$1: function(position) {
    var t1, t2, t3, t4, position0, char$, firstEscape, chars, hexStart, value, i, t5, result;
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = $.getInterceptor$JSNumber(position);
    t4 = $.getInterceptor$JSStringJSArray(t1);
    position0 = position;
    do {
      if ($.eqB(position0, t4.get$length(t1)))
        this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
      char$ = t2.charCodeAt$1(t1, position0);
      if ($.eqB(char$, 34)) {
        this.listener.handleString$1(t2.substring$2(t1, position, position0));
        return $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
      }
      if ($.ltB(char$, 32))
        this.fail$2(position0, "Control character in string");
      position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
    } while (!$.eqB(char$, 92));
    firstEscape = $.getInterceptor$JSNumber(position0).operator$sub$1(position0, 1);
    chars = [];
    for (; true;) {
      if ($.eqB(position0, t4.get$length(t1)))
        this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
      char$ = t2.charCodeAt$1(t1, position0);
      switch (char$) {
        case 98:
          char$ = 8;
          break;
        case 102:
          char$ = 12;
          break;
        case 110:
          char$ = 10;
          break;
        case 114:
          char$ = 13;
          break;
        case 116:
          char$ = 9;
          break;
        case 47:
        case 92:
        case 34:
          break;
        case 117:
          hexStart = $.getInterceptor$JSNumber(position0).operator$sub$1(position0, 1);
          for (value = 0, i = 0; i < 4; ++i) {
            position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
            if ($.eqB(position0, t4.get$length(t1)))
              this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
            char$ = t2.charCodeAt$1(t1, position0);
            char$ = $.getInterceptor$JSNumber(char$).operator$sub$1(char$, 48);
            if ($.ltB(char$, 0))
              this.fail$2(hexStart, "Invalid unicode escape");
            if ($.ltB(char$, 10)) {
              t5 = value * 16;
              if (typeof char$ !== "number")
                throw $.iae(char$);
              value = t5 + char$;
            } else {
              t5 = $.getInterceptor$JSNumber(char$).operator$or$1(char$, 32);
              char$ = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, 49);
              if ($.ltB(char$, 0) || $.gtB(char$, 5))
                this.fail$2(hexStart, "Invalid unicode escape");
              t5 = value * 16;
              if (typeof char$ !== "number")
                throw $.iae(char$);
              value = t5 + char$ + 10;
            }
          }
          char$ = value;
          break;
        default:
          if ($.ltB(char$, 32))
            this.fail$2(position0, "Control character in string");
          this.fail$2(position0, "Unrecognized string escape");
      }
      do {
        chars.push(char$);
        position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
        if ($.eqB(position0, t4.get$length(t1)))
          this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
        char$ = t2.charCodeAt$1(t1, position0);
        if ($.eqB(char$, 34)) {
          result = $.String_String$fromCharCodes(chars);
          if ($.ltB(position, firstEscape))
            result = $.S(t2.substring$2(t1, position, firstEscape)) + $.S(result);
          this.listener.handleString$1(result);
          return $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
        }
        if ($.ltB(char$, 32))
          this.fail$2(position0, "Control character in string");
      } while (!$.eqB(char$, 92));
      position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
    }
  },
  parseNumber$2: function(char$, position) {
    var t1, t2, t3, length$, position0, t4;
    t1 = {};
    if (typeof char$ !== "number")
      return this.parseNumber$2$bailout(1, char$, position, t1);
    if (typeof position !== "number")
      return this.parseNumber$2$bailout(1, char$, position, t1);
    t2 = this.source;
    t3 = $.getInterceptor$JSStringJSArray(t2);
    length$ = t3.get$length(t2);
    t1.isDouble_0 = false;
    if (char$ === 45) {
      position0 = position + 1;
      if (position0 === length$)
        this.fail$2(position0, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position0);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(2, t2, t1, position0, position, length$, char$);
    } else
      position0 = position;
    if (char$ < 48 || char$ > 57)
      this.fail$2(position0, "Missing expected digit");
    t4 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
    if (char$ === 48) {
      position = position0 + 1;
      if (position === length$)
        return t4.call$1(position);
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(3, position, t2, t1, length$, t4, char$);
      if (48 <= char$ && char$ <= 57)
        this.fail$1(position);
    } else {
      position = position0;
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(4, t2, t1, char$, t3, position, length$, t4);
      } while (48 <= char$ && char$ <= 57);
    }
    if (char$ === 46) {
      t1.isDouble_0 = true;
      ++position;
      if (position === length$)
        this.fail$2(position, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(5, t2, t1, position, length$, t4, t3, char$);
      if (char$ < 48 || char$ > 57)
        this.fail$1(position);
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(6, t2, t1, char$, length$, position, t4, t3);
      } while (48 <= char$ && char$ <= 57);
    }
    if (char$ === 101 || char$ === 69) {
      t1.isDouble_0 = true;
      ++position;
      if (position === length$)
        this.fail$2(position, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(7, t2, position, length$, t4, t3, char$);
      if (char$ === 43 || char$ === 45) {
        ++position;
        if (position === length$)
          this.fail$2(position, "Missing expected digit");
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(8, t2, length$, t4, char$, t3, position);
      }
      if (char$ < 48 || char$ > 57)
        this.fail$2(position, "Missing expected digit");
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(9, t2, char$, length$, t4, position, t3);
      } while (48 <= char$ && char$ <= 57);
    }
    return t4.call$1(position);
  },
  parseNumber$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
    switch (state0) {
      case 1:
        t1 = env2;
        position = env1;
        char$ = env0;
        break;
      case 2:
        char$ = env5;
        length$ = env4;
        position = env3;
        position0 = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 3:
        char$ = env5;
        t3 = env4;
        length$ = env3;
        t1 = env2;
        t2 = env1;
        position = env0;
        break;
      case 4:
        t3 = env6;
        length$ = env5;
        position = env4;
        t4 = env3;
        char$ = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 5:
        char$ = env6;
        t4 = env5;
        t3 = env4;
        length$ = env3;
        position = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 6:
        t4 = env6;
        t3 = env5;
        position = env4;
        length$ = env3;
        char$ = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 7:
        char$ = env5;
        t1 = env4;
        t3 = env3;
        length$ = env2;
        position = env1;
        t2 = env0;
        break;
      case 8:
        position = env5;
        t1 = env4;
        char$ = env3;
        t3 = env2;
        length$ = env1;
        t2 = env0;
        break;
      case 9:
        t1 = env5;
        position = env4;
        t3 = env3;
        length$ = env2;
        char$ = env1;
        t2 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        state0 = 0;
        t2 = this.source;
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
        t1.isDouble_0 = false;
      case 2:
        if (state0 === 2 || state0 === 0 && $.eqB(char$, 45))
          switch (state0) {
            case 0:
              position0 = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position0, length$))
                this.fail$2(position0, "Missing expected digit");
              char$ = $.getInterceptor$JSString(t2).charCodeAt$1(t2, position0);
            case 2:
              state0 = 0;
          }
        else
          position0 = position;
        if ($.ltB(char$, 48) || $.gtB(char$, 57))
          this.fail$2(position0, "Missing expected digit");
        t3 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
      default:
        if (state0 === 3 || state0 === 0 && $.eqB(char$, 48))
          switch (state0) {
            case 0:
              position = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
              if ($.eqB(position, length$))
                return t3.call$1(position);
              char$ = $.getInterceptor$JSString(t2).charCodeAt$1(t2, position);
            case 3:
              state0 = 0;
              if ($.leB(48, char$) && $.leB(char$, 57))
                this.fail$1(position);
          }
        else
          switch (state0) {
            case 0:
              t4 = $.getInterceptor$JSString(t2);
              position = position0;
            case 4:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t4.charCodeAt$1(t2, position);
                    case 4:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L0;
                  }
          }
      case 5:
      case 6:
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(char$, 46))
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position, length$))
                this.fail$2(position, "Missing expected digit");
              t4 = $.getInterceptor$JSString(t2);
              char$ = t4.charCodeAt$1(t2, position);
            case 5:
              state0 = 0;
              if ($.ltB(char$, 48) || $.gtB(char$, 57))
                this.fail$1(position);
            case 6:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t4.charCodeAt$1(t2, position);
                    case 6:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L1;
                  }
          }
      case 7:
      case 8:
      case 9:
        var t1, position, char$, t2, length$, position0, t3, t4;
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && ($.eqB(char$, 101) || $.eqB(char$, 69)))
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position, length$))
                this.fail$2(position, "Missing expected digit");
              t1 = $.getInterceptor$JSString(t2);
              char$ = t1.charCodeAt$1(t2, position);
            case 7:
              state0 = 0;
            case 8:
              if (state0 === 8 || state0 === 0 && ($.eqB(char$, 43) || $.eqB(char$, 45)))
                switch (state0) {
                  case 0:
                    position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                    if ($.eqB(position, length$))
                      this.fail$2(position, "Missing expected digit");
                    char$ = t1.charCodeAt$1(t2, position);
                  case 8:
                    state0 = 0;
                }
              if ($.ltB(char$, 48) || $.gtB(char$, 57))
                this.fail$2(position, "Missing expected digit");
            case 9:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t1.charCodeAt$1(t2, position);
                    case 9:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L2;
                  }
          }
        return t3.call$1(position);
    }
  },
  fail$2: function(position, message) {
    var t1, t2, sliceEnd, t3, slice;
    if (typeof position !== "number")
      return this.fail$2$bailout(1, position, message);
    if (typeof message !== "string")
      return this.fail$2$bailout(1, position, message);
    t1 = this.listener;
    t2 = this.source;
    t1.fail$3(t2, position, message);
    sliceEnd = position + 20;
    t1 = $.getInterceptor$JSStringJSArray(t2);
    t3 = t1.get$length(t2);
    if (typeof t3 !== "number")
      return this.fail$2$bailout(2, position, t2, sliceEnd, t3);
    slice = sliceEnd > t3 ? "'" + $.S(t1.substring$1(t2, position)) + "'" : "'" + $.S(t1.substring$2(t2, position, sliceEnd)) + "...'";
    throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
  },
  fail$2$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        message = env1;
        position = env0;
        break;
      case 2:
        t1 = env3;
        sliceEnd = env2;
        t2 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (message == null)
          message = "Unexpected character";
        t1 = this.listener;
        t2 = this.source;
        t1.fail$3(t2, position, message);
        sliceEnd = $.getInterceptor$JSNumber(position).operator$add$1(position, 20);
        t1 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 2:
        var message, position, t1, t2, sliceEnd, t4, slice;
        state0 = 0;
        t1 = $.gtB(sliceEnd, t1);
        t4 = $.getInterceptor$JSString(t2);
        slice = t1 ? "'" + $.S(t4.substring$1(t2, position)) + "'" : "'" + $.S(t4.substring$2(t2, position, sliceEnd)) + "...'";
        throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
    }
  },
  fail$1: function(position) {
    return this.fail$2(position, null);
  }
};

$$.ElementInstanceEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  load$1: function(arg0) {
    return this.get$load().call$1(arg0);
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$unload: function() {
    return this.operator$index$1("unload");
  },
  unload$0: function() {
    return this.get$unload().call$0();
  }
};

$$.AudioContextEvents = {"": "Events;_ptr",
  get$complete: function() {
    return this.operator$index$1("complete");
  },
  complete$1: function(arg0) {
    return this.get$complete().call$1(arg0);
  }
};

$$.WebComponent = {"": "Object;",
  createShadowRoot$0: function() {
    var t1, t2;
    if ($.useShadowDom === true && !!(Element.prototype.webkitCreateShadowRoot))
      return this._element.createShadowRoot$0();
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    t1 = this._shadowRoots;
    t2 = $.Element_Element$html("<div class=\"shadowroot\"></div>");
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = this._shadowRoots;
    return $.getInterceptor$JSArray(t2).get$last(t2);
  },
  created$0: function() {
  },
  inserted$0: function() {
  },
  removed$0: function() {
  },
  composeChildren$0: function() {
    var t1, treeStack, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i, t2;
    if ($.useShadowDom === true && !!(Element.prototype.webkitCreateShadowRoot))
      return;
    t1 = this._shadowRoots;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      throw $.$$throw($.StateError$("Distribution algorithm requires at least one shadow root and can only be run once."));
    treeStack = this._shadowRoots;
    t1 = $.getInterceptor$JSArray(treeStack);
    tree = t1.removeLast$0(treeStack);
    pool = $.List_List$from(this.get$nodes());
    $.setRuntimeTypeInfo(pool, []);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = tree0.query$1("shadow");
      if (!(point == null))
        if ($.gtB(t1.get$length(treeStack), 0)) {
          tree0 = t1.removeLast$0(treeStack);
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          $.WebComponent__distribute(point, pool);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw $.ioore(i);
      t1 = $.List_List$from(shadowInsertionTrees[i].get$nodes());
      $.setRuntimeTypeInfo(t1, []);
      $.WebComponent__distribute(point, t1);
    }
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this.get$nodes();
    t2 = $.List_List$from(tree.get$nodes());
    $.setRuntimeTypeInfo(t2, []);
    $.getInterceptor$JSArray(t1).addAll$1(t1, t2);
  },
  _distributeNodes$2: function(tree, pool) {
    var t1, t2, t3, select, matching, notMatching, t4;
    if (typeof pool !== "object" || pool === null || pool.constructor !== Array || !!pool.fixed$length)
      return this._distributeNodes$2$bailout(1, tree, pool);
    for (t1 = tree.queryAll$1("content"), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (!$.WebComponent__isActive(t2))
        continue;
      t3 = t2.get$attributes();
      select = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(2, t1, pool, select, t2);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t3 = $.CONSTANT0.get$iterator(pool); t3.moveNext$0() === true;) {
        t4 = t3.get$current();
        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
      }
      if (matching.length === 0) {
        matching = t2.get$nodes();
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(3, matching, t1, notMatching, t2);
      }
      $.WebComponent__distribute(t2, matching);
      pool = notMatching;
    }
    return pool;
  },
  _distributeNodes$2$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        pool = env1;
        tree = env0;
        break;
      case 2:
        t2 = env3;
        select = env2;
        pool = env1;
        t1 = env0;
        break;
      case 3:
        t2 = env3;
        notMatching = env2;
        t1 = env1;
        matching = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = tree.queryAll$1("content");
        t1 = $.getInterceptor$JSArray(t1).get$iterator(t1);
      default:
        var pool, tree, t1, t2, t3, select, matching, notMatching, t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = t1.get$current();
                      if (!$.WebComponent__isActive(t2))
                        break c$0;
                      t3 = t2.get$attributes();
                      select = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, "select");
                    case 2:
                      state0 = 0;
                      if (select == null || $.eqB(select, ""))
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t3 = $.getInterceptor$JSArray(pool).get$iterator(pool); t3.moveNext$0() === true;) {
                        t4 = t3.get$current();
                        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
                      }
                    case 3:
                      if (state0 === 3 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t2.get$nodes();
                          case 3:
                            state0 = 0;
                        }
                      $.WebComponent__distribute(t2, matching);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  },
  get$nodes: function() {
    return this._element.get$nodes();
  },
  replaceWith$1: function(otherNode) {
    this._element.replaceWith$1(otherNode);
  },
  remove$0: function() {
    return this._element.remove$0();
  },
  set$text: function(v) {
    this._element.set$text(v);
  },
  contains$1: function(other) {
    var t1 = this._element;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, other);
  },
  insertBefore$2: function(newChild, refChild) {
    return this._element.insertBefore$2(newChild, refChild);
  },
  get$attributes: function() {
    return this._element.get$attributes();
  },
  get$elements: function() {
    return this._element.get$children();
  },
  get$children: function() {
    return this._element.get$children();
  },
  get$parent: function() {
    return this._element.get$parent();
  },
  get$parentNode: function() {
    return this._element.get$parentNode();
  },
  get$on: function() {
    return this._element.get$on();
  },
  get$id: function() {
    return this._element.get$id();
  },
  set$innerHtml: function(v) {
    this._element.set$innerHtml(v);
  },
  get$tagName: function() {
    return this._element.get$tagName();
  },
  matches$1: function(selectors) {
    return this._element.matches$1(selectors);
  },
  webkitRequestPointerLock$0: function() {
    this._element.webkitRequestPointerLock$0();
  },
  query$1: function(selectors) {
    return this._element.query$1(selectors);
  },
  queryAll$1: function(selectors) {
    return this._element.queryAll$1(selectors);
  },
  get$$$dom_children: function() {
    return this._element.get$$$dom_children();
  },
  get$$$dom_firstElementChild: function() {
    return this._element.get$$$dom_firstElementChild();
  },
  get$$$dom_lastElementChild: function() {
    return this._element.get$$$dom_lastElementChild();
  },
  $$dom_getAttribute$1: function(name$) {
    return this._element.$$dom_getAttribute$1(name$);
  },
  $$dom_hasAttribute$1: function(name$) {
    return this._element.$$dom_hasAttribute$1(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this._element.$$dom_querySelector$1(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this._element.$$dom_querySelectorAll$1(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this._element.$$dom_removeAttribute$1(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this._element.$$dom_setAttribute$2(name$, value);
  },
  get$$$dom_attributes: function() {
    return this._element.get$$$dom_attributes();
  },
  get$$$dom_childNodes: function() {
    return this._element.get$$$dom_childNodes();
  },
  get$$$dom_localName: function() {
    return this._element.get$$$dom_localName();
  },
  get$$$dom_namespaceUri: function() {
    return this._element.get$$$dom_namespaceUri();
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_addEventListener$3(type, listener, useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this._element.$$dom_appendChild$1(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this._element.$$dom_removeChild$1(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_removeEventListener$3(type, listener, useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this._element.$$dom_replaceChild$2(newChild, oldChild);
  },
  get$xtag: function() {
    return this._element.get$xtag();
  },
  set$xtag: function(value) {
    this._element.set$xtag(value);
  },
  get$onClick: function() {
    return this._element.get$onClick();
  },
  get$onKeyDown: function() {
    return this._element.get$onKeyDown();
  },
  get$onKeyUp: function() {
    return this._element.get$onKeyUp();
  },
  get$onMouseMove: function() {
    return this._element.get$onMouseMove();
  },
  get$onFullscreenChange: function() {
    return this._element.get$onFullscreenChange();
  },
  WebComponent$forElement$1: function(element) {
    if (element == null || !(this._element.get$xtag() == null))
      throw $.$$throw($.ArgumentError$("element must be provided and not have its xtag property set"));
    this._element.set$xtag(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  }
};

$$.WatchEvent = {"": "Object;oldValue,newValue>"};

$$._Watcher = {"": "Object;debugName,_getter>,_liblib6$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  toString$0: function() {
    var t1 = this.debugName;
    return t1 == null ? "<unnamed>" : t1;
  },
  _update$1: function(currentValue) {
    this._lastValue = currentValue;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.print("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  }
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib6$_callback,_lastValue",
  _update$1: function(currentValue) {
    var t1 = $.List_List$from(currentValue, $.getRuntimeTypeInfo(this)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
    this._lastValue = t1;
  },
  _ListWatcher$3: function(getter, callback, debugName) {
    this._update$1(this._safeRead$0());
  }
};

$$.TemplateItem = {"": "Object;"};

$$.DomPropertyBinding = {"": "TemplateItem;setter,getter,isUrl>,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    if (!(this.stopper == null))
      throw $.$$throw($.StateError$("data binding already attached."));
    this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_anon(this), null);
  },
  remove$0: function() {
    this.stopper$0();
    this.stopper = null;
  }
};

$$.ComponentItem = {"": "TemplateItem;elem",
  get$_xtag: function() {
    var t1 = this.elem;
    if (t1.get$xtag() == null)
      throw $.$$throw($.StateError$("element doesn't have an associated component"));
    return t1.get$xtag();
  },
  create$0: function() {
    var t1 = this.get$_xtag();
    t1.created_autogenerated$0();
    t1.created$0();
    t1.composeChildren$0();
  },
  insert$0: function() {
    var t1 = this.get$_xtag();
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  remove$0: function() {
    var t1 = this.get$_xtag();
    t1.removed_autogenerated$0();
    t1.removed$0();
  }
};

$$.Template = {"": "TemplateItem;node,children>,nodes>",
  oneWayBind$3: function(exp, setter, isUrl) {
    var t1, t2;
    t1 = this.children;
    t2 = $.DomPropertyBinding$(exp, setter, isUrl);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  component$1: function(elem) {
    var t1, t2;
    t1 = this.children;
    t2 = $.ComponentItem$(elem);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  add$1: function(n) {
    return this.nodes.push(n);
  },
  addAll$1: function(list) {
    return $.CONSTANT0.addAll$1(this.nodes, list);
  },
  create$0: function() {
    return this._visitChildren$1(new $.Template_create_anon());
  },
  insert$0: function() {
    return this._visitChildren$1(new $.Template_insert_anon());
  },
  remove$0: function() {
    this._visitChildren$2$reverseOrder(new $.Template_remove_anon(), true);
    var t1 = this.children;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  _visitChildren$2$reverseOrder: function(onTemplateItem, reverseOrder) {
    var t1, len, t2, i, t3;
    t1 = this.children;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._visitChildren$2$reverseOrder$bailout(1, onTemplateItem, reverseOrder, t1);
    len = t1.length;
    for (t2 = reverseOrder === true, i = 0; i < len; ++i) {
      t3 = t2 ? len - i - 1 : i;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      onTemplateItem.call$1(t1[t3]);
    }
  },
  _visitChildren$2$reverseOrder$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env2;
        reverseOrder = env1;
        onTemplateItem = env0;
        break;
      case 2:
        t1 = env4;
        len = env3;
        t3 = env2;
        reverseOrder = env1;
        onTemplateItem = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.children;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        len = t3.get$length(t1);
      case 2:
        var t1, reverseOrder, onTemplateItem, t3, len, t2, t4, i, t5;
        state0 = 0;
        for (t2 = $.getInterceptor$JSNumber(len), t4 = reverseOrder === true, i = 0; $.ltB(i, len); ++i) {
          if (t4) {
            t5 = t2.operator$sub$1(len, i);
            t5 = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, 1);
          } else
            t5 = i;
          onTemplateItem.call$1(t3.operator$index$1(t1, t5));
        }
    }
  },
  _visitChildren$1: function(onTemplateItem) {
    return this._visitChildren$2$reverseOrder(onTemplateItem, false);
  }
};

$$.Uri = {"": "Object;scheme,userInfo,domain,port,path,query,fragment",
  query$1: function(arg0) {
    return this.query.call$1(arg0);
  },
  toString$0: function() {
    var sb, t1, t2;
    sb = $.StringBuffer_StringBuffer("");
    t1 = this.scheme;
    $.Uri__addIfNonEmpty(sb, t1, t1, ":");
    t2 = this.userInfo;
    if (!$.eqB(t2, "") || !$.eqB(this.domain, "") || !$.eqB(this.port, 0) || $.eqB(t1, "file")) {
      t1 = $.getInterceptor$JSArray(sb);
      t1.add$1(sb, "//");
      $.Uri__addIfNonEmpty(sb, t2, t2, "@");
      t2 = this.domain;
      t1.add$1(sb, t2 == null ? "null" : t2);
      t2 = this.port;
      if (!$.eqB(t2, 0)) {
        t1.add$1(sb, ":");
        t1.add$1(sb, $.getInterceptor(t2).toString$0(t2));
      }
    }
    t1 = this.path;
    if (t1 == null)
      t1 = "null";
    t2 = $.getInterceptor$JSArray(sb);
    t2.add$1(sb, t1);
    t1 = this.query;
    $.Uri__addIfNonEmpty(sb, t1, "?", t1);
    t1 = this.fragment;
    $.Uri__addIfNonEmpty(sb, t1, "#", t1);
    return t2.toString$0(sb);
  },
  operator$eq$1: function(other) {
    if (!(typeof other === "object" && other !== null && !!other.is$Uri))
      return false;
    return $.eqB(this.scheme, other.scheme) && $.eqB(this.userInfo, other.userInfo) && $.eqB(this.domain, other.domain) && $.eqB(this.port, other.port) && $.eqB(this.path, other.path) && $.eqB(this.query, other.query) && $.eqB(this.fragment, other.fragment);
  },
  get$hashCode: function() {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.domain, t1.call$2(this.port, t1.call$2(this.path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  is$Uri: true
};

$$.ModelViewerComponent = {"": "WebComponent;_root,__e3>,__t,_width,_lastWidth,_height,_lastHeight,_canvas,_lastFrameTime,_graphicsDevice,_context,_viewport,_blendState,_depthState,_rasterizerState,_shaderProgram,_vertexShader,_fragmentShader,_inputLayout>,_model>,_resourceManager,_meshCount,_camera,_cameraController,_modelMatrix,_modelMatrixArray,_modelViewMatrixArray,_modelViewProjectionMatrixArray,_projectionMatrixArray,_normalMatrixArray,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._root = this.createShadowRoot$0();
    this.__t = $.Template$(this._root);
    this._root.set$innerHtml("    <canvas tabindex=\"-1\" id=\"__e-3\"></canvas>\n    ");
    this.__e3 = this._root.query$1("#__e-3");
    this.__t.oneWayBind$3(new $.ModelViewerComponent_created_autogenerated_anon(this), new $.ModelViewerComponent_created_autogenerated_anon0(this), false);
    this.__t.oneWayBind$3(new $.ModelViewerComponent_created_autogenerated_anon1(this), new $.ModelViewerComponent_created_autogenerated_anon2(this), false);
    this.__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this.__t.insert$0();
  },
  removed_autogenerated$0: function() {
    this.__t.remove$0();
    this.__t = null;
    this.__e3 = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._root;
    if (!(typeof t1 === "object" && t1 !== null && t1.is$ShadowRoot()))
      this._root = this;
  },
  get$width: function() {
    return this._width;
  },
  set$width: function(value) {
    this._width = value;
    this._resize$0();
  },
  get$height: function() {
    return this._height;
  },
  set$height: function(value) {
    this._height = value;
    this._resize$0();
  },
  get$pointerLocked: function() {
    return $.eq(this._canvas, $.document().get$webkitPointerLockElement());
  },
  set$pointerLocked: function(value) {
    if (!$.eqB(this.get$pointerLocked(), value))
      if (value === true)
        this._canvas.webkitRequestPointerLock$0();
      else
        $.document().webkitExitPointerLock$0();
  },
  inserted$0: function() {
    $.WebComponent.prototype.inserted$0.call(this);
    this._canvas = document.query$1("canvas");
    this._resourceManager = $.ResourceManager$();
    this._graphicsDevice = $.GraphicsDevice$(this._canvas.getContext$1("experimental-webgl"));
    this._context = this._graphicsDevice.get$context();
    this._viewport = $.Viewport$("Viewport", this._graphicsDevice);
    this._blendState = $.BlendState$opaque("BlendState", this._graphicsDevice);
    this._depthState = $.DepthState$depthWrite("DepthState", this._graphicsDevice);
    this._rasterizerState = $.RasterizerState$cullClockwise("RasterizerState", this._graphicsDevice);
    this._vertexShader = this._graphicsDevice.createVertexShader$1("VertexShader");
    this._vertexShader.set$source("  precision highp float;\n  \n  // Vertex attributes\n  attribute vec3 vPosition;\n  attribute vec2 vTexCoord0;\n  \n  // Uniform variables\n  uniform float uTime;\n  uniform mat4 uModelMatrix;\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uModelViewProjectionMatrix;\n  uniform mat4 uProjectionMatrix;\n  uniform mat4 uNormalMatrix;\n  \n  // Varying variables\n  // Allows communication between vertex and fragment stages\n  varying vec2 samplePoint;\n  \n  void main() {\n    vec4 vPosition4 = vec4(vPosition, 1.0);\n    gl_Position = uModelViewProjectionMatrix * vPosition4;\n    samplePoint = vTexCoord0;\n  }\n  ");
    this._vertexShader.compile$0();
    this._fragmentShader = this._graphicsDevice.createFragmentShader$1("FragmentShader");
    this._fragmentShader.set$source("  precision mediump float;\n  \n  varying vec2 samplePoint;\n  uniform sampler2D sampler;\n  \n  void main() {\n    gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);//texture2D(sampler, samplePoint);\n  }\n  ");
    this._fragmentShader.compile$0();
    this._shaderProgram = this._graphicsDevice.createShaderProgram$1("ShaderProgram");
    var t1 = this._vertexShader;
    this._shaderProgram.set$vertexShader(t1);
    t1 = this._fragmentShader;
    this._shaderProgram.set$fragmentShader(t1);
    this._shaderProgram.link$0();
    this._model = this._graphicsDevice.createSingleArrayIndexedMesh$1("Mesh");
    this._inputLayout = this._graphicsDevice.createInputLayout$1("InputLayout");
    t1 = this._model;
    this._inputLayout.set$mesh(t1);
    t1 = this._shaderProgram;
    this._inputLayout.set$shaderProgram(t1);
    this._camera = $.Camera$();
    this._cameraController = $.MouseKeyboardCameraController$();
    t1 = $.vec3$raw(0, 0, -2.5);
    this._camera.set$position(t1);
    t1 = $.vec3$raw(0, 0, 0);
    this._camera.set$focusPosition(t1);
    this._modelMatrix = $.mat4$identity();
    this._modelMatrixArray = $.Float32Array_Float32Array(16);
    this._modelViewMatrixArray = $.Float32Array_Float32Array(16);
    this._modelViewProjectionMatrixArray = $.Float32Array_Float32Array(16);
    this._projectionMatrixArray = $.Float32Array_Float32Array(16);
    this._normalMatrixArray = $.Float32Array_Float32Array(16);
    this._canvas.get$onClick().listen$1(this.get$_onClick());
    this._canvas.get$onKeyDown().listen$1(this.get$_onKeyboardDown());
    this._canvas.get$onKeyUp().listen$1(this.get$_onKeyboardUp());
    this._canvas.get$onMouseMove().listen$1(this.get$_onMouseMove());
    this._canvas.get$onFullscreenChange().listen$1(this.get$_onFullscreenChange());
    this._resize$0();
  },
  update$1: function(time) {
    var t1, dt, rotation, t2, modelView, projection;
    t1 = this._lastFrameTime;
    t1 = $.getInterceptor$JSNumber(time).operator$sub$1(time, t1);
    dt = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 0.001);
    this._lastFrameTime = time;
    this._cameraController.UpdateCamera$2(dt, this._camera);
    rotation = $.mat4$rotationX(0);
    this._modelMatrix.multiply$1(rotation);
    this._modelMatrix.copyIntoArray$1(this._modelMatrixArray);
    t1 = this._camera.get$lookAtMatrix();
    t2 = this._modelMatrix;
    modelView = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    modelView.copyIntoArray$1(this._modelViewMatrixArray);
    projection = this._camera.get$projectionMatrix();
    projection.copyIntoArray$1(this._projectionMatrixArray);
    $.getInterceptor$JSNumber(projection).operator$mul$1(projection, modelView).copyIntoArray$1(this._modelViewProjectionMatrixArray);
    this._camera.copyProjectionMatrixIntoArray$1(this._projectionMatrixArray);
    this._camera.copyNormalMatrixIntoArray$1(this._normalMatrixArray);
  },
  draw$0: function() {
    this._context.clearColorBuffer$4(0, 0, 0, 1);
    this._context.clearDepthBuffer$1(1);
    this._context.reset$0();
    this._context.setViewport$1(this._viewport);
    this._context.setBlendState$1(this._blendState);
    this._context.setRasterizerState$1(this._rasterizerState);
    this._context.setDepthState$1(this._depthState);
    this._context.setShaderProgram$1(this._shaderProgram);
    this._context.setConstant$2("uTime", this._lastFrameTime);
    this._context.setConstant$2("uModelMatrix", this._modelMatrixArray);
    this._context.setConstant$2("uModelViewMatrix", this._modelViewMatrixArray);
    this._context.setConstant$2("uModelViewProjectionMatrix", this._modelViewProjectionMatrixArray);
    this._context.setConstant$2("uProjectionMatrix", this._projectionMatrixArray);
    this._context.setConstant$2("uNormalMatrix", this._normalMatrixArray);
    this._context.setInputLayout$1(this._inputLayout);
    this._context.setIndexedMesh$1(this._model);
    this._context.drawIndexedMesh$1(this._model);
  },
  loadModelFromUrl$1: function(url) {
    var meshResource = this._resourceManager.registerResource$1(url);
    this._resourceManager.addEventCallback$3(meshResource, 1, new $.ModelViewerComponent_loadModelFromUrl_anon(this));
    this._resourceManager.loadResource$1(meshResource);
  },
  _resize$0: function() {
    var t1, t2;
    t1 = this._canvas;
    if (!(t1 == null)) {
      t1.set$width(this._width);
      t1 = this._height;
      this._canvas.set$height(t1);
      t1 = this._width;
      this._viewport.set$width(t1);
      t1 = this._height;
      this._viewport.set$height(t1);
      t1 = this._width;
      t2 = this._height;
      t2 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t2);
      this._camera.set$aspectRatio(t2);
    }
  },
  _onClick$1: function(_) {
    this.set$pointerLocked(true);
  },
  get$_onClick: function() {
    return new $.BoundClosure0(this, "_onClick$1");
  },
  _onKeyboardDown$1: function(event$) {
    if (this.get$pointerLocked() !== true)
      return;
    switch (event$.get$keyCode()) {
      case 65:
        this._cameraController.set$strafeLeft(true);
        break;
      case 68:
        this._cameraController.set$strafeRight(true);
        break;
      case 83:
        this._cameraController.set$backward(true);
        break;
      case 87:
        this._cameraController.set$forward(true);
        break;
    }
  },
  get$_onKeyboardDown: function() {
    return new $.BoundClosure0(this, "_onKeyboardDown$1");
  },
  _onKeyboardUp$1: function(event$) {
    switch (event$.get$keyCode()) {
      case 65:
        this._cameraController.set$strafeLeft(false);
        break;
      case 68:
        this._cameraController.set$strafeRight(false);
        break;
      case 83:
        this._cameraController.set$backward(false);
        break;
      case 87:
        this._cameraController.set$forward(false);
        break;
    }
  },
  get$_onKeyboardUp: function() {
    return new $.BoundClosure0(this, "_onKeyboardUp$1");
  },
  _onMouseMove$1: function(event$) {
    var t1, t2, t3, t4, t5;
    if (this.get$pointerLocked() === true) {
      t1 = this._cameraController;
      t2 = t1.get$accumDX();
      t3 = event$.get$webkitMovementX();
      t1.set$accumDX($.getInterceptor$JSNumber(t2).operator$add$1(t2, t3));
      t1 = this._cameraController;
      t4 = t1.get$accumDY();
      t5 = event$.get$webkitMovementY();
      t1.set$accumDY($.getInterceptor$JSNumber(t4).operator$add$1(t4, t5));
    }
  },
  get$_onMouseMove: function() {
    return new $.BoundClosure0(this, "_onMouseMove$1");
  },
  _onFullscreenChange$1: function(_) {
    var screen$;
    if (document.get$webkitIsFullScreen() === true) {
      this._lastWidth = this._canvas.get$width();
      this._lastHeight = this._canvas.get$height();
      screen$ = window.get$screen();
      this._width = screen$.get$width();
      this._height = screen$.get$height();
    } else {
      this._width = this._lastWidth;
      this._height = this._lastHeight;
    }
    this._resize$0();
  },
  get$_onFullscreenChange: function() {
    return new $.BoundClosure0(this, "_onFullscreenChange$1");
  }
};

$$.BlendState = {"": "DeviceChild;_enabled,_blendFactorRed,_blendFactorGreen,_blendFactorBlue,_blendFactorAlpha,_alphaBlendOperation,_alphaDestinationBlend,_alphaSourceBlend,_colorBlendOperation,_colorDestinationBlend,_colorSourceBlend,_writeRenderTargetRed,_writeRenderTargetGreen,_writeRenderTargetBlue,_writeRenderTargetAlpha,device,name",
  get$enabled: function() {
    return this._enabled;
  },
  set$enabled: function(value) {
    this._enabled = value;
  },
  get$blendFactorRed: function() {
    return this._blendFactorRed;
  },
  set$blendFactorRed: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._blendFactorRed = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("blendFactorRed must be in the range [0, 1]"));
  },
  get$blendFactorGreen: function() {
    return this._blendFactorGreen;
  },
  set$blendFactorGreen: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._blendFactorGreen = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("blendFactorGreen must be in the range [0, 1]"));
  },
  get$blendFactorBlue: function() {
    return this._blendFactorBlue;
  },
  set$blendFactorBlue: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._blendFactorBlue = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("blendFactorGreen must be in the range [0, 1]"));
  },
  get$blendFactorAlpha: function() {
    return this._blendFactorAlpha;
  },
  set$blendFactorAlpha: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._blendFactorAlpha = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("blendFactorGreen must be in the range [0, 1]"));
  },
  get$alphaBlendOperation: function() {
    return this._alphaBlendOperation;
  },
  set$alphaBlendOperation: function(value) {
    if (!$.BlendOperation_isValid(value))
      throw $.$$throw($.ArgumentError$("alphaBlendOperation must be an enumeration within BlendOperation."));
    this._alphaBlendOperation = value;
  },
  get$alphaDestinationBlend: function() {
    return this._alphaDestinationBlend;
  },
  set$alphaDestinationBlend: function(value) {
    if (!$.Blend_isValid(value))
      throw $.$$throw($.ArgumentError$("alphaDestinationBlend must be an enumeration within Blend."));
    this._alphaDestinationBlend = value;
  },
  get$alphaSourceBlend: function() {
    return this._alphaSourceBlend;
  },
  set$alphaSourceBlend: function(value) {
    if (!$.Blend_isValid(value))
      throw $.$$throw($.ArgumentError$("alphaSourceBlend must be an enumeration within Blend."));
    this._alphaSourceBlend = value;
  },
  get$colorBlendOperation: function() {
    return this._colorBlendOperation;
  },
  set$colorBlendOperation: function(value) {
    if (!$.BlendOperation_isValid(value))
      throw $.$$throw($.ArgumentError$("colorBlendOperation must be an enumeration within BlendOperation."));
    this._colorBlendOperation = value;
  },
  get$colorDestinationBlend: function() {
    return this._colorDestinationBlend;
  },
  set$colorDestinationBlend: function(value) {
    if (!$.Blend_isValid(value))
      throw $.$$throw($.ArgumentError$("colorDestinationBlend must be an enumeration within Blend."));
    this._colorDestinationBlend = value;
  },
  get$colorSourceBlend: function() {
    return this._colorSourceBlend;
  },
  set$colorSourceBlend: function(value) {
    if (!$.Blend_isValid(value))
      throw $.$$throw($.ArgumentError$("colorSourceBlend must be an enumeration within Blend."));
    this._colorSourceBlend = value;
  },
  get$writeRenderTargetRed: function() {
    return this._writeRenderTargetRed;
  },
  set$writeRenderTargetRed: function(value) {
    this._writeRenderTargetRed = value;
  },
  get$writeRenderTargetGreen: function() {
    return this._writeRenderTargetGreen;
  },
  set$writeRenderTargetGreen: function(value) {
    this._writeRenderTargetGreen = value;
  },
  get$writeRenderTargetBlue: function() {
    return this._writeRenderTargetBlue;
  },
  set$writeRenderTargetBlue: function(value) {
    this._writeRenderTargetBlue = value;
  },
  get$writeRenderTargetAlpha: function() {
    return this._writeRenderTargetAlpha;
  },
  set$writeRenderTargetAlpha: function(value) {
    this._writeRenderTargetAlpha = value;
  }
};

$$.SpectreBuffer = {"": "DeviceChild;",
  _createDeviceState$0: function() {
    $.DeviceChild.prototype._createDeviceState$0.call(this);
    this._deviceBuffer = this.device.get$gl().createBuffer$0();
  },
  _destroyDeviceState$0: function() {
    if (!(this._deviceBuffer == null))
      this.device.get$gl().deleteBuffer$1(this._deviceBuffer);
    this._deviceBuffer = null;
    $.DeviceChild.prototype._destroyDeviceState$0.call(this);
  },
  _pushBind$0: function() {
    var t1, oldBind;
    t1 = this.device;
    oldBind = t1.get$gl().getParameter$1(this._bindingParam);
    t1.get$gl().bindBuffer$2(this._bindTarget, this._deviceBuffer);
    return oldBind;
  },
  _bind$0: function() {
    this.device.get$gl().bindBuffer$2(this._bindTarget, this._deviceBuffer);
  },
  _popBind$1: function(oldBind) {
    this.device.get$gl().bindBuffer$2(this._bindTarget, oldBind);
  },
  _uploadData$2: function(data, usage) {
    this._size = data.get$byteLength();
    this._usage = usage;
    this.device.get$gl().bufferData$3(this._bindTarget, data, usage);
  },
  uploadData$2: function(data, usage) {
    var oldBind;
    if (data == null)
      throw $.$$throw($.ArgumentError$("data cannot be null."));
    oldBind = this._pushBind$0();
    this._uploadData$2(data, usage);
    this._popBind$1(oldBind);
  },
  get$size: function() {
    return this._size;
  }
};

$$.Camera = {"": "Object;position=,upDirection,focusPosition=,zNear,zFar,aspectRatio<,FOV",
  toString$0: function() {
    return $.S(this.position) + " -> " + $.S(this.focusPosition);
  },
  get$projectionMatrix: function() {
    return $.makePerspective(this.FOV, this.aspectRatio, this.zNear, this.zFar);
  },
  get$lookAtMatrix: function() {
    return $.makeLookAt(this.position, this.focusPosition, this.upDirection);
  },
  copyProjectionMatrixIntoArray$1: function(pm) {
    $.makePerspective(this.FOV, this.aspectRatio, this.zNear, this.zFar).copyIntoArray$1(pm);
  },
  copyNormalMatrixIntoArray$1: function(nm) {
    $.makeLookAt(this.position, this.focusPosition, this.upDirection).copyIntoArray$1(nm);
  },
  get$frontDirection: function() {
    var t1, t2;
    t1 = this.focusPosition;
    t2 = this.position;
    return $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2).normalize$0();
  },
  Camera$0: function() {
    this.position = $.vec3$raw(0, 0, 0);
    this.focusPosition = $.vec3$raw(0, 0, -1);
    this.upDirection = $.vec3$raw(0, 1, 0);
    this.FOV = 0.785398163;
    this.zNear = 1;
    this.zFar = 1000;
    this.aspectRatio = 1.7777778;
  }
};

$$.CameraController = {"": "Object;"};

$$.DepthState = {"": "DeviceChild;_depthBufferEnabled,_depthBufferWriteEnabled,_depthBufferFunction,device,name",
  get$depthBufferEnabled: function() {
    return this._depthBufferEnabled;
  },
  set$depthBufferEnabled: function(value) {
    this._depthBufferEnabled = value;
  },
  get$depthBufferWriteEnabled: function() {
    return this._depthBufferWriteEnabled;
  },
  set$depthBufferWriteEnabled: function(value) {
    this._depthBufferWriteEnabled = value;
  },
  get$depthBufferFunction: function() {
    return this._depthBufferFunction;
  },
  set$depthBufferFunction: function(value) {
    if (!$.CompareFunction_isValid(value))
      throw $.$$throw($.ArgumentError$("depthBufferFunction must be an enumeration within CompareFunction."));
    this._depthBufferFunction = value;
  }
};

$$.DeviceChild = {"": "Object;device>,name>",
  toString$0: function() {
    return this.name;
  },
  _createDeviceState$0: function() {
  },
  _destroyDeviceState$0: function() {
  }
};

$$.FragmentShader = {"": "SpectreShader;_liblib3$_source,_shader,_liblib3$_type,autoCompile,device,name",
  _createDeviceState$0: function() {
    $.SpectreShader.prototype._createDeviceState$0.call(this);
  },
  _destroyDeviceState$0: function() {
    $.SpectreShader.prototype._destroyDeviceState$0.call(this);
  },
  FragmentShader$2: function(name$, device) {
    this._liblib3$_type = 35632;
  }
};

$$.GraphicsContext = {"": "Object;device>,_primitiveTopology,_indexBufferHandle,_vertexBufferHandles>,_enabledVertexAttributeArrays>,_inputLayoutHandle,_preparedInputLayoutHandle,_shaderProgramHandle,_samplerStateHandles,_textureHandles,_stencilStateHandle,_renderTargetHandle,_blendStateDefault,_depthStateDefault,_rasterizerStateDefault,_liblib3$_viewport,_liblib3$_blendState,_liblib3$_depthState,_liblib3$_rasterizerState",
  _initializeState$0: function() {
    var t1 = this.device;
    this._liblib3$_viewport = $.Viewport$("ViewportDefault", t1);
    t1.get$gl().viewport$4(this._liblib3$_viewport.get$x(), this._liblib3$_viewport.get$y(), this._liblib3$_viewport.get$width(), this._liblib3$_viewport.get$height());
    t1.get$gl().depthRange$2(this._liblib3$_viewport.get$minDepth(), this._liblib3$_viewport.get$maxDepth());
    this._blendStateDefault = $.BlendState$opaque("BlendStateDefault", t1);
    this._liblib3$_blendState = $.BlendState$opaque("CurrentBlendState", t1);
    t1.get$gl().disable$1(3042);
    t1.get$gl().blendFuncSeparate$4(this._liblib3$_blendState.get$colorSourceBlend(), this._liblib3$_blendState.get$colorDestinationBlend(), this._liblib3$_blendState.get$alphaSourceBlend(), this._liblib3$_blendState.get$alphaDestinationBlend());
    t1.get$gl().blendEquationSeparate$2(this._liblib3$_blendState.get$colorBlendOperation(), this._liblib3$_blendState.get$alphaBlendOperation());
    t1.get$gl().colorMask$4(this._liblib3$_blendState.get$writeRenderTargetRed(), this._liblib3$_blendState.get$writeRenderTargetGreen(), this._liblib3$_blendState.get$writeRenderTargetBlue(), this._liblib3$_blendState.get$writeRenderTargetAlpha());
    t1.get$gl().blendColor$4(this._liblib3$_blendState.get$blendFactorRed(), this._liblib3$_blendState.get$blendFactorGreen(), this._liblib3$_blendState.get$blendFactorBlue(), this._liblib3$_blendState.get$blendFactorAlpha());
    this._depthStateDefault = $.DepthState$depthWrite("DepthStateDefault", t1);
    this._liblib3$_depthState = $.DepthState$depthWrite("CurrentDepthState", t1);
    t1.get$gl().enable$1(2929);
    t1.get$gl().depthMask$1(this._liblib3$_depthState.get$depthBufferWriteEnabled());
    t1.get$gl().depthFunc$1(this._liblib3$_depthState.get$depthBufferFunction());
    this._rasterizerStateDefault = $.RasterizerState$cullClockwise("RasterizerStateDefault", t1);
    this._liblib3$_rasterizerState = $.RasterizerState$cullClockwise("CurrentRasterizerState", t1);
    t1.get$gl().enable$1(2884);
    t1.get$gl().cullFace$1(this._liblib3$_rasterizerState.get$cullMode());
    t1.get$gl().frontFace$1(this._liblib3$_rasterizerState.get$frontFace());
    t1.get$gl().disable$1(32823);
    t1.get$gl().polygonOffset$2(this._liblib3$_rasterizerState.get$depthBias(), this._liblib3$_rasterizerState.get$slopeScaleDepthBias());
    t1.get$gl().disable$1(3089);
  },
  _prepareInputs$1$debug: function(debug) {
    var inputLayout, t1, t2, t3;
    if ($.eqB(this._inputLayoutHandle, 0)) {
      $.get$spectreLog().Error$1("Prepare for draw no input layout");
      return;
    }
    inputLayout = this._inputLayoutHandle;
    if (inputLayout == null) {
      $.get$spectreLog().Error$1("Prepare for draw no input layout.");
      return;
    }
    t1 = this._indexBufferHandle;
    if (!(t1 == null))
      t1._bind$0();
    else
      this.device.get$gl().bindBuffer$2(34963, null);
    if ($.eqB(this._preparedInputLayoutHandle, this._inputLayoutHandle))
      return;
    this._preparedInputLayoutHandle = this._inputLayoutHandle;
    for (t1 = this._enabledVertexAttributeArrays, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = this.device; t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      if ($.eqB(t3, 0))
        continue;
      t2.get$gl().disableVertexAttribArray$1(t3);
    }
    t1 = this._enabledVertexAttributeArrays;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = inputLayout.get$elements();
    t2 = new $.GraphicsContext__prepareInputs_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  _prepareInputs$0: function() {
    return this._prepareInputs$1$debug(false);
  },
  _prepareTextures$0: function() {
    var i, t1, sampler, texture;
    for (i = 0; i < 3; ++i) {
      t1 = this._samplerStateHandles;
      sampler = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
      t1 = this._textureHandles;
      texture = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
      if (sampler == null || texture == null)
        continue;
      texture._bind$1(33984 + i);
      texture._applySampler$1(sampler);
    }
  },
  reset$0: function() {
    var t1, t2, t3, i;
    this._primitiveTopology = 0;
    for (t1 = this._enabledVertexAttributeArrays, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = this.device; t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      if ($.eqB(t3, 0))
        continue;
      t2.get$gl().disableVertexAttribArray$1(t3);
    }
    this._preparedInputLayoutHandle = null;
    t1 = this._enabledVertexAttributeArrays;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    this._indexBufferHandle = null;
    for (i = 0; i < 2; ++i) {
      t1 = this._vertexBufferHandles;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
    this._inputLayoutHandle = null;
    this._shaderProgramHandle = null;
    for (i = 0; i < 3; ++i) {
      t1 = this._samplerStateHandles;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
      t1 = this._textureHandles;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
    this._stencilStateHandle = null;
    this._renderTargetHandle = null;
    this.setBlendState$1(this._blendStateDefault);
    this.setDepthState$1(this._depthStateDefault);
    this.setRasterizerState$1(this._rasterizerStateDefault);
  },
  setVertexBuffers$2: function(startSlot, vertexBufferHandles) {
    var limit, i, t1, t2;
    limit = vertexBufferHandles.length + startSlot;
    for (i = startSlot; i < limit; ++i) {
      t1 = this._vertexBufferHandles;
      t2 = i - startSlot;
      if (t2 >= vertexBufferHandles.length)
        throw $.ioore(t2);
      t2 = vertexBufferHandles[t2];
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, t2);
    }
  },
  setInputLayout$1: function(inputLayoutHandle) {
    this._inputLayoutHandle = inputLayoutHandle;
  },
  setIndexedMesh$1: function(indexedMesh) {
    if (indexedMesh == null)
      return;
    this._primitiveTopology = indexedMesh.get$primitiveTopology();
    this._indexBufferHandle = indexedMesh.get$indexArray();
    this.setVertexBuffers$2(0, [indexedMesh.get$vertexArray()]);
  },
  setShaderProgram$1: function(shaderProgramHandle) {
    if ($.eqB(this._shaderProgramHandle, shaderProgramHandle))
      return;
    this._shaderProgramHandle = shaderProgramHandle;
    this.device.get$gl().useProgram$1(shaderProgramHandle.get$_program());
  },
  setViewport$1: function(viewport) {
    var t1;
    if (viewport == null)
      return;
    if (!$.eqB(this._liblib3$_viewport.get$x(), viewport.get$x()) || !$.eqB(this._liblib3$_viewport.get$y(), viewport.get$y()) || !$.eqB(this._liblib3$_viewport.get$width(), viewport.get$width()) || !$.eqB(this._liblib3$_viewport.get$height(), viewport.get$height())) {
      this.device.get$gl().viewport$4(viewport.get$x(), viewport.get$y(), viewport.get$width(), viewport.get$height());
      t1 = viewport.get$x();
      this._liblib3$_viewport.set$x(t1);
      t1 = viewport.get$y();
      this._liblib3$_viewport.set$y(t1);
      t1 = viewport.get$width();
      this._liblib3$_viewport.set$width(t1);
      t1 = viewport.get$height();
      this._liblib3$_viewport.set$height(t1);
    }
    if (!$.eqB(this._liblib3$_viewport.get$minDepth(), viewport.get$minDepth()) || !$.eqB(this._liblib3$_viewport.get$maxDepth(), viewport.get$maxDepth())) {
      this.device.get$gl().depthRange$2(viewport.get$minDepth(), viewport.get$maxDepth());
      t1 = viewport.get$minDepth();
      this._liblib3$_viewport.set$minDepth(t1);
      t1 = viewport.get$maxDepth();
      this._liblib3$_viewport.set$maxDepth(t1);
    }
  },
  setBlendState$1: function(blendState) {
    var t1, t2;
    if (blendState == null) {
      this.setBlendState$1(this._blendStateDefault);
      return;
    }
    if (!$.eqB(this._liblib3$_blendState.get$enabled(), blendState.get$enabled())) {
      t1 = blendState.get$enabled() === true;
      t2 = this.device;
      if (t1)
        t2.get$gl().enable$1(3042);
      else
        t2.get$gl().disable$1(3042);
      t1 = blendState.get$enabled();
      this._liblib3$_blendState.set$enabled(t1);
    }
    if (!$.eqB(this._liblib3$_blendState.get$writeRenderTargetRed(), blendState.get$writeRenderTargetRed()) || !$.eqB(this._liblib3$_blendState.get$writeRenderTargetGreen(), blendState.get$writeRenderTargetGreen()) || !$.eqB(this._liblib3$_blendState.get$writeRenderTargetBlue(), blendState.get$writeRenderTargetBlue()) || !$.eqB(this._liblib3$_blendState.get$writeRenderTargetAlpha(), blendState.get$writeRenderTargetAlpha())) {
      this.device.get$gl().colorMask$4(blendState.get$writeRenderTargetRed(), blendState.get$writeRenderTargetGreen(), blendState.get$writeRenderTargetBlue(), blendState.get$writeRenderTargetAlpha());
      t1 = blendState.get$writeRenderTargetRed();
      this._liblib3$_blendState.set$writeRenderTargetRed(t1);
      t1 = blendState.get$writeRenderTargetGreen();
      this._liblib3$_blendState.set$writeRenderTargetGreen(t1);
      t1 = blendState.get$writeRenderTargetBlue();
      this._liblib3$_blendState.set$writeRenderTargetBlue(t1);
      t1 = blendState.get$writeRenderTargetAlpha();
      this._liblib3$_blendState.set$writeRenderTargetAlpha(t1);
    }
    if (this._liblib3$_blendState.get$enabled() === true) {
      if (!$.eqB(this._liblib3$_blendState.get$colorSourceBlend(), blendState.get$colorSourceBlend()) || !$.eqB(this._liblib3$_blendState.get$colorDestinationBlend(), blendState.get$colorDestinationBlend()) || !$.eqB(this._liblib3$_blendState.get$alphaSourceBlend(), blendState.get$alphaSourceBlend()) || !$.eqB(this._liblib3$_blendState.get$alphaDestinationBlend(), blendState.get$alphaDestinationBlend())) {
        this.device.get$gl().blendFuncSeparate$4(blendState.get$colorSourceBlend(), blendState.get$colorDestinationBlend(), blendState.get$alphaSourceBlend(), blendState.get$alphaDestinationBlend());
        t1 = blendState.get$colorSourceBlend();
        this._liblib3$_blendState.set$colorSourceBlend(t1);
        t1 = blendState.get$colorDestinationBlend();
        this._liblib3$_blendState.set$colorDestinationBlend(t1);
        t1 = blendState.get$alphaSourceBlend();
        this._liblib3$_blendState.set$alphaSourceBlend(t1);
        t1 = blendState.get$alphaDestinationBlend();
        this._liblib3$_blendState.set$alphaDestinationBlend(t1);
      }
      if (!$.eqB(this._liblib3$_blendState.get$colorBlendOperation(), blendState.get$colorBlendOperation()) || !$.eqB(this._liblib3$_blendState.get$alphaBlendOperation(), blendState.get$alphaBlendOperation())) {
        this.device.get$gl().blendEquationSeparate$2(blendState.get$colorBlendOperation(), blendState.get$alphaBlendOperation());
        t1 = blendState.get$colorBlendOperation();
        this._liblib3$_blendState.set$colorBlendOperation(t1);
        t1 = blendState.get$alphaBlendOperation();
        this._liblib3$_blendState.set$alphaBlendOperation(t1);
      }
      if (!$.eqB(this._liblib3$_blendState.get$blendFactorRed(), blendState.get$blendFactorRed()) || !$.eqB(this._liblib3$_blendState.get$blendFactorGreen(), blendState.get$blendFactorGreen()) || !$.eqB(this._liblib3$_blendState.get$blendFactorBlue(), blendState.get$blendFactorBlue()) || !$.eqB(this._liblib3$_blendState.get$blendFactorAlpha(), blendState.get$blendFactorAlpha())) {
        this.device.get$gl().blendColor$4(blendState.get$blendFactorRed(), blendState.get$blendFactorGreen(), blendState.get$blendFactorBlue(), blendState.get$blendFactorAlpha());
        t1 = blendState.get$blendFactorRed();
        this._liblib3$_blendState.set$blendFactorRed(t1);
        t1 = blendState.get$blendFactorGreen();
        this._liblib3$_blendState.set$blendFactorGreen(t1);
        t1 = blendState.get$blendFactorBlue();
        this._liblib3$_blendState.set$blendFactorBlue(t1);
        t1 = blendState.get$blendFactorAlpha();
        this._liblib3$_blendState.set$blendFactorAlpha(t1);
      }
    }
  },
  setDepthState$1: function(depthState) {
    var t1, t2;
    if (depthState == null)
      return;
    if (!$.eqB(this._liblib3$_depthState.get$depthBufferEnabled(), depthState.get$depthBufferEnabled())) {
      t1 = depthState.get$depthBufferEnabled() === true;
      t2 = this.device;
      if (t1)
        t2.get$gl().enable$1(2929);
      else
        t2.get$gl().disable$1(2929);
      t1 = depthState.get$depthBufferEnabled();
      this._liblib3$_depthState.set$depthBufferEnabled(t1);
    }
    if (this._liblib3$_depthState.get$depthBufferEnabled() === true && !$.eqB(this._liblib3$_depthState.get$depthBufferFunction(), depthState.get$depthBufferFunction())) {
      this.device.get$gl().depthFunc$1(depthState.get$depthBufferFunction());
      t1 = depthState.get$depthBufferFunction();
      this._liblib3$_depthState.set$depthBufferFunction(t1);
    }
    if (!$.eqB(this._liblib3$_depthState.get$depthBufferWriteEnabled(), depthState.get$depthBufferWriteEnabled())) {
      this.device.get$gl().depthMask$1(depthState.get$depthBufferWriteEnabled());
      t1 = depthState.get$depthBufferWriteEnabled();
      this._liblib3$_depthState.set$depthBufferWriteEnabled(t1);
    }
  },
  setRasterizerState$1: function(rasterizerState) {
    var t1, offsetEnabled, t3, t2;
    if (rasterizerState == null) {
      this.setRasterizerState$1(this._rasterizerStateDefault);
      return;
    }
    if (!$.eqB(this._liblib3$_rasterizerState.get$cullMode(), rasterizerState.get$cullMode())) {
      t1 = rasterizerState.get$cullMode();
      if (typeof t1 !== "number")
        return this.setRasterizerState$1$bailout(1, rasterizerState, t1);
      if (t1 === 0) {
        this.device.get$gl().disable$1(2884);
        t1 = rasterizerState.get$cullMode();
        this._liblib3$_rasterizerState.set$cullMode(t1);
      } else {
        t1 = this._liblib3$_rasterizerState.get$cullMode();
        if (typeof t1 !== "number")
          return this.setRasterizerState$1$bailout(2, rasterizerState, t1);
        if (t1 === 0)
          this.device.get$gl().enable$1(2884);
      }
    }
    t1 = rasterizerState.get$cullMode();
    if (typeof t1 !== "number")
      return this.setRasterizerState$1$bailout(3, rasterizerState, t1);
    if (!(t1 === 0)) {
      if (!$.eqB(this._liblib3$_rasterizerState.get$cullMode(), rasterizerState.get$cullMode())) {
        this.device.get$gl().cullFace$1(rasterizerState.get$cullMode());
        t1 = rasterizerState.get$cullMode();
        this._liblib3$_rasterizerState.set$cullMode(t1);
      }
      if (!$.eqB(this._liblib3$_rasterizerState.get$frontFace(), rasterizerState.get$frontFace())) {
        this.device.get$gl().frontFace$1(rasterizerState.get$frontFace());
        t1 = rasterizerState.get$frontFace();
        this._liblib3$_rasterizerState.set$frontFace(t1);
      }
    }
    t1 = this._liblib3$_rasterizerState.get$depthBias();
    if (typeof t1 !== "number")
      return this.setRasterizerState$1$bailout(4, rasterizerState, t1);
    if (t1 === 0) {
      t1 = this._liblib3$_rasterizerState.get$slopeScaleDepthBias();
      if (typeof t1 !== "number")
        return this.setRasterizerState$1$bailout(5, rasterizerState, t1);
      offsetEnabled = !(t1 === 0);
    } else
      offsetEnabled = true;
    t1 = rasterizerState.get$depthBias();
    if (typeof t1 !== "number")
      return this.setRasterizerState$1$bailout(6, rasterizerState, offsetEnabled, t1);
    if (t1 === 0) {
      t1 = rasterizerState.get$slopeScaleDepthBias();
      if (typeof t1 !== "number")
        return this.setRasterizerState$1$bailout(7, rasterizerState, offsetEnabled, t1);
      t3 = !(t1 === 0);
      t1 = t3;
    } else
      t1 = true;
    if (t1) {
      if (!offsetEnabled)
        this.device.get$gl().enable$1(32823);
      if (!$.eqB(this._liblib3$_rasterizerState.get$depthBias(), rasterizerState.get$depthBias()) || !$.eqB(this._liblib3$_rasterizerState.get$slopeScaleDepthBias(), rasterizerState.get$slopeScaleDepthBias())) {
        this.device.get$gl().polygonOffset$2(rasterizerState.get$depthBias(), rasterizerState.get$slopeScaleDepthBias());
        t1 = rasterizerState.get$depthBias();
        this._liblib3$_rasterizerState.set$depthBias(t1);
        t1 = rasterizerState.get$slopeScaleDepthBias();
        this._liblib3$_rasterizerState.set$slopeScaleDepthBias(t1);
      }
    } else if (offsetEnabled) {
      this.device.get$gl().disable$1(32823);
      t1 = rasterizerState.get$depthBias();
      this._liblib3$_rasterizerState.set$depthBias(t1);
      t1 = rasterizerState.get$slopeScaleDepthBias();
      this._liblib3$_rasterizerState.set$slopeScaleDepthBias(t1);
    }
    if (!$.eqB(this._liblib3$_rasterizerState.get$scissorTestEnabled(), rasterizerState.get$scissorTestEnabled())) {
      t1 = rasterizerState.get$scissorTestEnabled() === true;
      t2 = this.device;
      if (t1)
        t2.get$gl().enable$1(3089);
      else
        t2.get$gl().disable$1(3089);
      t1 = rasterizerState.get$scissorTestEnabled();
      this._liblib3$_rasterizerState.set$scissorTestEnabled(t1);
    }
  },
  setRasterizerState$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        rasterizerState = env0;
        break;
      case 2:
        t1 = env1;
        rasterizerState = env0;
        break;
      case 3:
        t1 = env1;
        rasterizerState = env0;
        break;
      case 4:
        t1 = env1;
        rasterizerState = env0;
        break;
      case 5:
        t1 = env1;
        rasterizerState = env0;
        break;
      case 6:
        t1 = env2;
        offsetEnabled = env1;
        rasterizerState = env0;
        break;
      case 7:
        t1 = env2;
        offsetEnabled = env1;
        rasterizerState = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (rasterizerState == null) {
          this.setRasterizerState$1(this._rasterizerStateDefault);
          return;
        }
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && !$.eqB(this._liblib3$_rasterizerState.get$cullMode(), rasterizerState.get$cullMode()))
          switch (state0) {
            case 0:
              t1 = rasterizerState.get$cullMode();
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 0 && $.eqB(t1, 0)) {
                this.device.get$gl().disable$1(2884);
                t1 = rasterizerState.get$cullMode();
                this._liblib3$_rasterizerState.set$cullMode(t1);
              } else
                switch (state0) {
                  case 0:
                    t1 = this._liblib3$_rasterizerState.get$cullMode();
                  case 2:
                    state0 = 0;
                    if ($.eqB(t1, 0))
                      this.device.get$gl().enable$1(2884);
                }
          }
        t1 = rasterizerState.get$cullMode();
      case 3:
        state0 = 0;
        if (!$.eqB(t1, 0)) {
          if (!$.eqB(this._liblib3$_rasterizerState.get$cullMode(), rasterizerState.get$cullMode())) {
            this.device.get$gl().cullFace$1(rasterizerState.get$cullMode());
            t1 = rasterizerState.get$cullMode();
            this._liblib3$_rasterizerState.set$cullMode(t1);
          }
          if (!$.eqB(this._liblib3$_rasterizerState.get$frontFace(), rasterizerState.get$frontFace())) {
            this.device.get$gl().frontFace$1(rasterizerState.get$frontFace());
            t1 = rasterizerState.get$frontFace();
            this._liblib3$_rasterizerState.set$frontFace(t1);
          }
        }
        t1 = this._liblib3$_rasterizerState.get$depthBias();
      case 4:
        state0 = 0;
      case 5:
        if (state0 === 5 || state0 === 0 && $.eqB(t1, 0))
          switch (state0) {
            case 0:
              t1 = this._liblib3$_rasterizerState.get$slopeScaleDepthBias();
            case 5:
              state0 = 0;
              offsetEnabled = !$.eqB(t1, 0);
          }
        else
          offsetEnabled = true;
        t1 = rasterizerState.get$depthBias();
      case 6:
        state0 = 0;
      case 7:
        var t1, rasterizerState, offsetEnabled, t3, t2;
        if (state0 === 7 || state0 === 0 && $.eqB(t1, 0))
          switch (state0) {
            case 0:
              t1 = rasterizerState.get$slopeScaleDepthBias();
            case 7:
              state0 = 0;
              t3 = !$.eqB(t1, 0);
              t1 = t3;
          }
        else
          t1 = true;
        if (t1) {
          if (!offsetEnabled)
            this.device.get$gl().enable$1(32823);
          if (!$.eqB(this._liblib3$_rasterizerState.get$depthBias(), rasterizerState.get$depthBias()) || !$.eqB(this._liblib3$_rasterizerState.get$slopeScaleDepthBias(), rasterizerState.get$slopeScaleDepthBias())) {
            this.device.get$gl().polygonOffset$2(rasterizerState.get$depthBias(), rasterizerState.get$slopeScaleDepthBias());
            t1 = rasterizerState.get$depthBias();
            this._liblib3$_rasterizerState.set$depthBias(t1);
            t1 = rasterizerState.get$slopeScaleDepthBias();
            this._liblib3$_rasterizerState.set$slopeScaleDepthBias(t1);
          }
        } else if (offsetEnabled) {
          this.device.get$gl().disable$1(32823);
          t1 = rasterizerState.get$depthBias();
          this._liblib3$_rasterizerState.set$depthBias(t1);
          t1 = rasterizerState.get$slopeScaleDepthBias();
          this._liblib3$_rasterizerState.set$slopeScaleDepthBias(t1);
        }
        if (!$.eqB(this._liblib3$_rasterizerState.get$scissorTestEnabled(), rasterizerState.get$scissorTestEnabled())) {
          t1 = rasterizerState.get$scissorTestEnabled() === true;
          t2 = this.device;
          if (t1)
            t2.get$gl().enable$1(3089);
          else
            t2.get$gl().disable$1(3089);
          t1 = rasterizerState.get$scissorTestEnabled();
          this._liblib3$_rasterizerState.set$scissorTestEnabled(t1);
        }
    }
  },
  _findUniform$1: function(name$) {
    var sp, t1;
    sp = this._shaderProgramHandle;
    if (sp == null)
      return;
    t1 = sp.get$uniforms();
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, name$);
  },
  setConstant$2: function(name$, argument) {
    var uniform = this._findUniform$1(name$);
    if (!(uniform == null))
      uniform._apply$3(this.device, uniform.get$location(), argument);
    else if (this._shaderProgramHandle == null)
      $.get$spectreLog().Error$1("Cannot set " + name$ + ": no ShaderProgram bound.");
  },
  clearColorBuffer$4: function(r, g, b, a) {
    var t1 = this.device;
    t1.get$gl().clearColor$4(r, g, b, a);
    t1.get$gl().clear$1(16384);
  },
  clearDepthBuffer$1: function(depth) {
    var t1 = this.device;
    t1.get$gl().clearDepth$1(depth);
    t1.get$gl().clear$1(256);
  },
  drawIndexed$2: function(numIndices, indexOffset) {
    if ($.eqB(numIndices, 0))
      return;
    this._prepareInputs$0();
    this._prepareTextures$0();
    this.device.get$gl().drawElements$4(this._primitiveTopology, numIndices, 5123, indexOffset);
  },
  drawIndexedMesh$1: function(indexedMesh) {
    if (indexedMesh == null)
      return;
    this.drawIndexed$2(indexedMesh.get$count(), 0);
  },
  GraphicsContext$1: function(device) {
    var t1 = $.List_List$fixedLength(2, null, $.VertexBuffer);
    $.setRuntimeTypeInfo(t1, [$.VertexBuffer]);
    this._vertexBufferHandles = t1;
    t1 = $.List_List$fixedLength(3, null, $.SamplerState);
    $.setRuntimeTypeInfo(t1, [$.SamplerState]);
    this._samplerStateHandles = t1;
    t1 = $.List_List$fixedLength(3, null, $.SpectreTexture);
    $.setRuntimeTypeInfo(t1, [$.SpectreTexture]);
    this._textureHandles = t1;
    t1 = $.List_List(0, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    this._enabledVertexAttributeArrays = t1;
    this._initializeState$0();
    this.reset$0();
  }
};

$$.DeviceFormat = {"": "Object;type>,count>,normalized>",
  toString$0: function() {
    return "(" + $.S(this.type) + ", " + $.S(this.count) + ", " + $.S(this.normalized) + ")";
  }
};

$$.GraphicsDeviceCapabilities = {"": "Object;_vendor,_renderer,_textureUnits,_vertexShaderTextureUnits,_maxTextureSize,_maxCubeMapTextureSize,_maxVertexAttribs,_maxVaryingVectors,_maxVertexShaderUniforms,_maxFragmentShaderUniforms,_floatTextures,_halfFloatTextures,_standardDerivatives,_vertexArrayObjects,_debugRendererInfo,_debugShaders,_unsignedIntIndices,_anisotropicFiltering,_loseContext,_compressedTextureS3TC,_depthTextures,_compressedTextureATC,_compressedTexturePVRTC",
  toString$0: function() {
    var t1, vendorString, rendererString;
    t1 = this._vendor;
    vendorString = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true ? "Unknown" : this._vendor;
    t1 = this._renderer;
    rendererString = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true ? "Unknown" : this._renderer;
    return "Vendor: " + $.S(vendorString) + "\r\nRenderer: " + $.S(rendererString) + "\r\n\r\nDevice stats\r\nTexture Units: " + $.S(this._textureUnits) + "\r\nVertex Texture Units: " + $.S(this._vertexShaderTextureUnits) + "\r\nMax Texture Size: " + $.S(this._maxTextureSize) + "x" + $.S(this._maxTextureSize) + "\r\nMax Cube Map Size: " + $.S(this._maxCubeMapTextureSize) + "x" + $.S(this._maxCubeMapTextureSize) + "\r\nMax Vertex Attributes: " + $.S(this._maxVertexAttribs) + "\r\nMax Varying Vectors: " + $.S(this._maxVaryingVectors) + "\r\nMax Vertex Shader Uniforms: " + $.S(this._maxVertexShaderUniforms) + "\r\nMax Fragment Shader Uniforms: " + $.S(this._maxFragmentShaderUniforms) + "\r\n\r\nExtensions\r\nOES_texture_float: " + $.S(this._floatTextures) + "\r\nOES_texture_half_float: " + $.S(this._halfFloatTextures) + "\r\nOES_standard_derivatives: " + $.S(this._standardDerivatives) + "\r\nOES_vertex_array_object: " + $.S(this._vertexArrayObjects) + "\r\nWEBGL_debug_renderer_info: " + $.S(this._debugRendererInfo) + "\r\nWEBGL_debug_shaders: " + $.S(this._debugShaders) + "\r\nOES_element_index_uint: " + $.S(this._unsignedIntIndices) + "\r\nEXT_texture_filter_anisotropic: " + $.S(this._anisotropicFiltering) + "\r\nWEBGL_lose_context: " + $.S(this._loseContext) + "\r\nWEBGL_compressed_texture_s3tc: " + $.S(this._compressedTextureS3TC) + "\r\nWEBGL_depth_texture: " + $.S(this._depthTextures) + "\r\nWEBGL_compressed_texture_atc: " + $.S(this._compressedTextureATC) + "\r\nWEBGL_compressed_texture_pvrtc: " + $.S(this._compressedTexturePVRTC) + "\r\n        ";
  },
  _queryDeviceInfo$1: function(gl) {
    this._textureUnits = gl.getParameter$1(34930);
    this._vertexShaderTextureUnits = gl.getParameter$1(35660);
    this._maxTextureSize = gl.getParameter$1(3379);
    this._maxCubeMapTextureSize = gl.getParameter$1(34076);
    this._maxVertexAttribs = gl.getParameter$1(34921);
    this._maxVaryingVectors = gl.getParameter$1(36348);
    this._maxVertexShaderUniforms = gl.getParameter$1(36347);
    this._maxFragmentShaderUniforms = gl.getParameter$1(36349);
  },
  _queryExtensionInfo$1: function(gl) {
    this._floatTextures = !(gl.getExtension$1("OES_texture_float") == null);
    this._halfFloatTextures = !(gl.getExtension$1("OES_texture_half_float") == null);
    this._standardDerivatives = !(gl.getExtension$1("OES_standard_derivatives") == null);
    this._vertexArrayObjects = !(gl.getExtension$1("OES_vertex_array_object") == null);
    this._debugRendererInfo = !(gl.getExtension$1("WEBGL_debug_renderer_info") == null);
    this._debugShaders = !(gl.getExtension$1("WEBGL_debug_shaders") == null);
    this._unsignedIntIndices = false;
    this._anisotropicFiltering = !(gl.getExtension$1("EXT_texture_filter_anisotropic") == null);
    this._loseContext = !(gl.getExtension$1("WEBGL_lose_context") == null);
    this._compressedTextureS3TC = !(gl.getExtension$1("WEBGL_compressed_texture_s3tc") == null);
    this._depthTextures = !(gl.getExtension$1("WEBGL_depth_texture") == null);
    this._compressedTextureATC = !(gl.getExtension$1("WEBGL_compressed_texture_atc") == null);
    this._compressedTexturePVRTC = !(gl.getExtension$1("WEBGL_compressed_texture_pvrtc") == null);
  },
  GraphicsDeviceCapabilities$_fromContext$1: function(gl) {
    this._queryDeviceInfo$1(gl);
    this._queryExtensionInfo$1(gl);
    if (this._debugRendererInfo === true) {
      this._vendor = gl.getParameter$1(37445);
      this._renderer = gl.getParameter$1(37446);
    } else {
      this._vendor = "";
      this._renderer = "";
    }
  }
};

$$.GraphicsDevice = {"": "Object;_liblib3$_context,_capabilities,_gl,_children",
  get$context: function() {
    return this._liblib3$_context;
  },
  get$gl: function() {
    return this._gl;
  },
  deleteDeviceChild$1: function(child) {
    var t1;
    child._destroyDeviceState$0();
    t1 = this._children;
    $.getInterceptor$JSArray(t1).remove$1(t1, child);
  },
  createIndexBuffer$1: function(name$) {
    var ib, t1;
    ib = $.IndexBuffer$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, ib);
    ib._createDeviceState$0();
    return ib;
  },
  createVertexBuffer$1: function(name$) {
    var vb, t1;
    vb = $.VertexBuffer$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, vb);
    vb._createDeviceState$0();
    return vb;
  },
  createRenderTarget$1: function(name$) {
    var rt, t1;
    rt = $.RenderTarget$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, rt);
    rt._createDeviceState$0();
    return rt;
  },
  createVertexShader$1: function(name$) {
    var vertexShader, t1;
    vertexShader = $.VertexShader$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, vertexShader);
    vertexShader._createDeviceState$0();
    return vertexShader;
  },
  createFragmentShader$1: function(name$) {
    var fragmentShader, t1;
    fragmentShader = $.FragmentShader$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, fragmentShader);
    fragmentShader._createDeviceState$0();
    return fragmentShader;
  },
  createShaderProgram$1: function(name$) {
    var shaderProgram, t1;
    shaderProgram = $.ShaderProgram$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, shaderProgram);
    shaderProgram._createDeviceState$0();
    return shaderProgram;
  },
  createInputLayout$1: function(name$) {
    var il, t1;
    il = $.InputLayout$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, il);
    il._createDeviceState$0();
    return il;
  },
  createSingleArrayIndexedMesh$1: function(name$) {
    var indexedMesh, t1;
    indexedMesh = $.SingleArrayIndexedMesh$(name$, this);
    t1 = this._children;
    $.getInterceptor$JSArray(t1).add$1(t1, indexedMesh);
    indexedMesh._createDeviceState$0();
    return indexedMesh;
  },
  GraphicsDevice$1: function(gl) {
    this._gl = gl;
    this._liblib3$_context = $.GraphicsContext$(this);
    this._capabilities = $.GraphicsDeviceCapabilities$_fromContext(gl);
    $.RenderTarget__systemRenderTarget = this.createRenderTarget$1("SystemProvidedRenderTarget");
    $.RenderTarget__systemRenderTarget._makeSystemTarget$0();
  }
};

$$.IndexBuffer = {"": "SpectreBuffer;_deviceBuffer,_bindTarget,_bindingParam,_usage,_size,device,name",
  _createDeviceState$0: function() {
    $.SpectreBuffer.prototype._createDeviceState$0.call(this);
  },
  _destroyDeviceState$0: function() {
    $.SpectreBuffer.prototype._destroyDeviceState$0.call(this);
  },
  IndexBuffer$2: function(name$, device) {
    this._bindTarget = 34963;
    this._bindingParam = 34965;
  }
};

$$.InputLayoutElement = {"": "Object;vboSlot>,attributeIndex>,attributeOffset>,attributeStride>,attributeFormat>"};

$$.InputLayout = {"": "DeviceChild;elements>,missingAttributes>,_liblib3$_shaderProgram,_mesh>,device,name",
  set$shaderProgram: function(shaderProgram) {
    this._liblib3$_shaderProgram = shaderProgram;
    this._refresh$0();
  },
  set$mesh: function(mesh) {
    this._mesh = mesh;
    this._refresh$0();
  },
  get$ready: function() {
    return !(this._liblib3$_shaderProgram == null) && !(this._mesh == null) && this.missingAttributes.length === 0;
  },
  _refresh$0: function() {
    var t1, t2;
    $.CONSTANT0.clear$0(this.elements);
    $.CONSTANT0.clear$0(this.missingAttributes);
    t1 = this._liblib3$_shaderProgram;
    if (t1 == null || this._mesh == null)
      return;
    t1 = t1.get$attributes();
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
      $.print("InputLayout " + this.name + " shaderProgram has 0 attributes.");
      return;
    }
    t1 = this._mesh.get$attributes();
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
      $.print("InputLayout " + this.name + " mesh has 0 attributes.");
      return;
    }
    t1 = this._liblib3$_shaderProgram.get$attributes();
    t2 = new $.InputLayout__refresh_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    $.print("InputLayout " + this.name + " refreshed: " + $.S(this.get$ready()));
  }
};

$$.PrintLogger = {"": "Object;",
  Error$1: function(e) {
    $.print("Error: " + e);
  },
  Info$1: function(i) {
    $.print(i);
  }
};

$$.MouseKeyboardCameraController = {"": "CameraController;up,down,strafeLeft<,strafeRight<,forward<,backward<,floatVelocity,strafeVelocity,forwardVelocity,mouseSensitivity,accumDX=,accumDY=",
  UpdateCamera$2: function(seconds, cam) {
    this._MoveFloat$4(seconds, this.up, this.down, cam);
    this._MoveStrafe$4(seconds, this.strafeRight, this.strafeLeft, cam);
    this._MoveForward$4(seconds, this.forward, this.backward, cam);
    this._RotateView$2(seconds, cam);
  },
  _MoveFloat$4: function(dt, positive, negative, cam) {
    var scale, scale0, upDirection, t1;
    scale = positive ? 1 : 0;
    if (negative)
      --scale;
    if (scale === 0)
      return;
    if (typeof dt !== "number")
      throw $.iae(dt);
    scale0 = scale * dt * this.floatVelocity;
    upDirection = $.vec3$raw(0, 1, 0);
    upDirection.scale$1(scale0);
    t1 = cam.get$focusPosition();
    $.getInterceptor$JSArray(t1).add$1(t1, upDirection);
    t1 = cam.get$position();
    $.getInterceptor$JSArray(t1).add$1(t1, upDirection);
  },
  _MoveStrafe$4: function(dt, positive, negative, cam) {
    var scale, scale0, frontDirection, strafeDirection, t1;
    scale = positive === true ? 1 : 0;
    if (negative === true)
      --scale;
    if (scale === 0)
      return;
    if (typeof dt !== "number")
      throw $.iae(dt);
    scale0 = scale * dt * this.strafeVelocity;
    frontDirection = cam.get$frontDirection();
    frontDirection.normalize$0();
    strafeDirection = frontDirection.cross$1($.vec3$raw(0, 1, 0));
    strafeDirection.scale$1(scale0);
    t1 = cam.get$focusPosition();
    $.getInterceptor$JSArray(t1).add$1(t1, strafeDirection);
    t1 = cam.get$position();
    $.getInterceptor$JSArray(t1).add$1(t1, strafeDirection);
  },
  _MoveForward$4: function(dt, positive, negative, cam) {
    var scale, scale0, frontDirection, t1;
    scale = positive === true ? 1 : 0;
    if (negative === true)
      --scale;
    if (scale === 0)
      return;
    if (typeof dt !== "number")
      throw $.iae(dt);
    scale0 = scale * dt * this.forwardVelocity;
    frontDirection = cam.get$frontDirection();
    frontDirection.normalize$0();
    frontDirection.scale$1(scale0);
    t1 = cam.get$focusPosition();
    $.getInterceptor$JSArray(t1).add$1(t1, frontDirection);
    t1 = cam.get$position();
    $.getInterceptor$JSArray(t1).add$1(t1, frontDirection);
  },
  _RotateView$2: function(dt, cam) {
    var frontDirection, upDirection, strafeDirection, t1, t2, mouseYawDelta, mousePitchDelta;
    frontDirection = cam.get$frontDirection();
    frontDirection.normalize$0();
    upDirection = $.vec3$raw(0, 1, 0);
    strafeDirection = frontDirection.cross$1(upDirection);
    strafeDirection.normalize$0();
    t1 = this.accumDX;
    t2 = this.mouseSensitivity;
    mouseYawDelta = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t2);
    t2 = this.accumDY;
    t1 = this.mouseSensitivity;
    mousePitchDelta = $.getInterceptor$JSNumber(t2).operator$div$1(t2, t1);
    this.accumDX = 0;
    this.accumDY = 0;
    $.degrees($.acos(frontDirection.dot$1(upDirection), null), null);
    $.degrees(0.785398163, null);
    $.degrees(2.35619449, null);
    this._RotateEyeAndLook$3(mousePitchDelta, strafeDirection, cam);
    this._RotateEyeAndLook$3(mouseYawDelta, upDirection, cam);
  },
  _RotateEyeAndLook$3: function(delta_angle, axis, cam) {
    var q, frontDirection, t1;
    q = $.quat$(axis, delta_angle, null, null);
    frontDirection = cam.get$frontDirection();
    frontDirection.normalize$0();
    q.rotate$1(frontDirection);
    frontDirection.normalize$0();
    t1 = cam.get$position();
    cam.set$focusPosition($.getInterceptor$JSNumber(t1).operator$add$1(t1, frontDirection));
  },
  MouseKeyboardCameraController$0: function() {
    this.floatVelocity = 5;
    this.strafeVelocity = 5;
    this.forwardVelocity = 5;
    this.up = false;
    this.down = false;
    this.strafeLeft = false;
    this.strafeRight = false;
    this.forward = false;
    this.backward = false;
    this.accumDX = 0;
    this.accumDY = 0;
    this.mouseSensitivity = 360;
  }
};

$$.RasterizerState = {"": "DeviceChild;_cullMode,_frontFace,_depthBias,_slopeScaleDepthBias,_scissorTestEnabled,device,name",
  get$cullMode: function() {
    return this._cullMode;
  },
  set$cullMode: function(value) {
    if (!$.CullMode_isValid(value))
      throw $.$$throw($.ArgumentError$("cullMode must be an enumeration within CullMode."));
    this._cullMode = value;
  },
  get$frontFace: function() {
    return this._frontFace;
  },
  frontFace$1: function(arg0) {
    return this.get$frontFace().call$1(arg0);
  },
  set$frontFace: function(value) {
    if (!$.FrontFace_isValid(value))
      throw $.$$throw($.ArgumentError$("frontFace must be an enumeration within FrontFace."));
    this._frontFace = value;
  },
  get$depthBias: function() {
    return this._depthBias;
  },
  set$depthBias: function(value) {
    this._depthBias = value;
  },
  get$slopeScaleDepthBias: function() {
    return this._slopeScaleDepthBias;
  },
  set$slopeScaleDepthBias: function(value) {
    this._slopeScaleDepthBias = value;
  },
  get$scissorTestEnabled: function() {
    return this._scissorTestEnabled;
  },
  set$scissorTestEnabled: function(value) {
    this._scissorTestEnabled = value;
  }
};

$$.RenderTarget = {"": "DeviceChild;_bindTarget,_bindingParam,_deviceFramebuffer,_colorTarget,_depthTarget,_renderable<,device,name",
  _createDeviceState$0: function() {
    $.DeviceChild.prototype._createDeviceState$0.call(this);
    this._deviceFramebuffer = this.device.get$gl().createFramebuffer$0();
  },
  _makeSystemTarget$0: function() {
    $.RenderTarget__systemRenderTarget._destroyDeviceState$0();
    $.RenderTarget__systemRenderTarget.set$_renderable(true);
  },
  _destroyDeviceState$0: function() {
    if (!(this._deviceFramebuffer == null))
      this.device.get$gl().deleteFramebuffer$1(this._deviceFramebuffer);
    this._deviceFramebuffer = null;
    this._renderable = false;
    $.DeviceChild.prototype._destroyDeviceState$0.call(this);
  },
  _pushBind$0: function() {
    var t1, oldBind;
    t1 = this.device;
    oldBind = t1.get$gl().getParameter$1(this._bindingParam);
    t1.get$gl().bindFramebuffer$2(this._bindTarget, this._deviceFramebuffer);
    return oldBind;
  },
  _popBind$1: function(oldBind) {
    this.device.get$gl().bindFramebuffer$2(this._bindTarget, oldBind);
  },
  _bind$0: function() {
    this.device.get$gl().bindFramebuffer$2(this._bindTarget, this._deviceFramebuffer);
  }
};

$$.ResourceEvents = {"": "Object;updated>,unloaded",
  addUpdate$1: function(cb) {
    var t1 = this.updated;
    $.getInterceptor$JSArray(t1).add$1(t1, cb);
  },
  addUnloaded$1: function(cb) {
    var t1 = this.unloaded;
    $.getInterceptor$JSArray(t1).add$1(t1, cb);
  },
  ResourceEvents$0: function() {
    this.updated = $.Set_Set($.ResourceEventCallback);
    this.unloaded = $.Set_Set($.ResourceEventCallback);
  }
};

$$.ResourceBase = {"": "Object;_isLoaded<,on>",
  get$isLoaded: function() {
    return this._isLoaded;
  },
  get$url: function() {
    return this._url;
  },
  load$1: function(result) {
    this._isLoaded = true;
    this._fireUpdated$0();
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  update$1: function(state) {
    this._isLoaded = true;
    this._fireUpdated$0();
  },
  unload$0: function() {
    this._isLoaded = false;
    this._fireUnloaded$0();
  },
  _fireUpdated$0: function() {
    var t1, t2;
    t1 = this.on.updated;
    t2 = new $.ResourceBase__fireUpdated_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  _fireUnloaded$0: function() {
    var t1, t2;
    t1 = this.on.unloaded;
    t2 = new $.ResourceBase__fireUnloaded_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  ResourceBase$2: function(_url, _rm) {
    this._isLoaded = false;
    this.on = $.ResourceEvents$();
  }
};

$$.MeshResource = {"": "ResourceBase;meshData>,vertexArray>,indexArray>,_isLoaded,_url,on,_rm",
  get$numIndices: function() {
    var t1 = this.meshData;
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "meshes");
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "indices");
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  load$1: function(result) {
    var t1, t2;
    if ($.eqB(result.get$success(), false))
      return;
    this.meshData = $.parse(result.get$data(), null);
    t1 = this.meshData;
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "meshes");
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    this.indexArray = $.Uint16Array_Uint16Array$fromList($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "indices"));
    t2 = this.meshData;
    t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "meshes");
    t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
    this.vertexArray = $.Float32Array_Float32Array$fromList($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "vertices"));
    this._fireUpdated$0();
    result.get$completer().complete$1(result.get$handle());
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this.vertexArray = null;
    this.indexArray = null;
    this.meshData = null;
  }
};

$$.ShaderResource = {"": "ResourceBase;source=,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    if ($.eqB(result.get$success(), false))
      return;
    this.source = result.get$data();
    this._fireUpdated$0();
    result.get$completer().complete$1(result.get$handle());
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  update$1: function(state) {
    var o = $.getInterceptor$JSStringJSArray(state).operator$index$1(state, "source");
    if (!(o == null) && typeof o === "string") {
      this.source = o;
      this._fireUpdated$0();
    }
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this.source = null;
  },
  ShaderResource$2: function(url, rm) {
    this.source = "";
  }
};

$$.ShaderProgramResource = {"": "ResourceBase;vertexShaderSource<,fragmentShaderSource<,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    var t1, futures, t2, spdata, inlineVertexShader, inlineFragmentShader, fetchVertexShader, fetchFragmentShader;
    t1 = {};
    $.ResourceBase.prototype.load$1.call(this, result);
    if ($.eqB(result.get$success(), false))
      return;
    futures = $.List_List(0);
    $.setRuntimeTypeInfo(futures, []);
    t1.fetchedVertex_0 = false;
    t1.fetchedFragment_1 = false;
    t2 = result.get$data();
    if (typeof t2 === "string") {
      spdata = $.parse(result.get$data(), null);
      t2 = $.getInterceptor$JSStringJSArray(spdata);
      inlineVertexShader = t2.operator$index$1(spdata, "inlineVertexShader");
      inlineFragmentShader = t2.operator$index$1(spdata, "inlineFragmentShader");
      fetchVertexShader = t2.operator$index$1(spdata, "fetchVertexShader");
      fetchFragmentShader = t2.operator$index$1(spdata, "fetchFragmentShader");
      if (!(inlineVertexShader == null))
        this.vertexShaderSource = inlineVertexShader;
      if (!(fetchVertexShader == null)) {
        t1.fetchedVertex_0 = true;
        futures.push($._ShaderResourceLoader$().load$1(this._rm._baseURL + $.S(fetchVertexShader)));
      }
      if (!(inlineFragmentShader == null))
        this.fragmentShaderSource = inlineFragmentShader;
      if (!(fetchFragmentShader == null)) {
        t1.fetchedFragment_1 = true;
        futures.push($._ShaderResourceLoader$().load$1(this._rm._baseURL + $.S(fetchFragmentShader)));
      }
    }
    if (futures.length > 0)
      $._FutureImpl__FutureImpl$wait(futures).then$1(new $.ShaderProgramResource_load_anon(t1, this, result));
    else {
      this._fireUpdated$0();
      this._isLoaded = true;
      result.get$completer().complete$1(result.get$handle());
    }
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  update$1: function(state) {
    var t1, o;
    t1 = $.getInterceptor$JSStringJSArray(state);
    o = t1.operator$index$1(state, "vertexShaderSource");
    if (!(o == null) && typeof o === "string")
      this.vertexShaderSource = o;
    o = t1.operator$index$1(state, "fragmentShaderSource");
    if (!(o == null) && typeof o === "string")
      this.fragmentShaderSource = o;
    this._fireUpdated$0();
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this.vertexShaderSource = null;
    this.fragmentShaderSource = null;
  },
  ShaderProgramResource$2: function(url, rm) {
    this.vertexShaderSource = "";
    this.fragmentShaderSource = "";
  }
};

$$.ImageResource = {"": "ResourceBase;_image,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    this._isLoaded = true;
    if ($.eqB(result.get$success(), false))
      return;
    this._image = result.get$data();
    this._fireUpdated$0();
    result.get$completer().complete$1(result.get$handle());
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  update$1: function(state) {
    var o = $.getInterceptor$JSStringJSArray(state).operator$index$1(state, "image");
    if (!(o == null) && typeof o === "object" && o !== null && o.is$ImageElement()) {
      this._image = o;
      this._fireUpdated$0();
    }
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this._image = null;
  }
};

$$.PackResource = {"": "ResourceBase;childResources,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    var t1, futures, pack, t2, handle;
    t1 = this.childResources;
    if (t1.length > 0) {
      this._rm.batchUnload$1(t1);
      $.CONSTANT0.clear$0(this.childResources);
    }
    if (result.get$success() === true) {
      futures = $.List_List(0, [$.Future, $.ResourceBase]);
      $.setRuntimeTypeInfo(futures, [[$.Future, $.ResourceBase]]);
      t1 = result.get$data();
      if (typeof t1 === "string") {
        pack = $.parse(result.get$data(), null);
        if (!(pack == null))
          for (t1 = $.getInterceptor$JSStringJSArray(pack).operator$index$1(pack, "packContents"), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = this._rm; t1.moveNext$0() === true;) {
            handle = t2.registerResource$1(t1.get$current());
            this.childResources.push(handle);
            if (!(handle == null))
              futures.push(t2.loadResource$1(handle));
          }
      }
      this._fireUpdated$0();
      $._FutureImpl__FutureImpl$wait(futures).then$1(new $.PackResource_load_anon(result));
    }
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  unload$0: function() {
    this._rm.batchUnload$1(this.childResources);
  },
  PackResource$2: function(url, rm) {
    var t1 = $.List_List(0, $.ResourceBase);
    $.setRuntimeTypeInfo(t1, [$.ResourceBase]);
    this.childResources = t1;
  }
};

$$.RenderConfigResource = {"": "ResourceBase;renderConfig,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    this.renderConfig = $.parse(result.get$data(), null);
    this._fireUpdated$0();
    result.get$completer().complete$1(result.get$handle());
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this.renderConfig = null;
  },
  RenderConfigResource$2: function(url, rm) {
    this.renderConfig = null;
  }
};

$$.SceneResource = {"": "ResourceBase;sceneDescription,_isLoaded,_url,on,_rm",
  load$1: function(result) {
    this.sceneDescription = $.parse(result.get$data(), null);
    this._fireUpdated$0();
    result.get$completer().complete$1(result.get$handle());
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  unload$0: function() {
    this._fireUnloaded$0();
    this.sceneDescription = null;
  },
  SceneResource$2: function(url, rm) {
    this.sceneDescription = null;
  }
};

$$._ResourceLoaderResult = {"": "Object;success>,data>,handle=,completer=",
  _ResourceLoaderResult$2: function(success, data) {
    this.handle = null;
  }
};

$$._ResourceLoader = {"": "Object;",
  canLoad$2: function(URL, extension) {
    return false;
  },
  createResource$2: function(URL, rm) {
    return;
  }
};

$$._ImageResourceLoader = {"": "_ResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout(1, extension);
    return extension === "jpeg" || extension === "jpg" || extension === "png" || extension === "gif";
  },
  canLoad$2$bailout: function(state0, extension) {
    return $.eqB(extension, "jpeg") || $.eqB(extension, "jpg") || $.eqB(extension, "png") || $.eqB(extension, "gif");
  },
  load$1: function(url) {
    var image, completer, t1, t2;
    image = $.ImageElement_ImageElement(null, null, null);
    completer = $.Completer_Completer();
    t1 = image.get$on().get$load();
    t2 = new $._ImageResourceLoader_load_anon(url, image, completer);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = image.get$on().get$error();
    t1 = new $._ImageResourceLoader_load_anon0(url, image, completer);
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    image.set$src(url);
    return completer.get$future();
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  },
  createResource$2: function(url, rm) {
    return $.ImageResource$(url, rm);
  }
};

$$._HttpResourceLoader = {"": "_ResourceLoader;",
  load$1: function(url) {
    var completer, req, t1, t2;
    completer = $.Completer_Completer();
    req = $.HttpRequest_HttpRequest();
    req.open$3("GET", url, true);
    t1 = req.get$on().get$load();
    t2 = new $._HttpResourceLoader_load_anon(url, completer, req);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = req.get$on().get$error();
    t1 = new $._HttpResourceLoader_load_anon0(url, completer, req);
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    req.send$0();
    return completer.get$future();
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$1");
  }
};

$$._MeshResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout1(1, extension);
    return extension === "mesh";
  },
  canLoad$2$bailout1: function(state0, extension) {
    return $.eq(extension, "mesh");
  },
  createResource$2: function(url, rm) {
    return $.MeshResource$(url, rm);
  }
};

$$._ShaderResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout0(1, extension);
    return extension === "vs" || extension === "fs";
  },
  canLoad$2$bailout0: function(state0, extension) {
    return $.eqB(extension, "vs") || $.eqB(extension, "fs");
  },
  createResource$2: function(url, rm) {
    return $.ShaderResource$(url, rm);
  }
};

$$._ShaderProgramResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout3(1, extension);
    return extension === "sp";
  },
  canLoad$2$bailout3: function(state0, extension) {
    return $.eq(extension, "sp");
  },
  createResource$2: function(url, rm) {
    return $.ShaderProgramResource$(url, rm);
  }
};

$$._PackResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout2(1, extension);
    return extension === "pack";
  },
  canLoad$2$bailout2: function(state0, extension) {
    return $.eq(extension, "pack");
  },
  createResource$2: function(url, rm) {
    return $.PackResource$(url, rm);
  }
};

$$._RenderConfigResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout4(1, extension);
    return extension === "rc";
  },
  canLoad$2$bailout4: function(state0, extension) {
    return $.eq(extension, "rc");
  },
  createResource$2: function(url, rm) {
    return $.RenderConfigResource$(url, rm);
  }
};

$$._SceneResourceLoader = {"": "_HttpResourceLoader;",
  canLoad$2: function(URL, extension) {
    if (typeof extension !== "string")
      return this.canLoad$2$bailout5(1, extension);
    return extension === "scene";
  },
  canLoad$2$bailout5: function(state0, extension) {
    return $.eq(extension, "scene");
  },
  createResource$2: function(url, rm) {
    return $.SceneResource$(url, rm);
  }
};

$$.ResourceLoaders = {"": "Object;_resourceLoaders",
  findResourceLoader$1: function(URL) {
    var extension, t1, t2;
    extension = $.ResourceLoaders_urlExtension(URL);
    for (t1 = $.CONSTANT0.get$iterator(this._resourceLoaders); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (t2.canLoad$2(URL, extension) === true)
        return t2;
    }
    return;
  },
  ResourceLoaders$0: function() {
    var t1 = $.List_List(0);
    $.setRuntimeTypeInfo(t1, []);
    this._resourceLoaders = t1;
    this._resourceLoaders.push($._ImageResourceLoader$());
    this._resourceLoaders.push($._ShaderResourceLoader$());
    this._resourceLoaders.push($._MeshResourceLoader$());
    this._resourceLoaders.push($._PackResourceLoader$());
    this._resourceLoaders.push($._ShaderProgramResourceLoader$());
    this._resourceLoaders.push($._RenderConfigResourceLoader$());
    this._resourceLoaders.push($._SceneResourceLoader$());
  }
};

$$.ResourceManager = {"": "Object;_loaders,_resources,_urlToHandle,_baseURL",
  get$children: function() {
    return this._urlToHandle;
  },
  registerResource$1: function(url) {
    var t1, existingHandle, rl, rb, t2;
    t1 = this._urlToHandle;
    existingHandle = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, url);
    if (!(existingHandle == null)) {
      $.print("RR: " + $.S(url) + " " + $.S(existingHandle));
      return existingHandle;
    }
    rl = this._loaders.findResourceLoader$1(url);
    if (rl == null) {
      $.get$spectreLog().Error$1("Resource Manager cannot load " + $.S(url) + ".");
      return;
    }
    rb = rl.createResource$2(url, this);
    t2 = this._resources;
    $.getInterceptor$JSArray(t2).add$1(t2, rb);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, url, rb);
    return rb;
  },
  loadResource$2: function(rb, force) {
    var rl, completer;
    if (rb == null)
      return;
    rl = this._loaders.findResourceLoader$1(rb.get$url());
    if (rl == null)
      return;
    completer = $.Completer_Completer();
    if (rb.get$isLoaded() === true && $.eqB(force, false))
      completer.complete$1(rb);
    else
      rl.load$1(this._baseURL + $.S(rb.get$url())).then$1(new $.ResourceManager_loadResource_anon(rb, completer));
    return completer.get$future();
  },
  loadResource$1: function(rb) {
    return this.loadResource$2(rb, true);
  },
  batchUnload$1: function(handles) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(handles).get$iterator(handles); t1.moveNext$0() === true;)
      t1.get$current().unload$0();
  },
  addEventCallback$3: function(rb, eventType, callback) {
    if (rb == null)
      return;
    if (eventType === 1)
      rb.get$on().addUpdate$1(callback);
    else if (eventType === 2)
      rb.get$on().addUnloaded$1(callback);
    return;
  }
};

$$.SpectreShader = {"": "DeviceChild;_shader>",
  _createDeviceState$0: function() {
    this._shader = this.device.get$gl().createShader$1(this._liblib3$_type);
  },
  _destroyDeviceState$0: function() {
    this.device.get$gl().deleteShader$1(this._shader);
  },
  set$source: function(s) {
    this._liblib3$_source = s;
    this.device.get$gl().shaderSource$2(this._shader, this._liblib3$_source);
    if (this.autoCompile)
      this.compile$0();
  },
  get$source: function() {
    return this._liblib3$_source;
  },
  compile$0: function() {
    this.device.get$gl().compileShader$1(this._shader);
  }
};

$$.ShaderProgramUniform = {"": "Object;name>,index>,type>,size>,location>,_apply",
  _apply$3: function(arg0, arg1, arg2) {
    return this._apply.call$3(arg0, arg1, arg2);
  }
};

$$.ShaderProgramSampler = {"": "Object;name>,index>,type>,size>,location>,_textureUnit"};

$$.ShaderProgramAttribute = {"": "Object;name>,index>,type>,size>,_liblib3$_location",
  get$location: function() {
    return this._liblib3$_location;
  }
};

$$.ShaderProgram = {"": "DeviceChild;uniforms>,attributes>,samplers,_isLinked,_linkLog,_liblib3$_vertexShader,_liblib3$_fragmentShader,_program>,device,name",
  set$vertexShader: function(vs) {
    var t1 = this._liblib3$_vertexShader;
    if (!(t1 == null))
      this._detach$1(t1);
    this._liblib3$_vertexShader = vs;
    this._attach$1(this._liblib3$_vertexShader);
  },
  set$fragmentShader: function(fs) {
    var t1 = this._liblib3$_fragmentShader;
    if (!(t1 == null))
      this._detach$1(t1);
    this._liblib3$_fragmentShader = fs;
    this._attach$1(this._liblib3$_fragmentShader);
  },
  _createDeviceState$0: function() {
    this._program = this.device.get$gl().createProgram$0();
  },
  _destroyDeviceState$0: function() {
    this.set$fragmentShader(null);
    this.set$vertexShader(null);
    this.device.get$gl().deleteProgram$1(this._program);
  },
  _detach$1: function(shader) {
    if (!(shader == null))
      this.device.get$gl().detachShader$2(this._program, shader.get$_shader());
  },
  _attach$1: function(shader) {
    if (!(shader == null))
      this.device.get$gl().attachShader$2(this._program, shader.get$_shader());
  },
  link$0: function() {
    var t1, t2;
    t1 = this.device;
    t1.get$gl().linkProgram$1(this._program);
    this._linkLog = t1.get$gl().getProgramInfoLog$1(this._program);
    this._isLinked = t1.get$gl().getProgramParameter$2(this._program, 35714);
    t1 = $.eqB(this._linkLog, "");
    t2 = this.name;
    if (t1)
      $.get$spectreLog().Info$1("ShaderProgram.Link(" + t2 + "): OKAY.");
    else
      $.get$spectreLog().Info$1("ShaderProgram.Link(" + t2 + "):\r\n" + $.S(this._linkLog));
    this.refreshUniforms$0();
    this.refreshAttributes$0();
    this.logUniforms$0();
    this.logSamplers$0();
    this.logAttributes$0();
  },
  _isSamplerType$1: function(type) {
    if (typeof type !== "number")
      return this._isSamplerType$1$bailout(1, type);
    return type === 35678 || type === 35680;
  },
  _isSamplerType$1$bailout: function(state0, type) {
    return $.eqB(type, 35678) || $.eqB(type, 35680);
  },
  _convertType$1: function(type) {
    switch (type) {
      case 5126:
        return "float";
      case 35664:
        return "vec2";
      case 35665:
        return "vec3";
      case 35666:
        return "vec4";
      case 35674:
        return "mat2";
      case 35675:
        return "mat3";
      case 35676:
        return "mat4";
      case 35670:
        return "bool";
      case 35671:
        return "bvec2";
      case 35672:
        return "bvec3";
      case 35673:
        return "bvec4";
      case 5124:
        return "int";
      case 35667:
        return "ivec2";
      case 35668:
        return "ivec3";
      case 35669:
        return "ivec4";
      case 35678:
        return "sampler2D";
      case 35680:
        return "samplerCube";
      default:
        throw $.$$throw($.FallThroughError$());
    }
  },
  _findUniformSetForType$1: function(type) {
    switch (type) {
      case 5126:
        return this.get$_setUniform1f();
      case 35664:
        return this.get$_setUniform2f();
      case 35665:
        return this.get$_setUniform3f();
      case 35666:
        return this.get$_setUniform4f();
      case 35674:
        return this.get$_setUniformMatrix2();
      case 35675:
        return this.get$_setUniformMatrix3();
      case 35676:
        return this.get$_setUniformMatrix4();
      case 35670:
        return this.get$_setUniform1i();
      case 35671:
        return this.get$_setUniform2i();
      case 35672:
        return this.get$_setUniform3i();
      case 35673:
        return this.get$_setUniform4i();
      case 5124:
        return this.get$_setUniform1i();
      case 35667:
        return this.get$_setUniform2i();
      case 35668:
        return this.get$_setUniform3i();
      case 35669:
        return this.get$_setUniform4i();
      default:
        throw $.$$throw($.FallThroughError$());
    }
  },
  refreshUniforms$0: function() {
    var t1, numUniforms, t3, t5, oldBind, i, numSamplers, activeUniform, location$, sampler, t2, numSamplers0, uniform;
    t1 = this.device;
    numUniforms = t1.get$gl().getProgramParameter$2(this._program, 35718);
    if (typeof numUniforms !== "number")
      return this.refreshUniforms$0$bailout(1, numUniforms, t1);
    t3 = this.uniforms;
    if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
      return this.refreshUniforms$0$bailout(2, t3, numUniforms, t1);
    $.CONSTANT0.clear$0(t3);
    t5 = this.samplers;
    if (typeof t5 !== "object" || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
      return this.refreshUniforms$0$bailout(3, $.CONSTANT0, t3, t5, numUniforms, t1);
    $.CONSTANT0.clear$0(t5);
    oldBind = t1.get$gl().getParameter$1(35725);
    t1.get$gl().useProgram$1(this._program);
    for (i = 0, numSamplers = 0; i < numUniforms; ++i) {
      activeUniform = t1.get$gl().getActiveUniform$2(this._program, i);
      location$ = t1.get$gl().getUniformLocation$2(this._program, activeUniform.get$name());
      if (this._isSamplerType$1(activeUniform.get$type()) === true) {
        sampler = $.ShaderProgramSampler$(activeUniform.get$name(), i, this._convertType$1(activeUniform.get$type()), activeUniform.get$size(), location$);
        t2 = activeUniform.get$name();
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t5.length)
          throw $.ioore(t2);
        t5[t2] = sampler;
        sampler._textureUnit = numSamplers;
        t2 = t1.get$gl();
        numSamplers0 = numSamplers + 1;
        t2.uniform1i$2(location$, numSamplers);
        numSamplers = numSamplers0;
      } else {
        uniform = $.ShaderProgramUniform$(activeUniform.get$name(), i, this._convertType$1(activeUniform.get$type()), activeUniform.get$size(), location$, this._findUniformSetForType$1(activeUniform.get$type()));
        t2 = activeUniform.get$name();
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t3.length)
          throw $.ioore(t2);
        t3[t2] = uniform;
      }
    }
    t1.get$gl().useProgram$1(oldBind);
  },
  refreshUniforms$0$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env1;
        numUniforms = env0;
        break;
      case 2:
        t1 = env2;
        numUniforms = env1;
        t3 = env0;
        break;
      case 3:
        t1 = env4;
        numUniforms = env3;
        t6 = env2;
        t3 = env1;
        t5 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.device;
        numUniforms = t1.get$gl().getProgramParameter$2(this._program, 35718);
      case 1:
        state0 = 0;
        t3 = this.uniforms;
      case 2:
        state0 = 0;
        t5 = $.getInterceptor$JSArray(t3);
        t5.clear$0(t3);
        t6 = this.samplers;
      case 3:
        var t1, numUniforms, t3, t5, t6, t8, oldBind, i, numSamplers, activeUniform, location$, sampler, t2, numSamplers0, uniform;
        state0 = 0;
        t8 = $.getInterceptor$JSArray(t6);
        t8.clear$0(t6);
        if (numUniforms == null)
          return;
        oldBind = t1.get$gl().getParameter$1(35725);
        t1.get$gl().useProgram$1(this._program);
        for (i = 0, numSamplers = 0; $.ltB(i, numUniforms); ++i) {
          activeUniform = t1.get$gl().getActiveUniform$2(this._program, i);
          location$ = t1.get$gl().getUniformLocation$2(this._program, activeUniform.get$name());
          if (this._isSamplerType$1(activeUniform.get$type()) === true) {
            sampler = $.ShaderProgramSampler$(activeUniform.get$name(), i, this._convertType$1(activeUniform.get$type()), activeUniform.get$size(), location$);
            t8.operator$indexSet$2(t6, activeUniform.get$name(), sampler);
            sampler._textureUnit = numSamplers;
            t2 = t1.get$gl();
            numSamplers0 = numSamplers + 1;
            t2.uniform1i$2(location$, numSamplers);
            numSamplers = numSamplers0;
          } else {
            uniform = $.ShaderProgramUniform$(activeUniform.get$name(), i, this._convertType$1(activeUniform.get$type()), activeUniform.get$size(), location$, this._findUniformSetForType$1(activeUniform.get$type()));
            t5.operator$indexSet$2(t3, activeUniform.get$name(), uniform);
          }
        }
        t1.get$gl().useProgram$1(oldBind);
    }
  },
  refreshAttributes$0: function() {
    var t1, numAttributes, t3, oldBind, i, activeAttribute, location$, attribute, t2;
    t1 = this.device;
    numAttributes = t1.get$gl().getProgramParameter$2(this._program, 35721);
    if (typeof numAttributes !== "number")
      return this.refreshAttributes$0$bailout(1, t1, numAttributes);
    t3 = this.attributes;
    if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
      return this.refreshAttributes$0$bailout(2, t1, t3, numAttributes);
    $.CONSTANT0.clear$0(t3);
    oldBind = t1.get$gl().getParameter$1(35725);
    t1.get$gl().useProgram$1(this._program);
    for (i = 0; i < numAttributes; ++i) {
      activeAttribute = t1.get$gl().getActiveAttrib$2(this._program, i);
      location$ = t1.get$gl().getAttribLocation$2(this._program, activeAttribute.get$name());
      attribute = $.ShaderProgramAttribute$(activeAttribute.get$name(), i, this._convertType$1(activeAttribute.get$type()), activeAttribute.get$size(), location$);
      t2 = activeAttribute.get$name();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3.length)
        throw $.ioore(t2);
      t3[t2] = attribute;
    }
    t1.get$gl().useProgram$1(oldBind);
  },
  refreshAttributes$0$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        numAttributes = env1;
        t1 = env0;
        break;
      case 2:
        numAttributes = env2;
        t3 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.device;
        numAttributes = t1.get$gl().getProgramParameter$2(this._program, 35721);
      case 1:
        state0 = 0;
        t3 = this.attributes;
      case 2:
        var t1, numAttributes, t3, t5, oldBind, i, activeAttribute, location$, attribute;
        state0 = 0;
        t5 = $.getInterceptor$JSArray(t3);
        t5.clear$0(t3);
        if (numAttributes == null)
          return;
        oldBind = t1.get$gl().getParameter$1(35725);
        t1.get$gl().useProgram$1(this._program);
        for (i = 0; $.ltB(i, numAttributes); ++i) {
          activeAttribute = t1.get$gl().getActiveAttrib$2(this._program, i);
          location$ = t1.get$gl().getAttribLocation$2(this._program, activeAttribute.get$name());
          attribute = $.ShaderProgramAttribute$(activeAttribute.get$name(), i, this._convertType$1(activeAttribute.get$type()), activeAttribute.get$size(), location$);
          t5.operator$indexSet$2(t3, activeAttribute.get$name(), attribute);
        }
        t1.get$gl().useProgram$1(oldBind);
    }
  },
  logUniforms$0: function() {
    this.forEachUniform$1(new $.ShaderProgram_logUniforms_anon());
  },
  logSamplers$0: function() {
    this.forEachSampler$1(new $.ShaderProgram_logSamplers_anon());
  },
  logAttributes$0: function() {
    this.forEachAttribute$1(new $.ShaderProgram_logAttributes_anon());
  },
  forEachUniform$1: function(callback) {
    var t1, t2;
    t1 = this.uniforms;
    t2 = new $.ShaderProgram_forEachUniform_anon(callback);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  forEachSampler$1: function(callback) {
    var t1, t2;
    t1 = this.samplers;
    t2 = new $.ShaderProgram_forEachSampler_anon(callback);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  forEachAttribute$1: function(callback) {
    var t1, t2;
    t1 = this.attributes;
    t2 = new $.ShaderProgram_forEachAttribute_anon(callback);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  _findUniform$1: function(name$) {
    var t1, uniform;
    t1 = this.uniforms;
    uniform = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, name$);
    if (uniform == null)
      return;
    return uniform.get$location();
  },
  _setUniform1f$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniform1fv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        device.get$gl().uniform1f$2(index, $.getInterceptor$JSStringJSArray(argument).operator$index$1(argument, 0));
        return;
      } else if (typeof argument === "number") {
        device.get$gl().uniform1f$2(index, argument);
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform1f: function() {
    return new $.BoundClosure4(this, "_setUniform1f$3");
  },
  _setUniform2f$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniform2fv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform2f$3(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform2f: function() {
    return new $.BoundClosure4(this, "_setUniform2f$3");
  },
  _setUniform3f$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniform3fv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform3f$4(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1), t2.operator$index$1(argument, 2));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform3f: function() {
    return new $.BoundClosure4(this, "_setUniform3f$3");
  },
  _setUniform4f$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniform4fv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform4f$5(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1), t2.operator$index$1(argument, 2), t2.operator$index$1(argument, 3));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform4f: function() {
    return new $.BoundClosure4(this, "_setUniform4f$3");
  },
  _setUniform1i$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Int32Array()) {
      device.get$gl().uniform1iv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        device.get$gl().uniform1i$2(index, $.getInterceptor$JSStringJSArray(argument).operator$index$1(argument, 0));
        return;
      } else if (typeof argument === "number") {
        device.get$gl().uniform1i$2(index, argument);
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform1i: function() {
    return new $.BoundClosure4(this, "_setUniform1i$3");
  },
  _setUniform2i$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Int32Array()) {
      device.get$gl().uniform2iv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform2i$3(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform2i: function() {
    return new $.BoundClosure4(this, "_setUniform2i$3");
  },
  _setUniform3i$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Int32Array()) {
      device.get$gl().uniform3iv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform3i$4(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1), t2.operator$index$1(argument, 2));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform3i: function() {
    return new $.BoundClosure4(this, "_setUniform3i$3");
  },
  _setUniform4i$3: function(device, index, argument) {
    var t1, t2;
    if (typeof argument === "object" && argument !== null && argument.is$Int32Array()) {
      device.get$gl().uniform4iv$2(index, argument);
      return;
    } else {
      t1 = $.getRuntimeTypeInfo(argument);
      t2 = $.num;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof argument === "object" && argument !== null && (argument.constructor === Array || argument.is$List()) && t2) {
        t1 = device.get$gl();
        t2 = $.getInterceptor$JSStringJSArray(argument);
        t1.uniform4i$5(index, t2.operator$index$1(argument, 0), t2.operator$index$1(argument, 1), t2.operator$index$1(argument, 2), t2.operator$index$1(argument, 3));
        return;
      }
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniform4i: function() {
    return new $.BoundClosure4(this, "_setUniform4i$3");
  },
  _setUniformMatrix2$3: function(device, index, argument) {
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniformMatrix2fv$3(index, false, argument);
      return;
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniformMatrix2: function() {
    return new $.BoundClosure4(this, "_setUniformMatrix2$3");
  },
  _setUniformMatrix3$3: function(device, index, argument) {
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniformMatrix3fv$3(index, false, argument);
      return;
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniformMatrix3: function() {
    return new $.BoundClosure4(this, "_setUniformMatrix3$3");
  },
  _setUniformMatrix4$3: function(device, index, argument) {
    if (typeof argument === "object" && argument !== null && argument.is$Float32Array()) {
      device.get$gl().uniformMatrix4fv$3(index, false, argument);
      return;
    }
    throw $.$$throw($.FallThroughError$());
  },
  get$_setUniformMatrix4: function() {
    return new $.BoundClosure4(this, "_setUniformMatrix4$3");
  },
  setConstant$2: function(name$, argument) {
    var t1, uniform, oldBind;
    t1 = this.uniforms;
    uniform = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, name$);
    if (uniform == null)
      return;
    t1 = this.device;
    oldBind = t1.get$gl().getParameter$1(35725);
    t1.get$gl().useProgram$1(this._program);
    uniform._apply$3(t1, uniform.get$location(), argument);
    t1.get$gl().useProgram$1(oldBind);
  }
};

$$.VertexBuffer = {"": "SpectreBuffer;_deviceBuffer,_bindTarget,_bindingParam,_usage,_size,device,name",
  _createDeviceState$0: function() {
    $.SpectreBuffer.prototype._createDeviceState$0.call(this);
  },
  _destroyDeviceState$0: function() {
    $.SpectreBuffer.prototype._destroyDeviceState$0.call(this);
  },
  VertexBuffer$2: function(name$, device) {
    this._bindTarget = 34962;
    this._bindingParam = 34964;
  }
};

$$.VertexShader = {"": "SpectreShader;_liblib3$_source,_shader,_liblib3$_type,autoCompile,device,name",
  _createDeviceState$0: function() {
    $.SpectreShader.prototype._createDeviceState$0.call(this);
  },
  _destroyDeviceState$0: function() {
    $.SpectreShader.prototype._destroyDeviceState$0.call(this);
  },
  VertexShader$2: function(name$, device) {
    this._liblib3$_type = 35633;
  }
};

$$.Viewport = {"": "DeviceChild;_x,_y,_liblib3$_width,_liblib3$_height,_minDepth,_maxDepth,device,name",
  get$x: function() {
    return this._x;
  },
  set$x: function(value) {
    this._x = value;
  },
  get$y: function() {
    return this._y;
  },
  set$y: function(value) {
    this._y = value;
  },
  get$width: function() {
    return this._liblib3$_width;
  },
  set$width: function(value) {
    if ($.ltB(value, 0))
      throw $.$$throw($.ArgumentError$("width must be a positive number"));
    this._liblib3$_width = value;
  },
  get$height: function() {
    return this._liblib3$_height;
  },
  set$height: function(value) {
    if ($.ltB(value, 0))
      throw $.$$throw($.ArgumentError$("height must be a positive number"));
    this._liblib3$_height = value;
  },
  get$minDepth: function() {
    return this._minDepth;
  },
  set$minDepth: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._minDepth = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("minDepth must be in the range [0, 1]"));
  },
  get$maxDepth: function() {
    return this._maxDepth;
  },
  set$maxDepth: function(value) {
    if ($.geB(value, 0) && $.leB(value, 1)) {
      this._maxDepth = value;
      return;
    }
    throw $.$$throw($.ArgumentError$("maxDepth must be in the range [0, 1]"));
  }
};

$$.SpectreMeshAttribute = {"": "Object;name>,componentType,componentCount,offset>,stride>,normalized>",
  get$deviceFormat: function() {
    switch (this.componentCount) {
      case 1:
        return $.CONSTANT12;
      case 2:
        return $.CONSTANT13;
      case 3:
        return $.CONSTANT14;
      case 4:
        return $.CONSTANT15;
      default:
        throw $.$$throw($.FallThroughError$());
    }
  },
  toString$0: function() {
    return this.name + " " + $.S(this.componentType) + $.S(this.componentCount) + " " + $.S(this.offset) + " " + $.S(this.stride);
  }
};

$$.SpectreMesh = {"": "DeviceChild;attributes>,count=,primitiveTopology>",
  _createDeviceState$0: function() {
    $.DeviceChild.prototype._createDeviceState$0.call(this);
  },
  _destroyDeviceState$0: function() {
    $.DeviceChild.prototype._destroyDeviceState$0.call(this);
  }
};

$$.SingleArrayIndexedMesh = {"": "SpectreMesh;_deviceVertexBuffer,_deviceIndexBuffer,attributes,count,primitiveTopology,device,name",
  get$indexArray: function() {
    return this._deviceIndexBuffer;
  },
  get$vertexArray: function() {
    return this._deviceVertexBuffer;
  },
  _createDeviceState$0: function() {
    var t1, t2;
    $.SpectreMesh.prototype._createDeviceState$0.call(this);
    t1 = this.device;
    t2 = this.name;
    this._deviceVertexBuffer = t1.createVertexBuffer$1(t2 + "[VB]");
    this._deviceIndexBuffer = t1.createIndexBuffer$1(t2 + "[IB]");
  },
  _destroyDeviceState$0: function() {
    var t1 = this._deviceVertexBuffer;
    if (!(t1 == null)) {
      this.device.deleteDeviceChild$1(t1);
      this._deviceVertexBuffer = null;
    }
    t1 = this._deviceIndexBuffer;
    if (!(t1 == null)) {
      this.device.deleteDeviceChild$1(t1);
      this._deviceIndexBuffer = null;
    }
    this.count = 0;
    $.SpectreMesh.prototype._destroyDeviceState$0.call(this);
  }
};

$$.vec2 = {"": "Object;x=,y=",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    return this;
  },
  makeRaw$2: function(x_, y_) {
    this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
    this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
    return this;
  },
  toString$0: function() {
    return $.S(this.x) + "," + $.S(this.y);
  },
  operator$negate$0: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t2 = this.y;
    return $.vec2$raw(t1, $.getInterceptor$JSNumber(t2).operator$negate$0(t2));
  },
  operator$sub$1: function(other) {
    var t1, t3, t6;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout(1, other, t1);
    t3 = other.get$x();
    if (typeof t3 !== "number")
      return this.operator$sub$1$bailout(2, other, t3, t1);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout(3, t1, other, t3);
    t6 = other.get$y();
    if (typeof t6 !== "number")
      return this.operator$sub$1$bailout(4, t1, t6, t3);
    return $.vec2$raw(t3, t1 - t6);
  },
  operator$sub$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        other = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        other = env0;
        break;
      case 3:
        t3 = env2;
        other = env1;
        t1 = env0;
        break;
      case 4:
        t3 = env2;
        t6 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = other.get$y();
      case 4:
        var t1, other, t3, t6;
        state0 = 0;
        return $.vec2$raw(t3, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t6));
    }
  },
  operator$add$1: function(other) {
    var t1, t3, t6;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout(1, other, t1);
    t3 = other.get$x();
    if (typeof t3 !== "number")
      return this.operator$add$1$bailout(2, other, t3, t1);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout(3, t1, other, t3);
    t6 = other.get$y();
    if (typeof t6 !== "number")
      return this.operator$add$1$bailout(4, t1, t6, t3);
    return $.vec2$raw(t3, t1 + t6);
  },
  operator$add$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        other = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        other = env0;
        break;
      case 3:
        t3 = env2;
        other = env1;
        t1 = env0;
        break;
      case 4:
        t3 = env2;
        t6 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = other.get$y();
      case 4:
        var t1, other, t3, t6;
        state0 = 0;
        return $.vec2$raw(t3, $.getInterceptor$JSNumber(t1).operator$add$1(t1, t6));
    }
  },
  operator$div$1: function(other) {
    var o, t1, t2, t3;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, other);
      t2 = this.y;
      return $.vec2$raw(t1, $.getInterceptor$JSNumber(t2).operator$div$1(t2, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec2) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      return $.vec2$raw(t2, $.getInterceptor$JSNumber(t1).operator$div$1(t1, t3));
    }
  },
  operator$mul$1: function(other) {
    var o, t1, t2, t3;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, other);
      t2 = this.y;
      return $.vec2$raw(t1, $.getInterceptor$JSNumber(t2).operator$mul$1(t2, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec2) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      return $.vec2$raw(t2, $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3));
    }
  },
  operator$index$1: function(i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
    }
    return 0;
  },
  operator$indexSet$2: function(i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
    }
  },
  get$length: function() {
    var t1, sum;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum = 0 + t1;
    t1 = this.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.sqrt(sum + t1);
  },
  normalize$0: function() {
    var l, t1, t2;
    l = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.eqB(l, 0))
      return this;
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$div$1(t1, l);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$div$1(t2, l);
    return this;
  },
  normalized$1: function(out) {
    var l, t1, t2;
    if (out == null)
      out = $.vec2$raw(this.x, this.y);
    l = $.getInterceptor$JSStringJSArray(out).get$length(out);
    if ($.eqB(l, 0))
      return out;
    t1 = out.get$x();
    out.set$x($.getInterceptor$JSNumber(t1).operator$div$1(t1, l));
    t2 = out.get$y();
    out.set$y($.getInterceptor$JSNumber(t2).operator$div$1(t2, l));
    return out;
  },
  get$normalized: function() {
    return new $.BoundClosure5(this, "normalized$1");
  },
  dot$1: function(other) {
    var t1, t2, sum;
    t1 = this.x;
    t2 = other.x;
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    sum = 0 + t2;
    t2 = this.y;
    t1 = other.y;
    t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return sum + t1;
  },
  cross$1: function(other) {
    var t1, t2, t3;
    t1 = this.x;
    t2 = other.get$y();
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    t1 = this.y;
    t3 = other.get$x();
    t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
    return $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t3);
  },
  get$isNaN: function() {
    var t1, is_nan;
    t1 = this.x;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    if (!is_nan) {
      t1 = this.y;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    return is_nan;
  },
  add$1: function(arg) {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.add$1$bailout4(1, arg, t1);
    t3 = arg.get$x();
    if (typeof t3 !== "number")
      return this.add$1$bailout4(2, arg, t3, t1);
    this.x = t1 + t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.add$1$bailout4(3, arg, t5);
    t7 = arg.get$y();
    if (typeof t7 !== "number")
      return this.add$1$bailout4(4, t5, t7);
    this.y = t5 + t7;
    return this;
  },
  add$1$bailout4: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        arg = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        arg = env0;
        break;
      case 3:
        t5 = env1;
        arg = env0;
        break;
      case 4:
        t7 = env1;
        t5 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.get$x();
      case 2:
        state0 = 0;
        this.x = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.get$y();
      case 4:
        var t1, arg, t3, t5, t7;
        state0 = 0;
        this.y = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t7);
        return this;
    }
  },
  multiply$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = arg.get$x();
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    t3 = this.y;
    t4 = arg.get$y();
    this.y = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t4);
    return this;
  },
  scale$1: function(arg) {
    var a, t1, t2;
    a = $.CONSTANT2.toDouble$0(arg);
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, a);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, a);
    return this;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, i;
    t1 = this.x;
    t2 = $.getInterceptor$JSArray(array);
    t2.operator$indexSet$2(array, offset, t1);
    i = $.getInterceptor$JSNumber(offset).operator$add$1(offset, 1);
    t2.operator$indexSet$2(array, i, this.y);
    $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  },
  vec2$raw$2: function(x_, y_) {
    this.makeRaw$2(x_, y_);
  },
  vec2$zero$0: function() {
    this.makeZero$0();
  },
  is$vec2: true
};

$$.vec3 = {"": "Object;x=,y=,z=",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    return this;
  },
  makeRaw$3: function(x_, y_, z_) {
    this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
    this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
    this.z = $.getInterceptor$JSNumber(z_).toDouble$0(z_);
    return this;
  },
  toString$0: function() {
    return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z);
  },
  operator$negate$0: function() {
    var t1, t2, t3;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t2 = this.y;
    t2 = $.getInterceptor$JSNumber(t2).operator$negate$0(t2);
    t3 = this.z;
    return $.vec3$raw(t1, t2, $.getInterceptor$JSNumber(t3).operator$negate$0(t3));
  },
  operator$sub$1: function(other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = other.get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    t1 = this.y;
    t3 = other.get$y();
    t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
    t1 = this.z;
    t4 = other.get$z();
    return $.vec3$raw(t2, t3, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4));
  },
  operator$add$1: function(other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = other.get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    t1 = this.y;
    t3 = other.get$y();
    t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
    t1 = this.z;
    t4 = other.get$z();
    return $.vec3$raw(t2, t3, $.getInterceptor$JSNumber(t1).operator$add$1(t1, t4));
  },
  operator$div$1: function(other) {
    var o, t1, t2, t3, t4;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, other);
      t2 = this.y;
      t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, o);
      t3 = this.z;
      return $.vec3$raw(t1, t2, $.getInterceptor$JSNumber(t3).operator$div$1(t3, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec3) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t3);
      t1 = this.z;
      t4 = other.z;
      return $.vec3$raw(t2, t3, $.getInterceptor$JSNumber(t1).operator$div$1(t1, t4));
    }
  },
  operator$mul$1: function(other) {
    var o, t1, t2, t3, t4;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, other);
      t2 = this.y;
      t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, o);
      t3 = this.z;
      return $.vec3$raw(t1, t2, $.getInterceptor$JSNumber(t3).operator$mul$1(t3, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec3) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t1 = this.z;
      t4 = other.z;
      return $.vec3$raw(t2, t3, $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t4));
    }
  },
  operator$index$1: function(i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
    }
    return 0;
  },
  operator$indexSet$2: function(i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
      case 2:
        this.z = v;
        break;
    }
  },
  get$length: function() {
    var t1, sum;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum = 0 + t1;
    t1 = this.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum += t1;
    t1 = this.z;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.sqrt(sum + t1);
  },
  normalize$0: function() {
    var l, t1, t2, t3;
    l = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.eqB(l, 0))
      return this;
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$div$1(t1, l);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$div$1(t2, l);
    t3 = this.z;
    this.z = $.getInterceptor$JSNumber(t3).operator$div$1(t3, l);
    return this;
  },
  normalized$1: function(out) {
    var l, t1, t2, t3;
    if (out == null)
      out = $.vec3$raw(this.x, this.y, this.z);
    l = $.getInterceptor$JSStringJSArray(out).get$length(out);
    if ($.eqB(l, 0))
      return out;
    t1 = out.get$x();
    out.set$x($.getInterceptor$JSNumber(t1).operator$div$1(t1, l));
    t2 = out.get$y();
    out.set$y($.getInterceptor$JSNumber(t2).operator$div$1(t2, l));
    t3 = out.get$z();
    out.set$z($.getInterceptor$JSNumber(t3).operator$div$1(t3, l));
    return out;
  },
  get$normalized: function() {
    return new $.BoundClosure6(this, "normalized$1");
  },
  dot$1: function(other) {
    var t1, t2, sum;
    t1 = this.x;
    t2 = other.x;
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    sum = 0 + t2;
    t2 = this.y;
    t1 = other.y;
    t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum += t1;
    t1 = this.z;
    t2 = other.z;
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return sum + t2;
  },
  cross$2: function(other, out) {
    var t1, t2, t3, t4, t5, t6, t7;
    if (out == null)
      out = $.vec3$zero();
    t1 = this.y;
    t2 = other.get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    t1 = this.z;
    t3 = other.get$y();
    t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
    out.set$x($.getInterceptor$JSNumber(t2).operator$sub$1(t2, t3));
    t1 = this.z;
    t4 = other.get$x();
    t4 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t4);
    t1 = this.x;
    t5 = other.get$z();
    t5 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t5);
    out.set$y($.getInterceptor$JSNumber(t4).operator$sub$1(t4, t5));
    t1 = this.x;
    t6 = other.get$y();
    t6 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t6);
    t1 = this.y;
    t7 = other.get$x();
    t7 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t7);
    out.set$z($.getInterceptor$JSNumber(t6).operator$sub$1(t6, t7));
    return out;
  },
  cross$1: function(other) {
    return this.cross$2(other, null);
  },
  set$xyz: function(arg) {
    this.x = arg.get$x();
    this.y = arg.get$y();
    this.z = arg.get$z();
  },
  get$isNaN: function() {
    var t1, is_nan;
    t1 = this.x;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    if (!is_nan) {
      t1 = this.y;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    if (!is_nan) {
      t1 = this.z;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    return is_nan;
  },
  add$1: function(arg) {
    var t1, t3, t5, t7, t9, t11;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.add$1$bailout2(1, arg, t1);
    t3 = arg.get$x();
    if (typeof t3 !== "number")
      return this.add$1$bailout2(2, arg, t1, t3);
    this.x = t1 + t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.add$1$bailout2(3, arg, t5);
    t7 = arg.get$y();
    if (typeof t7 !== "number")
      return this.add$1$bailout2(4, arg, t7, t5);
    this.y = t5 + t7;
    t9 = this.z;
    if (typeof t9 !== "number")
      return this.add$1$bailout2(5, t9, arg);
    t11 = arg.get$z();
    if (typeof t11 !== "number")
      return this.add$1$bailout2(6, t9, t11);
    this.z = t9 + t11;
    return this;
  },
  add$1$bailout2: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        arg = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        arg = env0;
        break;
      case 3:
        t5 = env1;
        arg = env0;
        break;
      case 4:
        t5 = env2;
        t7 = env1;
        arg = env0;
        break;
      case 5:
        arg = env1;
        t9 = env0;
        break;
      case 6:
        t11 = env1;
        t9 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.get$x();
      case 2:
        state0 = 0;
        this.x = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.get$y();
      case 4:
        state0 = 0;
        this.y = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = arg.get$z();
      case 6:
        var t1, arg, t3, t5, t7, t9, t11;
        state0 = 0;
        this.z = $.getInterceptor$JSNumber(t9).operator$add$1(t9, t11);
        return this;
    }
  },
  multiply$1: function(arg) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.x;
    t2 = arg.get$x();
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    t3 = this.y;
    t4 = arg.get$y();
    this.y = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t4);
    t5 = this.z;
    t6 = arg.get$z();
    this.z = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t6);
    return this;
  },
  scale$1: function(arg) {
    var a, t1, t2, t3;
    a = $.CONSTANT2.toDouble$0(arg);
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, a);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, a);
    t3 = this.z;
    this.z = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, a);
    return this;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, i;
    t1 = this.x;
    t2 = $.getInterceptor$JSArray(array);
    t2.operator$indexSet$2(array, offset, t1);
    i = $.getInterceptor$JSNumber(offset).operator$add$1(offset, 1);
    t2.operator$indexSet$2(array, i, this.y);
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.z);
    $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  },
  vec3$raw$3: function(x_, y_, z_) {
    this.makeRaw$3(x_, y_, z_);
  },
  vec3$zero$0: function() {
    this.makeZero$0();
  },
  is$vec3: true
};

$$.vec4 = {"": "Object;x=,y=,z=,w=",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;
    return this;
  },
  makeRaw$4: function(x_, y_, z_, w_) {
    this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
    this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
    this.z = $.getInterceptor$JSNumber(z_).toDouble$0(z_);
    this.w = $.getInterceptor$JSNumber(w_).toDouble$0(w_);
    return this;
  },
  toString$0: function() {
    return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z) + "," + $.S(this.w);
  },
  operator$negate$0: function() {
    var t1, t2, t3, t4;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t2 = this.y;
    t2 = $.getInterceptor$JSNumber(t2).operator$negate$0(t2);
    t3 = this.z;
    t3 = $.getInterceptor$JSNumber(t3).operator$negate$0(t3);
    t4 = this.w;
    return $.vec4$raw(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$negate$0(t4));
  },
  operator$sub$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.x;
    t2 = other.get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    t1 = this.y;
    t3 = other.get$y();
    t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
    t1 = this.z;
    t4 = other.get$z();
    t4 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4);
    t1 = this.w;
    t5 = other.get$w();
    return $.vec4$raw(t2, t3, t4, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t5));
  },
  operator$add$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.x;
    t2 = other.get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    t1 = this.y;
    t3 = other.get$y();
    t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
    t1 = this.z;
    t4 = other.get$z();
    t4 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t4);
    t1 = this.w;
    t5 = other.get$w();
    return $.vec4$raw(t2, t3, t4, $.getInterceptor$JSNumber(t1).operator$add$1(t1, t5));
  },
  operator$div$1: function(other) {
    var o, t1, t2, t3, t4, t5;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, other);
      t2 = this.y;
      t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, o);
      t3 = this.z;
      t3 = $.getInterceptor$JSNumber(t3).operator$div$1(t3, o);
      t4 = this.w;
      return $.vec4$raw(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$div$1(t4, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec4) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t3);
      t1 = this.z;
      t4 = other.z;
      t4 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, t4);
      t1 = this.w;
      t5 = other.w;
      return $.vec4$raw(t2, t3, t4, $.getInterceptor$JSNumber(t1).operator$div$1(t1, t5));
    }
  },
  operator$mul$1: function(other) {
    var o, t1, t2, t3, t4, t5;
    if (typeof other === "number") {
      o = $.CONSTANT2.toDouble$0(other);
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, other);
      t2 = this.y;
      t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, o);
      t3 = this.z;
      t3 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, o);
      t4 = this.w;
      return $.vec4$raw(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$mul$1(t4, o));
    }
    if (typeof other === "object" && other !== null && !!other.is$vec4) {
      t1 = this.x;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.y;
      t3 = other.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t1 = this.z;
      t4 = other.z;
      t4 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t4);
      t1 = this.w;
      t5 = other.w;
      return $.vec4$raw(t2, t3, t4, $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t5));
    }
  },
  operator$index$1: function(i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
    }
    return 0;
  },
  operator$indexSet$2: function(i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
      case 2:
        this.z = v;
        break;
      case 3:
        this.w = v;
        break;
    }
  },
  get$length: function() {
    var t1, sum;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum = 0 + t1;
    t1 = this.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum += t1;
    t1 = this.z;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum += t1;
    t1 = this.w;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.sqrt(sum + t1);
  },
  normalize$0: function() {
    var l, t1, t2, t3, t4;
    l = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.eqB(l, 0))
      return this;
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$div$1(t1, l);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$div$1(t2, l);
    t3 = this.z;
    this.z = $.getInterceptor$JSNumber(t3).operator$div$1(t3, l);
    t4 = this.w;
    this.w = $.getInterceptor$JSNumber(t4).operator$div$1(t4, l);
    return this;
  },
  normalized$1: function(out) {
    var l, t1, t2, t3, t4;
    if (out == null)
      out = $.vec4$raw(this.x, this.y, this.z, this.w);
    l = $.getInterceptor$JSStringJSArray(out).get$length(out);
    if ($.eqB(l, 0))
      return out;
    t1 = out.get$x();
    out.set$x($.getInterceptor$JSNumber(t1).operator$div$1(t1, l));
    t2 = out.get$y();
    out.set$y($.getInterceptor$JSNumber(t2).operator$div$1(t2, l));
    t3 = out.get$z();
    out.set$z($.getInterceptor$JSNumber(t3).operator$div$1(t3, l));
    t4 = out.get$w();
    out.set$w($.getInterceptor$JSNumber(t4).operator$div$1(t4, l));
    return out;
  },
  get$normalized: function() {
    return new $.BoundClosure7(this, "normalized$1");
  },
  dot$1: function(other) {
    var t1, t2, sum;
    t1 = this.x;
    t2 = other.x;
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    sum = 0 + t2;
    t2 = this.y;
    t1 = other.y;
    t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    sum += t1;
    t1 = this.z;
    t2 = other.z;
    t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    sum += t2;
    t2 = this.w;
    t1 = other.get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return sum + t1;
  },
  set$xyz: function(arg) {
    this.x = arg.get$x();
    this.y = arg.get$y();
    this.z = arg.get$z();
  },
  get$isNaN: function() {
    var t1, is_nan;
    t1 = this.x;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    if (!is_nan) {
      t1 = this.y;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    if (!is_nan) {
      t1 = this.z;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    if (!is_nan) {
      t1 = this.w;
      is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
    } else
      is_nan = true;
    return is_nan;
  },
  add$1: function(arg) {
    var t1, t3, t5, t7, t9, t11, t13, t15;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.add$1$bailout1(1, arg, t1);
    t3 = arg.get$x();
    if (typeof t3 !== "number")
      return this.add$1$bailout1(2, arg, t1, t3);
    this.x = t1 + t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.add$1$bailout1(3, arg, t5);
    t7 = arg.get$y();
    if (typeof t7 !== "number")
      return this.add$1$bailout1(4, arg, t7, t5);
    this.y = t5 + t7;
    t9 = this.z;
    if (typeof t9 !== "number")
      return this.add$1$bailout1(5, arg, t9);
    t11 = arg.get$z();
    if (typeof t11 !== "number")
      return this.add$1$bailout1(6, arg, t9, t11);
    this.z = t9 + t11;
    t13 = this.w;
    if (typeof t13 !== "number")
      return this.add$1$bailout1(7, arg, t13);
    t15 = arg.get$w();
    if (typeof t15 !== "number")
      return this.add$1$bailout1(8, t15, t13);
    this.w = t13 + t15;
    return this;
  },
  add$1$bailout1: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        arg = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        arg = env0;
        break;
      case 3:
        t5 = env1;
        arg = env0;
        break;
      case 4:
        t5 = env2;
        t7 = env1;
        arg = env0;
        break;
      case 5:
        t9 = env1;
        arg = env0;
        break;
      case 6:
        t11 = env2;
        t9 = env1;
        arg = env0;
        break;
      case 7:
        t13 = env1;
        arg = env0;
        break;
      case 8:
        t13 = env1;
        t15 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.get$x();
      case 2:
        state0 = 0;
        this.x = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.get$y();
      case 4:
        state0 = 0;
        this.y = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = arg.get$z();
      case 6:
        state0 = 0;
        this.z = $.getInterceptor$JSNumber(t9).operator$add$1(t9, t11);
        t13 = this.w;
      case 7:
        state0 = 0;
        t15 = arg.get$w();
      case 8:
        var t1, arg, t3, t5, t7, t9, t11, t13, t15;
        state0 = 0;
        this.w = $.getInterceptor$JSNumber(t13).operator$add$1(t13, t15);
        return this;
    }
  },
  multiply$1: function(arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.x;
    t2 = arg.get$x();
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
    t3 = this.y;
    t4 = arg.get$y();
    this.y = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t4);
    t5 = this.z;
    t6 = arg.get$z();
    this.z = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t6);
    t7 = this.w;
    t8 = arg.get$w();
    this.w = $.getInterceptor$JSNumber(t7).operator$mul$1(t7, t8);
    return this;
  },
  scale$1: function(arg) {
    var a, t1, t2, t3, t4;
    a = $.CONSTANT2.toDouble$0(arg);
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, a);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, a);
    t3 = this.z;
    this.z = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, a);
    t4 = this.w;
    this.w = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, a);
    return this;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, i;
    t1 = this.x;
    t2 = $.getInterceptor$JSArray(array);
    t2.operator$indexSet$2(array, offset, t1);
    i = $.getInterceptor$JSNumber(offset).operator$add$1(offset, 1);
    t2.operator$indexSet$2(array, i, this.y);
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.z);
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.w);
    $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  },
  vec4$raw$4: function(x_, y_, z_, w_) {
    this.makeRaw$4(x_, y_, z_, w_);
  },
  vec4$zero$0: function() {
    this.makeZero$0();
  },
  is$vec4: true
};

$$.mat4 = {"": "Object;col0>,col1>,col2>,col3>",
  toString$0: function() {
    return "[0] " + $.S(this.getRow$1(0)) + "\n" + "[1] " + $.S(this.getRow$1(1)) + "\n" + "[2] " + $.S(this.getRow$1(2)) + "\n" + "[3] " + $.S(this.getRow$1(3)) + "\n";
  },
  get$rows: function() {
    return 4;
  },
  get$cols: function() {
    return 4;
  },
  get$length: function() {
    return 4;
  },
  operator$index$1: function(column) {
    switch (column) {
      case 0:
        return this.col0;
      case 1:
        return this.col1;
      case 2:
        return this.col2;
      case 3:
        return this.col3;
    }
    throw $.$$throw($.ArgumentError$(column));
  },
  operator$indexSet$2: function(column, arg) {
    switch (column) {
      case 0:
        this.col0 = arg;
        break;
      case 1:
        this.col1 = arg;
        break;
      case 2:
        this.col2 = arg;
        break;
      case 3:
        this.col3 = arg;
        break;
    }
    throw $.$$throw($.ArgumentError$(column));
  },
  getRow$1: function(row) {
    var r, t1, t2, t3, t4;
    r = $.vec4$zero();
    t1 = this.col0;
    r.x = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, row);
    t2 = this.col1;
    r.y = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, row);
    t3 = this.col2;
    r.z = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, row);
    t4 = this.col3;
    r.w = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, row);
    return r;
  },
  operator$mul$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9;
    if (typeof arg === "number") {
      r = $.mat4$zero();
      t1 = this.col0.get$x();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col0.set$x(t1);
      t1 = this.col0.get$y();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col0.set$y(t1);
      t1 = this.col0.get$z();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col0.set$z(t1);
      t1 = this.col0.get$w();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col0.set$w(t1);
      t1 = this.col1.get$x();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col1.set$x(t1);
      t1 = this.col1.get$y();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col1.set$y(t1);
      t1 = this.col1.get$z();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col1.set$z(t1);
      t1 = this.col1.get$w();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col1.set$w(t1);
      t1 = this.col2.get$x();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col2.set$x(t1);
      t1 = this.col2.get$y();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col2.set$y(t1);
      t1 = this.col2.get$z();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col2.set$z(t1);
      t1 = this.col2.get$w();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col2.set$w(t1);
      t1 = this.col3.get$x();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col3.set$x(t1);
      t1 = this.col3.get$y();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col3.set$y(t1);
      t1 = this.col3.get$z();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col3.set$z(t1);
      t1 = this.col3.get$w();
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, arg);
      r.col3.set$w(t1);
      return r;
    }
    if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
      r = $.vec4$zero();
      t1 = this.col0.get$x();
      t2 = arg.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.col1.get$x();
      t3 = arg.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
      t2 = this.col2.get$x();
      t1 = arg.z;
      t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
      t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
      t3 = this.col3.get$x();
      t2 = arg.w;
      t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
      r.x = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
      t3 = this.col0.get$y();
      t4 = arg.x;
      t4 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t4);
      t3 = this.col1.get$y();
      t5 = arg.y;
      t5 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t5);
      t5 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t5);
      t4 = this.col2.get$y();
      t3 = arg.z;
      t3 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t3);
      t3 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t3);
      t5 = this.col3.get$y();
      t4 = arg.w;
      t4 = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t4);
      r.y = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t4);
      t5 = this.col0.get$z();
      t6 = arg.x;
      t6 = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t6);
      t5 = this.col1.get$z();
      t7 = arg.y;
      t7 = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t7);
      t7 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t7);
      t6 = this.col2.get$z();
      t5 = arg.z;
      t5 = $.getInterceptor$JSNumber(t6).operator$mul$1(t6, t5);
      t5 = $.getInterceptor$JSNumber(t7).operator$add$1(t7, t5);
      t7 = this.col3.get$z();
      t6 = arg.w;
      t6 = $.getInterceptor$JSNumber(t7).operator$mul$1(t7, t6);
      r.z = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
      t7 = this.col0.get$w();
      t8 = arg.x;
      t8 = $.getInterceptor$JSNumber(t7).operator$mul$1(t7, t8);
      t7 = this.col1.get$w();
      t9 = arg.y;
      t9 = $.getInterceptor$JSNumber(t7).operator$mul$1(t7, t9);
      t9 = $.getInterceptor$JSNumber(t8).operator$add$1(t8, t9);
      t8 = this.col2.get$w();
      t7 = arg.z;
      t7 = $.getInterceptor$JSNumber(t8).operator$mul$1(t8, t7);
      t7 = $.getInterceptor$JSNumber(t9).operator$add$1(t9, t7);
      t9 = this.col3.get$w();
      t8 = arg.w;
      t8 = $.getInterceptor$JSNumber(t9).operator$mul$1(t9, t8);
      r.w = $.getInterceptor$JSNumber(t7).operator$add$1(t7, t8);
      return r;
    }
    if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
      r = $.vec3$zero();
      t1 = this.col0.get$x();
      t2 = arg.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.col1.get$x();
      t3 = arg.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
      t2 = this.col2.get$x();
      t1 = arg.z;
      t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
      t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
      t3 = this.col3.get$x();
      r.x = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
      t2 = this.col0.get$y();
      t4 = arg.x;
      t4 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t4);
      t2 = this.col1.get$y();
      t5 = arg.y;
      t5 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t5);
      t5 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t5);
      t4 = this.col2.get$y();
      t2 = arg.z;
      t2 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t2);
      t2 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t2);
      t5 = this.col3.get$y();
      r.y = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t5);
      t4 = this.col0.get$z();
      t6 = arg.x;
      t6 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t6);
      t4 = this.col1.get$z();
      t7 = arg.y;
      t7 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t7);
      t7 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t7);
      t6 = this.col2.get$z();
      t4 = arg.z;
      t4 = $.getInterceptor$JSNumber(t6).operator$mul$1(t6, t4);
      t4 = $.getInterceptor$JSNumber(t7).operator$add$1(t7, t4);
      t7 = this.col3.get$z();
      r.z = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t7);
      return r;
    }
    if (4 === arg.get$rows()) {
      if ($.eqB(arg.get$cols(), 4)) {
        r = $.mat4$zero();
        t1 = this.col0.get$x();
        t2 = arg.get$col0().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$x();
        t3 = arg.get$col0().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$x();
        t1 = arg.get$col0().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$x();
        t2 = arg.get$col0().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col0.set$x(t2);
        t2 = this.col0.get$x();
        t1 = arg.get$col1().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$x();
        t3 = arg.get$col1().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$x();
        t2 = arg.get$col1().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$x();
        t1 = arg.get$col1().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col1.set$x(t1);
        t1 = this.col0.get$x();
        t2 = arg.get$col2().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$x();
        t3 = arg.get$col2().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$x();
        t1 = arg.get$col2().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$x();
        t2 = arg.get$col2().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col2.set$x(t2);
        t2 = this.col0.get$x();
        t1 = arg.get$col3().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$x();
        t3 = arg.get$col3().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$x();
        t2 = arg.get$col3().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$x();
        t1 = arg.get$col3().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col3.set$x(t1);
        t1 = this.col0.get$y();
        t2 = arg.get$col0().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$y();
        t3 = arg.get$col0().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$y();
        t1 = arg.get$col0().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$y();
        t2 = arg.get$col0().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col0.set$y(t2);
        t2 = this.col0.get$y();
        t1 = arg.get$col1().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$y();
        t3 = arg.get$col1().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$y();
        t2 = arg.get$col1().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$y();
        t1 = arg.get$col1().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col1.set$y(t1);
        t1 = this.col0.get$y();
        t2 = arg.get$col2().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$y();
        t3 = arg.get$col2().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$y();
        t1 = arg.get$col2().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$y();
        t2 = arg.get$col2().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col2.set$y(t2);
        t2 = this.col0.get$y();
        t1 = arg.get$col3().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$y();
        t3 = arg.get$col3().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$y();
        t2 = arg.get$col3().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$y();
        t1 = arg.get$col3().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col3.set$y(t1);
        t1 = this.col0.get$z();
        t2 = arg.get$col0().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$z();
        t3 = arg.get$col0().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$z();
        t1 = arg.get$col0().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$z();
        t2 = arg.get$col0().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col0.set$z(t2);
        t2 = this.col0.get$z();
        t1 = arg.get$col1().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$z();
        t3 = arg.get$col1().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$z();
        t2 = arg.get$col1().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$z();
        t1 = arg.get$col1().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col1.set$z(t1);
        t1 = this.col0.get$z();
        t2 = arg.get$col2().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$z();
        t3 = arg.get$col2().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$z();
        t1 = arg.get$col2().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$z();
        t2 = arg.get$col2().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col2.set$z(t2);
        t2 = this.col0.get$z();
        t1 = arg.get$col3().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$z();
        t3 = arg.get$col3().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$z();
        t2 = arg.get$col3().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$z();
        t1 = arg.get$col3().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col3.set$z(t1);
        t1 = this.col0.get$w();
        t2 = arg.get$col0().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$w();
        t3 = arg.get$col0().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$w();
        t1 = arg.get$col0().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$w();
        t2 = arg.get$col0().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col0.set$w(t2);
        t2 = this.col0.get$w();
        t1 = arg.get$col1().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$w();
        t3 = arg.get$col1().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$w();
        t2 = arg.get$col1().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$w();
        t1 = arg.get$col1().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col1.set$w(t1);
        t1 = this.col0.get$w();
        t2 = arg.get$col2().get$x();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t1 = this.col1.get$w();
        t3 = arg.get$col2().get$y();
        t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
        t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
        t2 = this.col2.get$w();
        t1 = arg.get$col2().get$z();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
        t3 = this.col3.get$w();
        t2 = arg.get$col2().get$w();
        t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
        t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
        r.col2.set$w(t2);
        t2 = this.col0.get$w();
        t1 = arg.get$col3().get$x();
        t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
        t2 = this.col1.get$w();
        t3 = arg.get$col3().get$y();
        t3 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t3);
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.col2.get$w();
        t2 = arg.get$col3().get$z();
        t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
        t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
        t3 = this.col3.get$w();
        t1 = arg.get$col3().get$w();
        t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
        t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
        r.col3.set$w(t1);
        return r;
      }
      return;
    }
    throw $.$$throw($.ArgumentError$(arg));
  },
  operator$add$1: function(arg) {
    var r, t1, t2;
    r = $.mat4$zero();
    t1 = this.col0.get$x();
    t2 = arg.get$col0().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col0.set$x(t2);
    t2 = this.col0.get$y();
    t1 = arg.get$col0().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col0.set$y(t1);
    t1 = this.col0.get$z();
    t2 = arg.get$col0().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col0.set$z(t2);
    t2 = this.col0.get$w();
    t1 = arg.get$col0().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col0.set$w(t1);
    t1 = this.col1.get$x();
    t2 = arg.get$col1().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col1.set$x(t2);
    t2 = this.col1.get$y();
    t1 = arg.get$col1().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col1.set$y(t1);
    t1 = this.col1.get$z();
    t2 = arg.get$col1().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col1.set$z(t2);
    t2 = this.col1.get$w();
    t1 = arg.get$col1().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col1.set$w(t1);
    t1 = this.col2.get$x();
    t2 = arg.get$col2().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col2.set$x(t2);
    t2 = this.col2.get$y();
    t1 = arg.get$col2().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col2.set$y(t1);
    t1 = this.col2.get$z();
    t2 = arg.get$col2().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col2.set$z(t2);
    t2 = this.col2.get$w();
    t1 = arg.get$col2().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col2.set$w(t1);
    t1 = this.col3.get$x();
    t2 = arg.get$col3().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col3.set$x(t2);
    t2 = this.col3.get$y();
    t1 = arg.get$col3().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col3.set$y(t1);
    t1 = this.col3.get$z();
    t2 = arg.get$col3().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    r.col3.set$z(t2);
    t2 = this.col3.get$w();
    t1 = arg.get$col3().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    r.col3.set$w(t1);
    return r;
  },
  operator$sub$1: function(arg) {
    var r, t1, t2;
    r = $.mat4$zero();
    t1 = this.col0.get$x();
    t2 = arg.get$col0().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col0.set$x(t2);
    t2 = this.col0.get$y();
    t1 = arg.get$col0().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col0.set$y(t1);
    t1 = this.col0.get$z();
    t2 = arg.get$col0().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col0.set$z(t2);
    t2 = this.col0.get$w();
    t1 = arg.get$col0().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col0.set$w(t1);
    t1 = this.col1.get$x();
    t2 = arg.get$col1().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col1.set$x(t2);
    t2 = this.col1.get$y();
    t1 = arg.get$col1().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col1.set$y(t1);
    t1 = this.col1.get$z();
    t2 = arg.get$col1().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col1.set$z(t2);
    t2 = this.col1.get$w();
    t1 = arg.get$col1().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col1.set$w(t1);
    t1 = this.col2.get$x();
    t2 = arg.get$col2().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col2.set$x(t2);
    t2 = this.col2.get$y();
    t1 = arg.get$col2().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col2.set$y(t1);
    t1 = this.col2.get$z();
    t2 = arg.get$col2().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col2.set$z(t2);
    t2 = this.col2.get$w();
    t1 = arg.get$col2().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col2.set$w(t1);
    t1 = this.col3.get$x();
    t2 = arg.get$col3().get$x();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col3.set$x(t2);
    t2 = this.col3.get$y();
    t1 = arg.get$col3().get$y();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col3.set$y(t1);
    t1 = this.col3.get$z();
    t2 = arg.get$col3().get$z();
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    r.col3.set$z(t2);
    t2 = this.col3.get$w();
    t1 = arg.get$col3().get$w();
    t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
    r.col3.set$w(t1);
    return r;
  },
  scale$3: function(x, y, z) {
    var sw, sx, sy, sz, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
    sw = typeof x === "object" && x !== null && !!x.is$vec4 ? x.w : 1;
    if (typeof x === "object" && x !== null && !!x.is$vec3 || typeof x === "object" && x !== null && !!x.is$vec4) {
      sx = x.get$x();
      sy = x.get$y();
      sz = x.get$z();
    } else {
      sy = y == null ? x : $.getInterceptor$JSNumber(y).toDouble$0(y);
      sz = z == null ? x : $.getInterceptor$JSNumber(z).toDouble$0(z);
      sx = x;
    }
    t1 = this.col0;
    t2 = t1.get$x();
    t1.set$x($.getInterceptor$JSNumber(t2).operator$mul$1(t2, sx));
    t1 = this.col1;
    t3 = t1.get$x();
    t1.set$x($.getInterceptor$JSNumber(t3).operator$mul$1(t3, sx));
    t1 = this.col2;
    t4 = t1.get$x();
    t1.set$x($.getInterceptor$JSNumber(t4).operator$mul$1(t4, sx));
    t1 = this.col3;
    t5 = t1.get$x();
    t1.set$x($.getInterceptor$JSNumber(t5).operator$mul$1(t5, sx));
    t1 = this.col0;
    t6 = t1.get$y();
    t1.set$y($.getInterceptor$JSNumber(t6).operator$mul$1(t6, sy));
    t1 = this.col1;
    t7 = t1.get$y();
    t1.set$y($.getInterceptor$JSNumber(t7).operator$mul$1(t7, sy));
    t1 = this.col2;
    t8 = t1.get$y();
    t1.set$y($.getInterceptor$JSNumber(t8).operator$mul$1(t8, sy));
    t1 = this.col3;
    t9 = t1.get$y();
    t1.set$y($.getInterceptor$JSNumber(t9).operator$mul$1(t9, sy));
    t1 = this.col0;
    t10 = t1.get$z();
    t1.set$z($.getInterceptor$JSNumber(t10).operator$mul$1(t10, sz));
    t1 = this.col1;
    t11 = t1.get$z();
    t1.set$z($.getInterceptor$JSNumber(t11).operator$mul$1(t11, sz));
    t1 = this.col2;
    t12 = t1.get$z();
    t1.set$z($.getInterceptor$JSNumber(t12).operator$mul$1(t12, sz));
    t1 = this.col3;
    t13 = t1.get$z();
    t1.set$z($.getInterceptor$JSNumber(t13).operator$mul$1(t13, sz));
    t1 = this.col0;
    t14 = t1.get$w();
    t1.set$w($.getInterceptor$JSNumber(t14).operator$mul$1(t14, sw));
    t1 = this.col1;
    t15 = t1.get$w();
    t1.set$w($.getInterceptor$JSNumber(t15).operator$mul$1(t15, sw));
    t1 = this.col2;
    t16 = t1.get$w();
    t1.set$w($.getInterceptor$JSNumber(t16).operator$mul$1(t16, sw));
    t1 = this.col3;
    t17 = t1.get$w();
    t1.set$w($.getInterceptor$JSNumber(t17).operator$mul$1(t17, sw));
    return this;
  },
  scale$1: function(x) {
    return this.scale$3(x, null, null);
  },
  operator$negate$0: function() {
    var r, t1, t2, t3, t4;
    r = $.mat4$zero();
    t1 = this.operator$index$1(0);
    r.operator$indexSet$2(0, $.getInterceptor$JSNumber(t1).operator$negate$0(t1));
    t2 = this.operator$index$1(1);
    r.operator$indexSet$2(1, $.getInterceptor$JSNumber(t2).operator$negate$0(t2));
    t3 = this.operator$index$1(2);
    r.operator$indexSet$2(2, $.getInterceptor$JSNumber(t3).operator$negate$0(t3));
    t4 = this.operator$index$1(3);
    r.operator$indexSet$2(3, $.getInterceptor$JSNumber(t4).operator$negate$0(t4));
    return r;
  },
  transposed$0: function() {
    var r, t1;
    r = $.mat4$zero();
    t1 = this.col0.get$x();
    r.col0.set$x(t1);
    t1 = this.col1.get$x();
    r.col0.set$y(t1);
    t1 = this.col2.get$x();
    r.col0.set$z(t1);
    t1 = this.col3.get$x();
    r.col0.set$w(t1);
    t1 = this.col0.get$y();
    r.col1.set$x(t1);
    t1 = this.col1.get$y();
    r.col1.set$y(t1);
    t1 = this.col2.get$y();
    r.col1.set$z(t1);
    t1 = this.col3.get$y();
    r.col1.set$w(t1);
    t1 = this.col0.get$z();
    r.col2.set$x(t1);
    t1 = this.col1.get$z();
    r.col2.set$y(t1);
    t1 = this.col2.get$z();
    r.col2.set$z(t1);
    t1 = this.col3.get$z();
    r.col2.set$w(t1);
    t1 = this.col0.get$w();
    r.col3.set$x(t1);
    t1 = this.col1.get$w();
    r.col3.set$y(t1);
    t1 = this.col2.get$w();
    r.col3.set$z(t1);
    t1 = this.col3.get$w();
    r.col3.set$w(t1);
    return r;
  },
  setRotationX$1: function(radians) {
    var radians_, c, s, t1;
    radians_ = $.getInterceptor$JSNumber(radians).toDouble$0(radians);
    c = Math.cos($.checkNum(radians_));
    s = Math.sin($.checkNum(radians_));
    this.col0.set$x(1);
    this.col0.set$y(0);
    this.col0.set$z(0);
    this.col1.set$x(0);
    this.col1.set$y(c);
    this.col1.set$z(s);
    this.col2.set$x(0);
    t1 = -s;
    this.col2.set$y(t1);
    this.col2.set$z(c);
    this.col0.set$w(0);
    this.col1.set$w(0);
    this.col2.set$w(0);
  },
  add$1: function(o) {
    var t1, t3, t5, t8, t10, t12, t15, t17, t20, t22, t24, t27, t29, t32, t34, t36, t39, t41, t44, t46, t48;
    t1 = this.col0.get$x();
    if (typeof t1 !== "number")
      return this.add$1$bailout0(1, o, t1);
    t3 = o.get$col0().get$x();
    if (typeof t3 !== "number")
      return this.add$1$bailout0(2, o, t1, t3);
    t3 = t1 + t3;
    this.col0.set$x(t3);
    t3 = this.col0.get$y();
    if (typeof t3 !== "number")
      return this.add$1$bailout0(3, o, t3);
    t5 = o.get$col0().get$y();
    if (typeof t5 !== "number")
      return this.add$1$bailout0(4, o, t3, t5);
    t5 = t3 + t5;
    this.col0.set$y(t5);
    t5 = this.col0;
    t3 = t5.get$z();
    if (typeof t3 !== "number")
      return this.add$1$bailout0(5, o, t3);
    t8 = o.get$col0().get$z();
    if (typeof t8 !== "number")
      return this.add$1$bailout0(6, o, t3, t8);
    t5.set$z(t3 + t8);
    t5 = this.col0;
    t10 = t5.get$w();
    if (typeof t10 !== "number")
      return this.add$1$bailout0(7, o, t10);
    t12 = o.get$col0().get$w();
    if (typeof t12 !== "number")
      return this.add$1$bailout0(8, o, t10, t12);
    t5.set$w(t10 + t12);
    t5 = this.col1.get$x();
    if (typeof t5 !== "number")
      return this.add$1$bailout0(9, o, t5);
    t15 = o.get$col1().get$x();
    if (typeof t15 !== "number")
      return this.add$1$bailout0(10, o, t5, t15);
    t15 = t5 + t15;
    this.col1.set$x(t15);
    t15 = this.col1.get$y();
    if (typeof t15 !== "number")
      return this.add$1$bailout0(11, o, t15);
    t17 = o.get$col1().get$y();
    if (typeof t17 !== "number")
      return this.add$1$bailout0(12, o, t15, t17);
    t17 = t15 + t17;
    this.col1.set$y(t17);
    t17 = this.col1;
    t15 = t17.get$z();
    if (typeof t15 !== "number")
      return this.add$1$bailout0(13, o, t15);
    t20 = o.get$col1().get$z();
    if (typeof t20 !== "number")
      return this.add$1$bailout0(14, o, t15, t20);
    t17.set$z(t15 + t20);
    t17 = this.col1;
    t22 = t17.get$w();
    if (typeof t22 !== "number")
      return this.add$1$bailout0(15, o, t22);
    t24 = o.get$col1().get$w();
    if (typeof t24 !== "number")
      return this.add$1$bailout0(16, o, t22, t24);
    t17.set$w(t22 + t24);
    t17 = this.col2.get$x();
    if (typeof t17 !== "number")
      return this.add$1$bailout0(17, o, t17);
    t27 = o.get$col2().get$x();
    if (typeof t27 !== "number")
      return this.add$1$bailout0(18, o, t17, t27);
    t27 = t17 + t27;
    this.col2.set$x(t27);
    t27 = this.col2.get$y();
    if (typeof t27 !== "number")
      return this.add$1$bailout0(19, o, t27);
    t29 = o.get$col2().get$y();
    if (typeof t29 !== "number")
      return this.add$1$bailout0(20, o, t27, t29);
    t29 = t27 + t29;
    this.col2.set$y(t29);
    t29 = this.col2;
    t27 = t29.get$z();
    if (typeof t27 !== "number")
      return this.add$1$bailout0(21, o, t27);
    t32 = o.get$col2().get$z();
    if (typeof t32 !== "number")
      return this.add$1$bailout0(22, o, t27, t32);
    t29.set$z(t27 + t32);
    t29 = this.col2;
    t34 = t29.get$w();
    if (typeof t34 !== "number")
      return this.add$1$bailout0(23, o, t34);
    t36 = o.get$col2().get$w();
    if (typeof t36 !== "number")
      return this.add$1$bailout0(24, o, t34, t36);
    t29.set$w(t34 + t36);
    t29 = this.col3.get$x();
    if (typeof t29 !== "number")
      return this.add$1$bailout0(25, o, t29);
    t39 = o.get$col3().get$x();
    if (typeof t39 !== "number")
      return this.add$1$bailout0(26, o, t29, t39);
    t39 = t29 + t39;
    this.col3.set$x(t39);
    t39 = this.col3.get$y();
    if (typeof t39 !== "number")
      return this.add$1$bailout0(27, o, t39);
    t41 = o.get$col3().get$y();
    if (typeof t41 !== "number")
      return this.add$1$bailout0(28, o, t39, t41);
    t41 = t39 + t41;
    this.col3.set$y(t41);
    t41 = this.col3;
    t39 = t41.get$z();
    if (typeof t39 !== "number")
      return this.add$1$bailout0(29, o, t39);
    t44 = o.get$col3().get$z();
    if (typeof t44 !== "number")
      return this.add$1$bailout0(30, o, t39, t44);
    t41.set$z(t39 + t44);
    t41 = this.col3;
    t46 = t41.get$w();
    if (typeof t46 !== "number")
      return this.add$1$bailout0(31, o, t46);
    t48 = o.get$col3().get$w();
    if (typeof t48 !== "number")
      return this.add$1$bailout0(32, t46, t48);
    t41.set$w(t46 + t48);
    return this;
  },
  add$1$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env1;
        o = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        o = env0;
        break;
      case 3:
        t3 = env1;
        o = env0;
        break;
      case 4:
        t5 = env2;
        t3 = env1;
        o = env0;
        break;
      case 5:
        t5 = env1;
        o = env0;
        break;
      case 6:
        t7 = env2;
        t5 = env1;
        o = env0;
        break;
      case 7:
        t7 = env1;
        o = env0;
        break;
      case 8:
        t9 = env2;
        t7 = env1;
        o = env0;
        break;
      case 9:
        t9 = env1;
        o = env0;
        break;
      case 10:
        t11 = env2;
        t9 = env1;
        o = env0;
        break;
      case 11:
        t11 = env1;
        o = env0;
        break;
      case 12:
        t13 = env2;
        t11 = env1;
        o = env0;
        break;
      case 13:
        t13 = env1;
        o = env0;
        break;
      case 14:
        t15 = env2;
        t13 = env1;
        o = env0;
        break;
      case 15:
        t15 = env1;
        o = env0;
        break;
      case 16:
        t17 = env2;
        t15 = env1;
        o = env0;
        break;
      case 17:
        t17 = env1;
        o = env0;
        break;
      case 18:
        t19 = env2;
        t17 = env1;
        o = env0;
        break;
      case 19:
        t19 = env1;
        o = env0;
        break;
      case 20:
        t21 = env2;
        t19 = env1;
        o = env0;
        break;
      case 21:
        t21 = env1;
        o = env0;
        break;
      case 22:
        t23 = env2;
        t21 = env1;
        o = env0;
        break;
      case 23:
        t23 = env1;
        o = env0;
        break;
      case 24:
        t25 = env2;
        t23 = env1;
        o = env0;
        break;
      case 25:
        t25 = env1;
        o = env0;
        break;
      case 26:
        t27 = env2;
        t25 = env1;
        o = env0;
        break;
      case 27:
        t27 = env1;
        o = env0;
        break;
      case 28:
        t29 = env2;
        t27 = env1;
        o = env0;
        break;
      case 29:
        t29 = env1;
        o = env0;
        break;
      case 30:
        t31 = env2;
        t29 = env1;
        o = env0;
        break;
      case 31:
        t31 = env1;
        o = env0;
        break;
      case 32:
        t33 = env1;
        t31 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.col0.get$x();
      case 1:
        state0 = 0;
        t3 = o.get$col0().get$x();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        this.col0.set$x(t3);
        t3 = this.col0.get$y();
      case 3:
        state0 = 0;
        t5 = o.get$col0().get$y();
      case 4:
        state0 = 0;
        t5 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t5);
        this.col0.set$y(t5);
        t5 = this.col0.get$z();
      case 5:
        state0 = 0;
        t7 = o.get$col0().get$z();
      case 6:
        state0 = 0;
        t7 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t7);
        this.col0.set$z(t7);
        t7 = this.col0.get$w();
      case 7:
        state0 = 0;
        t9 = o.get$col0().get$w();
      case 8:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t7).operator$add$1(t7, t9);
        this.col0.set$w(t9);
        t9 = this.col1.get$x();
      case 9:
        state0 = 0;
        t11 = o.get$col1().get$x();
      case 10:
        state0 = 0;
        t11 = $.getInterceptor$JSNumber(t9).operator$add$1(t9, t11);
        this.col1.set$x(t11);
        t11 = this.col1.get$y();
      case 11:
        state0 = 0;
        t13 = o.get$col1().get$y();
      case 12:
        state0 = 0;
        t13 = $.getInterceptor$JSNumber(t11).operator$add$1(t11, t13);
        this.col1.set$y(t13);
        t13 = this.col1.get$z();
      case 13:
        state0 = 0;
        t15 = o.get$col1().get$z();
      case 14:
        state0 = 0;
        t15 = $.getInterceptor$JSNumber(t13).operator$add$1(t13, t15);
        this.col1.set$z(t15);
        t15 = this.col1.get$w();
      case 15:
        state0 = 0;
        t17 = o.get$col1().get$w();
      case 16:
        state0 = 0;
        t17 = $.getInterceptor$JSNumber(t15).operator$add$1(t15, t17);
        this.col1.set$w(t17);
        t17 = this.col2.get$x();
      case 17:
        state0 = 0;
        t19 = o.get$col2().get$x();
      case 18:
        state0 = 0;
        t19 = $.getInterceptor$JSNumber(t17).operator$add$1(t17, t19);
        this.col2.set$x(t19);
        t19 = this.col2.get$y();
      case 19:
        state0 = 0;
        t21 = o.get$col2().get$y();
      case 20:
        state0 = 0;
        t21 = $.getInterceptor$JSNumber(t19).operator$add$1(t19, t21);
        this.col2.set$y(t21);
        t21 = this.col2.get$z();
      case 21:
        state0 = 0;
        t23 = o.get$col2().get$z();
      case 22:
        state0 = 0;
        t23 = $.getInterceptor$JSNumber(t21).operator$add$1(t21, t23);
        this.col2.set$z(t23);
        t23 = this.col2.get$w();
      case 23:
        state0 = 0;
        t25 = o.get$col2().get$w();
      case 24:
        state0 = 0;
        t25 = $.getInterceptor$JSNumber(t23).operator$add$1(t23, t25);
        this.col2.set$w(t25);
        t25 = this.col3.get$x();
      case 25:
        state0 = 0;
        t27 = o.get$col3().get$x();
      case 26:
        state0 = 0;
        t27 = $.getInterceptor$JSNumber(t25).operator$add$1(t25, t27);
        this.col3.set$x(t27);
        t27 = this.col3.get$y();
      case 27:
        state0 = 0;
        t29 = o.get$col3().get$y();
      case 28:
        state0 = 0;
        t29 = $.getInterceptor$JSNumber(t27).operator$add$1(t27, t29);
        this.col3.set$y(t29);
        t29 = this.col3.get$z();
      case 29:
        state0 = 0;
        t31 = o.get$col3().get$z();
      case 30:
        state0 = 0;
        t31 = $.getInterceptor$JSNumber(t29).operator$add$1(t29, t31);
        this.col3.set$z(t31);
        t31 = this.col3.get$w();
      case 31:
        state0 = 0;
        t33 = o.get$col3().get$w();
      case 32:
        var t1, o, t3, t5, t7, t9, t11, t13, t15, t17, t19, t21, t23, t25, t27, t29, t31, t33;
        state0 = 0;
        t33 = $.getInterceptor$JSNumber(t31).operator$add$1(t31, t33);
        this.col3.set$w(t33);
        return this;
    }
  },
  multiply$1: function(arg) {
    var m00, m01, m02, m03, m10, m11, m12, m13, t1, m20, t2, m21, t3, m22, t4, m23, m30, m31, m32, m33, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33, t5, t6;
    m00 = this.col0.get$x();
    m01 = this.col1.get$x();
    m02 = this.col2.get$x();
    m03 = this.col3.get$x();
    m10 = this.col0.get$y();
    m11 = this.col1.get$y();
    m12 = this.col2.get$y();
    m13 = this.col3.get$y();
    t1 = this.col0;
    m20 = t1.get$z();
    t2 = this.col1;
    m21 = t2.get$z();
    t3 = this.col2;
    m22 = t3.get$z();
    t4 = this.col3;
    m23 = t4.get$z();
    m30 = t1.get$w();
    m31 = t2.get$w();
    m32 = t3.get$w();
    m33 = t4.get$w();
    n00 = arg.col0.get$x();
    n01 = arg.col1.get$x();
    n02 = arg.col2.get$x();
    n03 = arg.col3.get$x();
    n10 = arg.col0.get$y();
    n11 = arg.col1.get$y();
    n12 = arg.col2.get$y();
    n13 = arg.col3.get$y();
    t4 = arg.col0;
    n20 = t4.get$z();
    t3 = arg.col1;
    n21 = t3.get$z();
    t2 = arg.col2;
    n22 = t2.get$z();
    t1 = arg.col3;
    n23 = t1.get$z();
    n30 = t4.get$w();
    n31 = t3.get$w();
    n32 = t2.get$w();
    n33 = t1.get$w();
    t1 = $.getInterceptor$JSNumber(m00);
    t2 = t1.operator$mul$1(m00, n00);
    t3 = $.getInterceptor$JSNumber(m01);
    t4 = t3.operator$mul$1(m01, n10);
    t4 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t4);
    t2 = $.getInterceptor$JSNumber(m02);
    t5 = t2.operator$mul$1(m02, n20);
    t5 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t5);
    t4 = $.getInterceptor$JSNumber(m03);
    t6 = t4.operator$mul$1(m03, n30);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col0.set$x(t6);
    t6 = t1.operator$mul$1(m00, n01);
    t5 = t3.operator$mul$1(m01, n11);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t2.operator$mul$1(m02, n21);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t4.operator$mul$1(m03, n31);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col1.set$x(t5);
    t5 = t1.operator$mul$1(m00, n02);
    t6 = t3.operator$mul$1(m01, n12);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t2.operator$mul$1(m02, n22);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t4.operator$mul$1(m03, n32);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col2.set$x(t6);
    t1 = t1.operator$mul$1(m00, n03);
    t3 = t3.operator$mul$1(m01, n13);
    t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
    t2 = t2.operator$mul$1(m02, n23);
    t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
    t4 = t4.operator$mul$1(m03, n33);
    t4 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t4);
    this.col3.set$x(t4);
    t4 = $.getInterceptor$JSNumber(m10);
    t2 = t4.operator$mul$1(m10, n00);
    t3 = $.getInterceptor$JSNumber(m11);
    t1 = t3.operator$mul$1(m11, n10);
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    t2 = $.getInterceptor$JSNumber(m12);
    t6 = t2.operator$mul$1(m12, n20);
    t6 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t6);
    t1 = $.getInterceptor$JSNumber(m13);
    t5 = t1.operator$mul$1(m13, n30);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col0.set$y(t5);
    t5 = t4.operator$mul$1(m10, n01);
    t6 = t3.operator$mul$1(m11, n11);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t2.operator$mul$1(m12, n21);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t1.operator$mul$1(m13, n31);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col1.set$y(t6);
    t6 = t4.operator$mul$1(m10, n02);
    t5 = t3.operator$mul$1(m11, n12);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t2.operator$mul$1(m12, n22);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t1.operator$mul$1(m13, n32);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col2.set$y(t5);
    t4 = t4.operator$mul$1(m10, n03);
    t3 = t3.operator$mul$1(m11, n13);
    t3 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t3);
    t2 = t2.operator$mul$1(m12, n23);
    t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
    t1 = t1.operator$mul$1(m13, n33);
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    this.col3.set$y(t1);
    t1 = $.getInterceptor$JSNumber(m20);
    t2 = t1.operator$mul$1(m20, n00);
    t3 = $.getInterceptor$JSNumber(m21);
    t4 = t3.operator$mul$1(m21, n10);
    t4 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t4);
    t2 = $.getInterceptor$JSNumber(m22);
    t5 = t2.operator$mul$1(m22, n20);
    t5 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t5);
    t4 = $.getInterceptor$JSNumber(m23);
    t6 = t4.operator$mul$1(m23, n30);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col0.set$z(t6);
    t6 = t1.operator$mul$1(m20, n01);
    t5 = t3.operator$mul$1(m21, n11);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t2.operator$mul$1(m22, n21);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t4.operator$mul$1(m23, n31);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col1.set$z(t5);
    t5 = t1.operator$mul$1(m20, n02);
    t6 = t3.operator$mul$1(m21, n12);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t2.operator$mul$1(m22, n22);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t4.operator$mul$1(m23, n32);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col2.set$z(t6);
    t1 = t1.operator$mul$1(m20, n03);
    t3 = t3.operator$mul$1(m21, n13);
    t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
    t2 = t2.operator$mul$1(m22, n23);
    t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
    t4 = t4.operator$mul$1(m23, n33);
    t4 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t4);
    this.col3.set$z(t4);
    t4 = $.getInterceptor$JSNumber(m30);
    t2 = t4.operator$mul$1(m30, n00);
    t3 = $.getInterceptor$JSNumber(m31);
    t1 = t3.operator$mul$1(m31, n10);
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    t2 = $.getInterceptor$JSNumber(m32);
    t6 = t2.operator$mul$1(m32, n20);
    t6 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t6);
    t1 = $.getInterceptor$JSNumber(m33);
    t5 = t1.operator$mul$1(m33, n30);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col0.set$w(t5);
    t5 = t4.operator$mul$1(m30, n01);
    t6 = t3.operator$mul$1(m31, n11);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t2.operator$mul$1(m32, n21);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t1.operator$mul$1(m33, n31);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    this.col1.set$w(t6);
    t6 = t4.operator$mul$1(m30, n02);
    t5 = t3.operator$mul$1(m31, n12);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    t6 = t2.operator$mul$1(m32, n22);
    t6 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t6);
    t5 = t1.operator$mul$1(m33, n32);
    t5 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t5);
    this.col2.set$w(t5);
    t4 = t4.operator$mul$1(m30, n03);
    t3 = t3.operator$mul$1(m31, n13);
    t3 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t3);
    t2 = t2.operator$mul$1(m32, n23);
    t2 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t2);
    t1 = t1.operator$mul$1(m33, n33);
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    this.col3.set$w(t1);
    return this;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, i;
    t1 = this.col0.get$x();
    t2 = $.getInterceptor$JSArray(array);
    t2.operator$indexSet$2(array, offset, t1);
    i = $.getInterceptor$JSNumber(offset).operator$add$1(offset, 1);
    t2.operator$indexSet$2(array, i, this.col0.get$y());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col0.get$z());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col0.get$w());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col1.get$x());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col1.get$y());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col1.get$z());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col1.get$w());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col2.get$x());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col2.get$y());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col2.get$z());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col2.get$w());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col3.get$x());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col3.get$y());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col3.get$z());
    i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
    t2.operator$indexSet$2(array, i, this.col3.get$w());
    $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  },
  mat4$identity$0: function() {
    this.col0 = $.vec4$zero();
    this.col1 = $.vec4$zero();
    this.col2 = $.vec4$zero();
    this.col3 = $.vec4$zero();
    this.col0.set$x(1);
    this.col1.set$y(1);
    this.col2.set$z(1);
    this.col3.set$w(1);
  },
  mat4$rotationX$1: function(radians_) {
    this.col0 = $.vec4$zero();
    this.col1 = $.vec4$zero();
    this.col2 = $.vec4$zero();
    this.col3 = $.vec4$zero();
    this.col3.set$w(1);
    this.setRotationX$1(radians_);
  },
  mat4$zero$0: function() {
    this.col0 = $.vec4$zero();
    this.col1 = $.vec4$zero();
    this.col2 = $.vec4$zero();
    this.col3 = $.vec4$zero();
    this.col0.set$x(0);
    this.col0.set$y(0);
    this.col0.set$z(0);
    this.col0.set$w(0);
    this.col1.set$x(0);
    this.col1.set$y(0);
    this.col1.set$z(0);
    this.col1.set$w(0);
    this.col2.set$x(0);
    this.col2.set$y(0);
    this.col2.set$z(0);
    this.col2.set$w(0);
    this.col3.set$x(0);
    this.col3.set$y(0);
    this.col3.set$z(0);
    this.col3.set$w(0);
  }
};

$$.quat = {"": "Object;x=,y=,z=,w=",
  setAxisAngle$2: function(axis, radians) {
    var len, t1, t2, halfSin, t3, t4;
    len = $.getInterceptor$JSStringJSArray(axis).get$length(axis);
    if ($.eqB(len, 0))
      return;
    t1 = $.getInterceptor$JSNumber(radians);
    t2 = $.sin(t1.operator$mul$1(radians, 0.5), null);
    halfSin = $.getInterceptor$JSNumber(t2).operator$div$1(t2, len);
    t2 = axis.get$x();
    this.x = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, halfSin);
    t3 = axis.get$y();
    this.y = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, halfSin);
    t4 = axis.get$z();
    this.z = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, halfSin);
    this.w = $.cos(t1.operator$mul$1(radians, 0.5), null);
  },
  normalize$0: function() {
    var l, t1, t2, t3, t4;
    l = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.eqB(l, 0))
      return this;
    t1 = this.x;
    this.x = $.getInterceptor$JSNumber(t1).operator$div$1(t1, l);
    t2 = this.y;
    this.y = $.getInterceptor$JSNumber(t2).operator$div$1(t2, l);
    t3 = this.z;
    this.z = $.getInterceptor$JSNumber(t3).operator$div$1(t3, l);
    t4 = this.w;
    this.w = $.getInterceptor$JSNumber(t4).operator$div$1(t4, l);
    return this;
  },
  normalized$1: function(out) {
    return (out == null ? $.quat$copy(this) : out).normalize$0();
  },
  get$normalized: function() {
    return new $.BoundClosure8(this, "normalized$1");
  },
  get$length2: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    t2 = this.y;
    t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t2);
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    t1 = this.z;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t1);
    t1 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t1);
    t2 = this.w;
    t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t2);
    return $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
  },
  get$length: function() {
    return $.sqrt(this.get$length2());
  },
  rotate$1: function(v) {
    var t1, tix, tiy, tiz, tiw, t2, t3, t4, t5, t6, tx, ty, tz, tw, result_x, result_y, result_z;
    t1 = this.x;
    tix = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t1 = this.y;
    tiy = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t1 = this.z;
    tiz = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    tiw = this.w;
    t1 = v.get$x();
    t2 = $.getInterceptor$JSNumber(tiw);
    t1 = t2.operator$mul$1(tiw, t1);
    t3 = $.getInterceptor$JSNumber(tix);
    t4 = t3.operator$mul$1(tix, 0);
    t4 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t4);
    t1 = v.get$z();
    t5 = $.getInterceptor$JSNumber(tiy);
    t1 = t5.operator$mul$1(tiy, t1);
    t1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t1);
    t4 = v.get$y();
    t6 = $.getInterceptor$JSNumber(tiz);
    t4 = t6.operator$mul$1(tiz, t4);
    tx = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4);
    t4 = t2.operator$mul$1(tiw, v.get$y());
    t1 = t5.operator$mul$1(tiy, 0);
    t1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t1);
    t4 = t6.operator$mul$1(tiz, v.get$x());
    t4 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t4);
    t1 = t3.operator$mul$1(tix, v.get$z());
    ty = $.getInterceptor$JSNumber(t4).operator$sub$1(t4, t1);
    t1 = t2.operator$mul$1(tiw, v.get$z());
    t4 = t6.operator$mul$1(tiz, 0);
    t4 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t4);
    t1 = t3.operator$mul$1(tix, v.get$y());
    t1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t1);
    t4 = t5.operator$mul$1(tiy, v.get$x());
    tz = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4);
    t2 = t2.operator$mul$1(tiw, 0);
    t3 = t3.operator$mul$1(tix, v.get$x());
    t3 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t3);
    t5 = t5.operator$mul$1(tiy, v.get$y());
    t5 = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, t5);
    t6 = t6.operator$mul$1(tiz, v.get$z());
    tw = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, t6);
    t6 = this.x;
    t5 = $.getInterceptor$JSNumber(tw);
    t6 = t5.operator$mul$1(tw, t6);
    t3 = this.w;
    t2 = $.getInterceptor$JSNumber(tx);
    t3 = t2.operator$mul$1(tx, t3);
    t3 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t3);
    t6 = this.z;
    t4 = $.getInterceptor$JSNumber(ty);
    t6 = t4.operator$mul$1(ty, t6);
    t6 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t6);
    t3 = this.y;
    t1 = $.getInterceptor$JSNumber(tz);
    t3 = t1.operator$mul$1(tz, t3);
    result_x = $.getInterceptor$JSNumber(t6).operator$sub$1(t6, t3);
    t3 = t5.operator$mul$1(tw, this.y);
    t6 = t4.operator$mul$1(ty, this.w);
    t6 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t6);
    t3 = t1.operator$mul$1(tz, this.x);
    t3 = $.getInterceptor$JSNumber(t6).operator$add$1(t6, t3);
    t6 = t2.operator$mul$1(tx, this.z);
    result_y = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, t6);
    t5 = t5.operator$mul$1(tw, this.z);
    t1 = t1.operator$mul$1(tz, this.w);
    t1 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t1);
    t2 = t2.operator$mul$1(tx, this.y);
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    t4 = t4.operator$mul$1(ty, this.x);
    result_z = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t4);
    v.set$x(result_x);
    v.set$y(result_y);
    v.set$z(result_z);
    return v;
  },
  operator$div$1: function(scale) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, scale);
    t2 = this.y;
    t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, scale);
    t3 = this.z;
    t3 = $.getInterceptor$JSNumber(t3).operator$div$1(t3, scale);
    t4 = this.w;
    return $.quat$(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$div$1(t4, scale));
  },
  operator$mul$1: function(other) {
    var t1, t2, t3, t4, t5, t6;
    if (typeof other === "number") {
      t1 = this.x;
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, other);
      t2 = this.y;
      t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, other);
      t3 = this.z;
      t3 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, other);
      t4 = this.w;
      return $.quat$(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$mul$1(t4, other));
    }
    if (typeof other === "object" && other !== null && !!other.is$quat) {
      t1 = this.w;
      t2 = other.x;
      t2 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
      t1 = this.x;
      t3 = other.w;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
      t2 = this.y;
      t1 = other.z;
      t1 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, t1);
      t1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t1);
      t3 = this.z;
      t2 = other.y;
      t2 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t2);
      t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
      t1 = this.w;
      t3 = other.y;
      t3 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t3);
      t1 = this.y;
      t4 = other.w;
      t4 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t4);
      t4 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, t4);
      t3 = this.z;
      t1 = other.x;
      t1 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, t1);
      t1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t1);
      t4 = this.x;
      t3 = other.z;
      t3 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t3);
      t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
      t1 = this.w;
      t4 = other.z;
      t4 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t4);
      t1 = this.z;
      t5 = other.w;
      t5 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t5);
      t5 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t5);
      t4 = this.x;
      t1 = other.y;
      t1 = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, t1);
      t1 = $.getInterceptor$JSNumber(t5).operator$add$1(t5, t1);
      t5 = this.y;
      t4 = other.x;
      t4 = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t4);
      t4 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4);
      t1 = this.w;
      t5 = other.w;
      t5 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t5);
      t1 = this.x;
      t6 = other.x;
      t6 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t6);
      t6 = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, t6);
      t5 = this.y;
      t1 = other.y;
      t1 = $.getInterceptor$JSNumber(t5).operator$mul$1(t5, t1);
      t1 = $.getInterceptor$JSNumber(t6).operator$sub$1(t6, t1);
      t6 = this.z;
      t5 = other.z;
      t5 = $.getInterceptor$JSNumber(t6).operator$mul$1(t6, t5);
      return $.quat$(t2, t3, t4, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t5));
    }
  },
  operator$add$1: function(other) {
    var t1, t3, t6, t9, t12;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout0(1, other, t1);
    t3 = other.get$x();
    if (typeof t3 !== "number")
      return this.operator$add$1$bailout0(2, other, t3, t1);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout0(3, other, t1, t3);
    t6 = other.get$y();
    if (typeof t6 !== "number")
      return this.operator$add$1$bailout0(4, other, t1, t6, t3);
    t6 = t1 + t6;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout0(5, other, t1, t6, t3);
    t9 = other.get$z();
    if (typeof t9 !== "number")
      return this.operator$add$1$bailout0(6, other, t1, t6, t9, t3);
    t9 = t1 + t9;
    t1 = this.w;
    if (typeof t1 !== "number")
      return this.operator$add$1$bailout0(7, other, t1, t6, t9, t3);
    t12 = other.get$w();
    if (typeof t12 !== "number")
      return this.operator$add$1$bailout0(8, t9, t12, t1, t6, t3);
    return $.quat$(t3, t6, t9, t1 + t12);
  },
  operator$add$1$bailout0: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env1;
        other = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        other = env0;
        break;
      case 3:
        t3 = env2;
        t1 = env1;
        other = env0;
        break;
      case 4:
        t3 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 5:
        t3 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 6:
        t3 = env4;
        t9 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 7:
        t3 = env4;
        t9 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 8:
        t3 = env4;
        t6 = env3;
        t1 = env2;
        t12 = env1;
        t9 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = other.get$y();
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t6);
        t1 = this.z;
      case 5:
        state0 = 0;
        t9 = other.get$z();
      case 6:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t9);
        t1 = this.w;
      case 7:
        state0 = 0;
        t12 = other.get$w();
      case 8:
        var t1, other, t3, t6, t9, t12;
        state0 = 0;
        return $.quat$(t3, t6, t9, $.getInterceptor$JSNumber(t1).operator$add$1(t1, t12));
    }
  },
  operator$sub$1: function(other) {
    var t1, t3, t6, t9, t12;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout0(1, other, t1);
    t3 = other.get$x();
    if (typeof t3 !== "number")
      return this.operator$sub$1$bailout0(2, other, t3, t1);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout0(3, other, t1, t3);
    t6 = other.get$y();
    if (typeof t6 !== "number")
      return this.operator$sub$1$bailout0(4, other, t1, t6, t3);
    t6 = t1 - t6;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout0(5, other, t1, t6, t3);
    t9 = other.get$z();
    if (typeof t9 !== "number")
      return this.operator$sub$1$bailout0(6, other, t1, t6, t9, t3);
    t9 = t1 - t9;
    t1 = this.w;
    if (typeof t1 !== "number")
      return this.operator$sub$1$bailout0(7, other, t1, t6, t9, t3);
    t12 = other.get$w();
    if (typeof t12 !== "number")
      return this.operator$sub$1$bailout0(8, t9, t12, t1, t6, t3);
    return $.quat$(t3, t6, t9, t1 - t12);
  },
  operator$sub$1$bailout0: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env1;
        other = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        other = env0;
        break;
      case 3:
        t3 = env2;
        t1 = env1;
        other = env0;
        break;
      case 4:
        t3 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 5:
        t3 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 6:
        t3 = env4;
        t9 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 7:
        t3 = env4;
        t9 = env3;
        t6 = env2;
        t1 = env1;
        other = env0;
        break;
      case 8:
        t3 = env4;
        t6 = env3;
        t1 = env2;
        t12 = env1;
        t9 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = other.get$y();
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t6);
        t1 = this.z;
      case 5:
        state0 = 0;
        t9 = other.get$z();
      case 6:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t9);
        t1 = this.w;
      case 7:
        state0 = 0;
        t12 = other.get$w();
      case 8:
        var t1, other, t3, t6, t9, t12;
        state0 = 0;
        return $.quat$(t3, t6, t9, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t12));
    }
  },
  operator$negate$0: function() {
    var t1, t2, t3, t4;
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
    t2 = this.y;
    t2 = $.getInterceptor$JSNumber(t2).operator$negate$0(t2);
    t3 = this.z;
    t3 = $.getInterceptor$JSNumber(t3).operator$negate$0(t3);
    t4 = this.w;
    return $.quat$(t1, t2, t3, $.getInterceptor$JSNumber(t4).operator$negate$0(t4));
  },
  operator$index$1: function(i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
    }
    return 0;
  },
  operator$indexSet$2: function(i, arg) {
    switch (i) {
      case 0:
        this.x = arg;
        break;
      case 1:
        this.y = arg;
        break;
      case 2:
        this.z = arg;
        break;
      case 3:
        this.w = arg;
        break;
    }
  },
  toString$0: function() {
    return $.S(this.x) + ", " + $.S(this.y) + ", " + $.S(this.z) + " @ " + $.S(this.w);
  },
  quat$copy$1: function(original) {
    this.x = original.get$x();
    this.y = original.get$y();
    this.z = original.get$z();
    this.w = original.get$w();
  },
  quat$4: function(a, b, c, d) {
    var trace, s, t1, t2, t3, t4, i, j, k, t5;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 1;
    if (typeof a === "number" && typeof b === "number" && typeof c === "number" && typeof d === "number") {
      this.x = a;
      this.y = b;
      this.z = c;
      this.w = d;
      return;
    }
    if (typeof a === "object" && a !== null && !!a.is$vec3 && typeof b === "number") {
      this.setAxisAngle$2(a, b);
      return;
    }
    if (typeof a === "object" && a !== null && !!a.is$vec3) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      this.w = 0;
      return;
    }
    if (typeof a === "object" && a !== null && !!a.is$quat) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      this.w = a.w;
      return;
    }
    if (typeof a === "object" && a !== null && !!a.is$mat3) {
      trace = a.trace$0();
      if ($.gtB(trace, 0)) {
        s = $.sqrt($.getInterceptor$JSNumber(trace).operator$add$1(trace, 1));
        this.w = s * 0.5;
        s = 0.5 / s;
        t1 = a.col1.get$z();
        t2 = a.col2.get$y();
        t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
        this.x = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, s);
        t1 = a.col2.get$x();
        t3 = a.col0.get$z();
        t3 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t3);
        this.y = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, s);
        t1 = a.col0.get$y();
        t4 = a.col1.get$x();
        t4 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4);
        this.z = $.getInterceptor$JSNumber(t4).operator$mul$1(t4, s);
      } else {
        if ($.ltB(a.col0.get$x(), a.col1.get$y()))
          i = $.ltB(a.col1.get$y(), a.col2.get$z()) ? 2 : 1;
        else
          i = $.ltB(a.col0.get$x(), a.col2.get$z()) ? 2 : 0;
        j = $.CONSTANT4.operator$mod$1(i + 1, 3);
        k = $.CONSTANT4.operator$mod$1(i + 2, 3);
        t1 = a.operator$index$1(i);
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
        t2 = a.operator$index$1(j);
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, j);
        t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
        t1 = a.operator$index$1(k);
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        t1 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t1);
        s = $.sqrt($.getInterceptor$JSNumber(t1).operator$add$1(t1, 1));
        this.operator$indexSet$2(i, s * 0.5);
        s = 0.5 / s;
        t2 = a.operator$index$1(j);
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
        t3 = a.operator$index$1(k);
        t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, j);
        t3 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, t3);
        this.operator$indexSet$2(3, $.getInterceptor$JSNumber(t3).operator$mul$1(t3, s));
        t2 = a.operator$index$1(i);
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, j);
        t4 = a.operator$index$1(j);
        t4 = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, i);
        t4 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t4);
        this.operator$indexSet$2(j, $.getInterceptor$JSNumber(t4).operator$mul$1(t4, s));
        t2 = a.operator$index$1(i);
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
        t5 = a.operator$index$1(k);
        t5 = $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, i);
        t5 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t5);
        this.operator$indexSet$2(k, $.getInterceptor$JSNumber(t5).operator$mul$1(t5, s));
      }
    }
  },
  is$quat: true
};

$$.init_autogenerated_anon = {"": "Closure;",
  call$0: function() {
    return 480;
  },
  is$Function: true
};

$$.init_autogenerated_anon0 = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.__model_viewer_0.get$xtag().set$height(e);
  },
  is$Function: true
};

$$.init_autogenerated_anon1 = {"": "Closure;",
  call$0: function() {
    return 640;
  },
  is$Function: true
};

$$.init_autogenerated_anon2 = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.__model_viewer_0.get$xtag().set$width(e);
  },
  is$Function: true
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  is$Function: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  is$Function: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  is$Function: true
};

$$._startup_anon = {"": "Closure;",
  call$1: function(grantedBytes) {
    window.requestFileSystem$4(0, grantedBytes, $._onFileSystemCreated, $._onFileSystemError);
  },
  is$Function: true
};

$$._startup_anon0 = {"": "Closure;",
  call$1: function(error) {
    $.print(error);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, t3, length$, i, t2;
    t1 = this.values_1;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout0(1, value, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    length$ = t1.length;
    for (i = 0; i < length$; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t3.add$1(t1, value);
    t1 = this.copies_2;
    $.getInterceptor$JSArray(t1).add$1(t1, null);
    return length$;
  },
  call$1$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        value = env0;
        break;
      case 2:
        length$ = env3;
        t3 = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.values_1;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length$ = t3.get$length(t1);
      case 2:
        var t1, value, t3, length$, i, t2;
        state0 = 0;
        for (i = 0; $.ltB(i, length$); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.getInterceptor$JSArray(t1).add$1(t1, value);
        t1 = this.copies_2;
        $.getInterceptor$JSArray(t1).add$1(t1, null);
        return length$;
    }
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, x);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.is$Date)
      throw $.$$throw($.UnimplementedError$("structured clone of Date"));
    if (typeof e === "object" && e !== null && !!e.is$RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.is$File())
      return e;
    if (typeof e === "object" && e !== null && e.is$Blob())
      return e;
    if (typeof e === "object" && e !== null && e.is$FileList())
      return e;
    if (typeof e === "object" && e !== null && e.is$ImageData())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.is$Map()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (!(t2 == null))
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.is$List())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      length$ = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (!(copy == null)) {
        if (true === copy) {
          copy = new Array(length$);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < length$; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (!(elementCopy == null ? element == null : elementCopy === element)) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array(length$);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
              return this.call$1$bailout(3, e, t3, elementCopy, $.CONSTANT0, length$, copy0, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array(length$);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(4, e, length$, i, copy, $.CONSTANT0);
      for (; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
    switch (state0) {
      case 1:
        e = env0;
        break;
      case 2:
        t2 = env2;
        length$ = env1;
        e = env0;
        break;
      case 3:
        i = env9;
        copy = env8;
        t4 = env7;
        slot = env6;
        copy0 = env5;
        length$ = env4;
        t2 = env3;
        elementCopy = env2;
        t3 = env1;
        e = env0;
        break;
      case 4:
        t2 = env4;
        copy = env3;
        i = env2;
        length$ = env1;
        e = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.is$Date)
          throw $.$$throw($.UnimplementedError$("structured clone of Date"));
        if (typeof e === "object" && e !== null && !!e.is$RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.is$File())
          return e;
        if (typeof e === "object" && e !== null && e.is$Blob())
          return e;
        if (typeof e === "object" && e !== null && e.is$FileList())
          return e;
        if (typeof e === "object" && e !== null && e.is$ImageData())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.is$Map()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (!(t2 == null))
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, slot, t2, e, length$, t4, copy, t3, i, element, elementCopy, copy0, j;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.is$List()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(e);
              length$ = t2.get$length(e);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t4 = this.readSlot_6;
              copy = t4.call$1(slot);
              if (!(copy == null)) {
                if (true === copy) {
                  copy = new Array(length$);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t3 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t3.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.ltB(i, length$))
                              break L0;
                            element = t2.operator$index$1(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                              switch (state0) {
                                case 0:
                                  copy0 = t4.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array(length$);
                                    t3.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$JSArray(copy0), j = 0; j < i; ++j)
                                    t1.operator$indexSet$2(copy0, j, t2.operator$index$1(e, j));
                                  t1.operator$indexSet$2(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t3.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array(length$);
                t3.call$2(slot, copy);
                i = 0;
              }
            case 4:
              state0 = 0;
              for (t1 = $.getInterceptor$JSArray(copy); $.ltB(i, length$); ++i)
                t1.operator$indexSet$2(copy, i, this.call$1(t2.operator$index$1(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  is$Function: true
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true) {
      t2 = this.result_1;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.getInterceptor$JSArray(t1).add$1(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  },
  is$Function: true
};

$$._convertModel_anon = {"": "Closure;request_0",
  call$1: function(_) {
    if (!($._fileSystem == null))
      $._writeText("model.mesh", this.request_0.get$responseText()).then$1(new $._convertModel__anon());
  },
  is$Function: true
};

$$._convertModel__anon = {"": "Closure;",
  call$1: function(modelUrl) {
    $._modelViewerComponent.loadModelFromUrl$1(modelUrl);
  },
  is$Function: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  is$Function: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  is$Function: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.print("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.print("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  },
  is$Function: true
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  is$Function: true
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.get$topEventLoop();
    t1 = t2.get$activeTimerCount();
    t2.set$activeTimerCount($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
  },
  is$Function: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.count_0;
    t1.count_0 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, 1);
  },
  is$Function: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  is$Function: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  is$Function: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  is$Function: true
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  },
  is$Function: true
};

$$.Template_remove_anon = {"": "Closure;",
  call$1: function(t) {
    return t.remove$0();
  },
  is$Function: true
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    if ($.gtB(t1.i_1, 0)) {
      t2 = t1.sb_0;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, key);
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ": ");
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    t3 = t1.i_1;
    t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
  },
  is$Function: true
};

$$._writeText_anon = {"": "Closure;data_1,completer_2",
  call$1: function(fileEntry) {
    fileEntry.createWriter$1(new $._writeText__anon(this.data_1, this.completer_2, fileEntry));
  },
  is$Function: true
};

$$._writeText__anon = {"": "Closure;data_3,completer_4,fileEntry_5",
  call$1: function(fileWriter) {
    var t1, t2;
    t1 = {};
    t1.truncated_0 = false;
    t2 = fileWriter.get$on().get$writeEnd();
    t1 = new $._writeText___anon(t1, this.data_3, this.completer_4, this.fileEntry_5, fileWriter);
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    fileWriter.truncate$1(0);
  },
  is$Function: true
};

$$._writeText___anon = {"": "Closure;box_0,data_6,completer_7,fileEntry_8,fileWriter_9",
  call$1: function(_) {
    var t1 = this.box_0;
    if (t1.truncated_0 === true)
      this.completer_7.complete$1(this.fileEntry_8.toUrl$0());
    else {
      this.fileWriter_9.write$1(this.data_6);
      t1.truncated_0 = true;
    }
  },
  is$Function: true
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  is$Function: true
};

$$.ModelViewerComponent_loadModelFromUrl_anon = {"": "Closure;this_0",
  call$2: function(type, resource) {
    var t1, layout, t2;
    t1 = resource.get$meshData();
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "meshes");
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    layout = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "attributes");
    t1 = this.this_0;
    t2 = new $.ModelViewerComponent_loadModelFromUrl__anon(t1);
    $.getInterceptor$JSArray(layout).forEach$1(layout, t2);
    t1.get$_model().get$vertexArray().uploadData$2(resource.get$vertexArray(), 35044);
    t1.get$_model().get$indexArray().uploadData$2(resource.get$indexArray(), 35044);
    t2 = resource.get$numIndices();
    t1.get$_model().set$count(t2);
    t2 = t1.get$_model();
    t1.get$_inputLayout().set$mesh(t2);
  },
  is$Function: true
};

$$.ModelViewerComponent_loadModelFromUrl__anon = {"": "Closure;this_1",
  call$2: function(key, value) {
    var attributeName, t1, attribute, t2;
    switch (key) {
      case "POSITION":
        attributeName = "vPosition";
        break;
      case "NORMAL":
        attributeName = "vNormal";
        break;
      case "BITANGENT":
        attributeName = "vBitangent";
        break;
      case "TANGENT":
        attributeName = "vTangent";
        break;
      case "TEXCOORD0":
        attributeName = "vTexCoord0";
        break;
      default:
        throw $.$$throw($.FallThroughError$());
    }
    t1 = $.getInterceptor$JSStringJSArray(value);
    attribute = $.SpectreMeshAttribute$(attributeName, t1.operator$index$1(value, "type"), t1.operator$index$1(value, "numElements"), t1.operator$index$1(value, "offset"), t1.operator$index$1(value, "stride"), t1.operator$index$1(value, "normalized"));
    t2 = this.this_1.get$_model().get$attributes();
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, attributeName, attribute);
  },
  is$Function: true
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1, t2;
    t1 = this.f_1;
    t2 = this.this_0;
    return t1.call$2(key, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, key));
  },
  is$Function: true
};

$$.Template_insert_anon = {"": "Closure;",
  call$1: function(t) {
    return t.insert$0();
  },
  is$Function: true
};

$$.Template_create_anon = {"": "Closure;",
  call$1: function(t) {
    return t.create$0();
  },
  is$Function: true
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  },
  is$Function: true
};

$$.GraphicsContext__prepareInputs_anon = {"": "Closure;this_0",
  call$1: function(element) {
    var t1, t2, t3, vb, t4;
    t1 = this.this_0;
    t2 = t1.get$_vertexBufferHandles();
    t3 = element.get$vboSlot();
    vb = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t3);
    if (vb == null) {
      $.get$spectreLog().Error$1("Prepare for draw referenced a null vertex buffer object");
      return;
    }
    t1.get$device().get$gl().enableVertexAttribArray$1(element.get$attributeIndex());
    vb._bind$0();
    t2 = t1.get$device().get$gl();
    t3 = element.get$attributeIndex();
    t4 = element.get$attributeFormat();
    t2.vertexAttribPointer$6(t3, t4.get$count(), t4.get$type(), t4.get$normalized(), element.get$attributeStride(), element.get$attributeOffset());
    t1 = t1.get$_enabledVertexAttributeArrays();
    t3 = element.get$attributeIndex();
    $.getInterceptor$JSArray(t1).add$1(t1, t3);
  },
  is$Function: true
};

$$.Stream_last_anon = {"": "Closure;box_0",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  is$Function: true
};

$$.Stream_last_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1 === true) {
      this.future_1._setValue$1(t1.result_0);
      return;
    }
    this.future_1._setError$1($.AsyncError$($.StateError$("No elements"), null));
  },
  is$Function: true
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.is$Element();
  },
  is$Function: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.print("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (!(t1 == null))
      $.print("Stack Trace:\n" + $.S(t1) + "\n");
  },
  is$Function: true
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$1: function(_) {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  },
  is$Function: true
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return el.remove$0();
  },
  is$Function: true
};

$$.InputLayout__refresh_anon = {"": "Closure;this_0",
  call$2: function(name$, shaderProgramAttribute) {
    var t1, t2, meshAttribute, element;
    t1 = this.this_0;
    t2 = t1.get$_mesh().get$attributes();
    meshAttribute = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, name$);
    if (meshAttribute == null) {
      t1 = t1.get$missingAttributes();
      $.getInterceptor$JSArray(t1).add$1(t1, shaderProgramAttribute);
    } else {
      element = $.InputLayoutElement$(0, shaderProgramAttribute.get$location(), meshAttribute.get$offset(), meshAttribute.get$stride(), meshAttribute.get$deviceFormat());
      t1 = t1.get$elements();
      $.getInterceptor$JSArray(t1).add$1(t1, element);
    }
  },
  is$Function: true
};

$$.ShaderProgram_logAttributes_anon = {"": "Closure;",
  call$1: function(attribute) {
    $.get$spectreLog().Info$1("Attributes[" + $.S(attribute.get$index()) + "] " + $.S(attribute.get$type()) + " " + $.S(attribute.get$name()) + " (" + $.S(attribute.get$size()) + ")");
  },
  is$Function: true
};

$$.ShaderProgram_forEachAttribute_anon = {"": "Closure;callback_0",
  call$2: function(_, attribute) {
    this.callback_0.call$1(attribute);
  },
  is$Function: true
};

$$.ShaderProgram_logSamplers_anon = {"": "Closure;",
  call$1: function(sampler) {
    $.get$spectreLog().Info$1("Sampler[" + $.S(sampler.get$index()) + "] " + $.S(sampler.get$type()) + " " + $.S(sampler.get$name()) + " (" + $.S(sampler) + ")");
  },
  is$Function: true
};

$$.ShaderProgram_forEachSampler_anon = {"": "Closure;callback_0",
  call$2: function(_, sampler) {
    this.callback_0.call$1(sampler);
  },
  is$Function: true
};

$$.ShaderProgram_logUniforms_anon = {"": "Closure;",
  call$1: function(uniform) {
    $.get$spectreLog().Info$1("Uniforms[" + $.S(uniform.get$index()) + "] " + $.S(uniform.get$type()) + " " + $.S(uniform.get$name()) + " (" + $.S(uniform.get$size()) + ")");
  },
  is$Function: true
};

$$.ShaderProgram_forEachUniform_anon = {"": "Closure;callback_0",
  call$2: function(_, uniform) {
    this.callback_0.call$1(uniform);
  },
  is$Function: true
};

$$.ResourceManager_loadResource_anon = {"": "Closure;rb_0,completer_1",
  call$1: function(result) {
    var t1 = this.rb_0;
    result.set$handle(t1);
    result.set$completer(this.completer_1);
    t1.load$1(result);
  },
  is$Function: true
};

$$._ImageResourceLoader_load_anon = {"": "Closure;url_0,image_1,completer_2",
  call$1: function(event$) {
    var r = $._ResourceLoaderResult$(true, this.image_1);
    $.get$spectreLog().Info$1("Request for " + $.S(this.url_0) + " succesful.");
    this.completer_2.complete$1(r);
  },
  is$Function: true
};

$$._ImageResourceLoader_load_anon0 = {"": "Closure;url_3,image_4,completer_5",
  call$1: function(event$) {
    var r = $._ResourceLoaderResult$(false, this.image_4);
    $.get$spectreLog().Info$1("Request for " + $.S(this.url_3) + " failed..");
    this.completer_5.complete$1(r);
  },
  is$Function: true
};

$$._HttpResourceLoader_load_anon = {"": "Closure;url_0,completer_1,req_2",
  call$1: function(event$) {
    var t1, r;
    t1 = this.req_2.get$response();
    r = $._ResourceLoaderResult$(!(t1 == null), t1);
    $.get$spectreLog().Info$1("Request for " + $.S(this.url_0) + " succesful.");
    this.completer_1.complete$1(r);
  },
  is$Function: true
};

$$._HttpResourceLoader_load_anon0 = {"": "Closure;url_3,completer_4,req_5",
  call$1: function(event$) {
    var r = $._ResourceLoaderResult$(false, this.req_5.get$response());
    $.get$spectreLog().Info$1("Request for " + $.S(this.url_3) + " failed.");
    this.completer_4.complete$1(r);
  },
  is$Function: true
};

$$.ResourceBase__fireUpdated_anon = {"": "Closure;this_0",
  call$1: function(cb) {
    cb.call$2(1, this.this_0);
  },
  is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, t3, length$, i, t2;
    t1 = this.values_0;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout2(1, value, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    length$ = t1.length;
    for (i = 0; i < length$; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t3.add$1(t1, value);
    t1 = this.copies_1;
    $.getInterceptor$JSArray(t1).add$1(t1, null);
    return length$;
  },
  call$1$bailout2: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        value = env0;
        break;
      case 2:
        length$ = env3;
        t3 = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.values_0;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length$ = t3.get$length(t1);
      case 2:
        var t1, value, t3, length$, i, t2;
        state0 = 0;
        for (i = 0; $.ltB(i, length$); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.getInterceptor$JSArray(t1).add$1(t1, value);
        t1 = this.copies_1;
        $.getInterceptor$JSArray(t1).add$1(t1, null);
        return length$;
    }
  },
  is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
  },
  is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, x);
  },
  is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, t3, length$, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout1(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of Date"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      copy = $.makeLiteralMap([]);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout1(2, e, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        t3 = this.call$1(e[t2]);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= copy.length)
          throw $.ioore(t2);
        copy[t2] = t3;
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      length$ = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array(length$);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout1(4, e, $.CONSTANT0, length$, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout1: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        e = env0;
        break;
      case 2:
        slot = env2;
        copy = env1;
        e = env0;
        break;
      case 3:
        slot = env3;
        length$ = env2;
        t1 = env1;
        e = env0;
        break;
      case 4:
        slot = env4;
        copy = env3;
        length$ = env2;
        t1 = env1;
        e = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of Date"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      case 2:
        if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              copy = $.makeLiteralMap([]);
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)), t2 = $.getInterceptor$JSArray(copy); t1.moveNext$0() === true;) {
                t3 = t1.get$current();
                t2.operator$indexSet$2(copy, t3, this.call$1(e[t3]));
              }
              return copy;
          }
      default:
        var e, slot, copy, t1, t2, t3, length$, i;
        if (state0 === 4 || state0 === 3 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              t1 = $.getInterceptor$JSStringJSArray(e);
              length$ = t1.get$length(e);
            case 3:
              state0 = 0;
              copy = this.mustCopy_4 === true ? new Array(length$) : e;
            case 4:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$JSArray(copy), i = 0; $.ltB(i, length$); ++i)
                t2.operator$indexSet$2(copy, i, this.call$1(t1.operator$index$1(e, i)));
              return copy;
          }
        return e;
    }
  },
  is$Function: true
};

$$.JsonParser_parseNumber_handleLiteral = {"": "Closure;box_0,this_1,start_2",
  call$1: function(position) {
    var t1, t2, t3, literal, value;
    t1 = this.this_1;
    t2 = t1.get$source();
    t3 = this.start_2;
    literal = $.getInterceptor$JSString(t2).substring$2(t2, t3, position);
    value = this.box_0.isDouble_0 === true ? $.double_parse(literal, null) : $.int_parse(literal, null, null);
    t1.get$listener().handleNumber$1(value);
    return position;
  },
  is$Function: true
};

$$.PackResource_load_anon = {"": "Closure;result_0",
  call$1: function(_unused) {
    var t1 = this.result_0;
    t1.get$completer().complete$1(t1.get$handle());
  },
  is$Function: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, t3, remaining;
    t1 = this.values_2;
    t2 = this.pos_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, value);
    t2 = this.box_0;
    t3 = t2.remaining_0;
    remaining = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
    t2.remaining_0 = remaining;
    if ($.eqB(remaining, 0))
      this.completer_1.complete$1(t1);
  },
  is$Function: true
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  },
  is$Function: true
};

$$.ResourceBase__fireUnloaded_anon = {"": "Closure;this_0",
  call$1: function(cb) {
    cb.call$2(1, this.this_0);
  },
  is$Function: true
};

$$.ShaderProgramResource_load_anon = {"": "Closure;box_0,this_1,result_2",
  call$1: function(results) {
    var t1, vsResult, t2, index, fsResult;
    t1 = this.box_0;
    if (t1.fetchedVertex_0 === true) {
      vsResult = $.getInterceptor$JSStringJSArray(results).operator$index$1(results, 0);
      if (vsResult.get$success() === true) {
        t2 = vsResult.get$data();
        this.this_1.set$vertexShaderSource(t2);
      }
      index = 1;
    } else
      index = 0;
    if (t1.fetchedFragment_1 === true) {
      fsResult = $.getInterceptor$JSStringJSArray(results).operator$index$1(results, index);
      if (fsResult.get$success() === true) {
        t1 = fsResult.get$data();
        this.this_1.set$fragmentShaderSource(t1);
      }
    }
    t1 = this.this_1;
    t1._fireUpdated$0();
    t1.set$_isLoaded(true);
    t1 = this.result_2;
    t1.get$completer().complete$1(t1.get$handle());
  },
  is$Function: true
};

$$.ModelViewerComponent_created_autogenerated_anon = {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.get$height();
  },
  is$Function: true
};

$$.ModelViewerComponent_created_autogenerated_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    this.this_1.get$__e3().set$height(e);
  },
  is$Function: true
};

$$.ModelViewerComponent_created_autogenerated_anon1 = {"": "Closure;this_2",
  call$0: function() {
    return this.this_2.get$width();
  },
  is$Function: true
};

$$.ModelViewerComponent_created_autogenerated_anon2 = {"": "Closure;this_3",
  call$1: function(e) {
    this.this_3.get$__e3().set$width(e);
  },
  is$Function: true
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.eq(n.get$tagName(), "COLGROUP");
  },
  is$Function: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    var t1 = this.result_0;
    $.getInterceptor$JSArray(t1).add$1(t1, data);
  },
  is$Function: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  is$Function: true
};

$$.DomPropertyBinding_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$isUrl() === true;
    t3 = e.get$newValue();
    t1.setter$1(t2 ? $.sanitizeUri(t3) : t3);
  },
  is$Function: true
};

$$.watch_anon = {"": "Closure;",
  call$0: function() {
  },
  is$Function: true
};

$$.watch_anon0 = {"": "Closure;target_0",
  call$0: function() {
    return this.target_0;
  },
  is$Function: true
};

$$.watch_anon1 = {"": "Closure;watcher_1",
  call$0: function() {
    return $._unregister(this.watcher_1);
  },
  is$Function: true
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3, element), $._cancelAndError(t2.subscription_0, t3), null);
  },
  is$Function: true
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return this.match_3.call$1(this.element_4);
  },
  is$Function: true
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5,element_6",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(this.element_6);
    }
  },
  is$Function: true
};

$$.Stream_contains_anon0 = {"": "Closure;future_7",
  call$0: function() {
    this.future_7._setValue$1(false);
  },
  is$Function: true
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  is$Function: true
};

$$.Uri_hashCode_combine = {"": "Closure;",
  call$2: function(part, current) {
    var t1, t2;
    t1 = $.getInterceptor$JSNumber(current).operator$mul$1(current, 31);
    t2 = $.getInterceptor(part).get$hashCode(part);
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    return $.getInterceptor$JSNumber(t2).operator$and$1(t2, 1073741823);
  },
  is$Function: true
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  is$Function: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    this.port_1.close$0();
    t1 = typeof value === "object" && value !== null && !!value.is$Exception;
    t2 = this.completer_0;
    if (t1)
      t2.completeError$1(value);
    else
      t2.complete$1(value);
  },
  is$Function: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.get$isWorker() === true)
      $globalState.get$mainManager().postMessage$1(workerMessage);
    else {
      t2 = $globalState.get$managers();
      t1 = t1.get$_workerId();
      manager = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1);
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  },
  is$Function: true
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  is$Function: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  is$Function: true
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    var t1 = this.values_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, v);
  },
  is$Function: true
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  },
  is$Function: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
  },
  is$Function: true
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  is$Function: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.get$isolates();
    t5 = t2.get$_isolateId();
    isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t5);
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.get$currentContext() == null) && !$.eqB($globalState.get$currentContext().get$id(), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  is$Function: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  is$Function: true
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    var t1 = this.keys_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, k);
  },
  is$Function: true
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  },
  is$Function: true
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2, t3;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    t3 = t2._dispatch$1(key);
    t2 = t2._dispatch$1(val);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t3, t2);
  },
  is$Function: true
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_Timer(0, new $._EventLoop__runHelper_next_anon(this));
  },
  is$Function: true
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  },
  is$Function: true
};

$$.BoundClosure = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure1 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure2 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1($);
  }
};
$$.BoundClosure3 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1($);
  }
};
$$.BoundClosure4 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};
$$.BoundClosure5 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};
$$.BoundClosure6 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};
$$.BoundClosure7 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};
$$.BoundClosure8 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};
$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string;
  if (typeof strings !== "object" || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  if (!strings.constructor === Array) {
    strings = $.List_List$from(strings);
    $.setRuntimeTypeInfo(strings, []);
  }
  length$ = strings.length;
  for (i = 0; i < length$; ++i) {
    if (i >= strings.length)
      throw $.ioore(i);
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      strings = env2;
      length$ = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      if (!(!(strings == null) && strings.constructor === Array)) {
        strings = $.List_List$from(strings);
        $.setRuntimeTypeInfo(strings, []);
      }
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      var strings, t1, length$, i, string;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        string = t1.operator$index$1(strings, i);
        if (!(typeof string === "string"))
          throw $.$$throw($.ArgumentError$(string));
      }
      return strings;
  }
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $globalState.get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $globalState.get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.set$rootContext(rootContext);
  $globalState.set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $globalState.get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var t1, t2, src;
  for (t1 = $.CONSTANT0.get$iterator(document.getElementsByTagName('script')); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    src = t2 && t2.src;
    if (!(src == null)) {
      t2 = $.getInterceptor$JSString(src);
      t2 = t2.endsWith$1(src, "test_controller.js") !== true && t2.endsWith$1(src, "dart.js") !== true;
    } else
      t2 = false;
    if (t2)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.operator$index$1(msg, "command")) {
    case "start":
      t2 = t1.operator$index$1(msg, "id");
      $globalState.set$currentManagerId(t2);
      entryPoint = $[t1.operator$index$1(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.operator$index$1(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.get$topEventLoop().enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.set$currentContext(context);
      $globalState.get$topEventLoop().run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.operator$index$1(msg, "functionName"), t1.operator$index$1(msg, "uri"), t1.operator$index$1(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.operator$index$1(msg, "port") == null))
        t1.operator$index$1(msg, "port").send$2(t1.operator$index$1(msg, "msg"), t1.operator$index$1(msg, "replyTo"));
      $globalState.get$topEventLoop().run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.get$managers();
      t2 = sender.get$id();
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
      sender.terminate$0();
      $globalState.get$topEventLoop().run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.operator$index$1(msg, "msg"));
      break;
    case "print":
      if ($globalState.get$isWorker() === true)
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.print(t1.operator$index$1(msg, "msg"));
      break;
    case "error":
      throw $.$$throw(t1.operator$index$1(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.get$isWorker() === true)
    $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      t1 = msg;
      $.get$globalThis().console.log(t1);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2("spawned", $.lazyPort.toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.getInterceptor$JSNumber(workerId).operator$add$1(workerId, 1));
  worker.set$id(workerId);
  t1 = $globalState.get$managers();
  $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$._ArrayIterator$ = function(_list) {
  return new $._ArrayIterator(_list, -1, null);
};

$.gtB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a <= b : $.le$slow(a, b) === true;
};

$.checkNumbers = function(a, b) {
  if (typeof a === "number")
    if (typeof b === "number")
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash, t1;
  hash = object.$identityHash;
  if (hash == null) {
    t1 = $.Primitives_hashCodeSeed;
    hash = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (!(match == null)) {
      t1 = $.getInterceptor$JSStringJSArray(match);
      if (!(t1.operator$index$1(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (!(match == null)) {
      if (radix === 10 && !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        t1 = $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1);
        digitsPart = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; $.ltB(i, t1.get$length(digitsPart)); ++i)
          if ($.gtB(t1.charCodeAt$1(digitsPart, i), maxCharCode))
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  $.checkString(source);
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if ($.CONSTANT2.get$isNaN(result) === true && !$.eqB(source, "NaN"))
    return handleError.call$1(source);
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_newFixedList = function(length$) {
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT0.get$iterator(codePoints); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.CONSTANT4.operator$shr$1(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT0.get$iterator(charCodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  var t1 = this;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === "string")
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === "string" ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.operator$indexSet$2(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  $._currentIsolate();
  function$ = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = function$;
  return function$;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.propertyTypeCastError = function(value, property) {
  var actualType, t1;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$JSStringJSArray(property);
  throw $.$$throw($.CastErrorImplementation$(actualType, t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.callTypeCast = function(value, property) {
  var t1;
  if (!(value == null))
    t1 = typeof value === "object" && value[property]();
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.getTypeArgumentAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$JSStringJSArray(runtimeType);
  className = t1.operator$index$1(runtimeType, 0).builtin$cls;
  if ($.eqB(t1.get$length(runtimeType), 1))
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.getTypeArgumentAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, t1, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.is$JavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t1.add$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    t1.add$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return t1.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, t2, index, firstArgument;
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSStringJSArray(types), t2 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; $.ltB(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t2.add$1(buffer, ", ");
    t2.add$1(buffer, $.runtimeTypeToString(t1.operator$index$1(types, index)));
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, len, i;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.is$JavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.is$JavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (false)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(3, s, t, typeOfS, t1, true, true);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["is$" + $.S($.runtimeTypeToString(typeOfT))] == null)
    return false;
  if (s.constructor === Array)
    t1 = !t.constructor === Array;
  else
    t1 = true;
  if (t1)
    return true;
  len = s.length;
  if (len !== t.length)
    return false;
  for (i = 1; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.isSubtype$bailout = function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      t = env1;
      s = env0;
      break;
    case 2:
      t2 = env3;
      t1 = env2;
      t = env1;
      s = env0;
      break;
    case 3:
      t2 = env5;
      t1 = env4;
      t3 = env3;
      typeOfS = env2;
      t = env1;
      s = env0;
      break;
    case 4:
      len = env3;
      t1 = env2;
      t = env1;
      s = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = !(s == null);
      if (s == null || t == null)
        return true;
      if ($.eqB(s, t))
        return true;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.getInterceptor$JSStringJSArray(s).operator$index$1(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = !(t == null);
    case 3:
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.getInterceptor$JSStringJSArray(t).operator$index$1(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["is$" + $.S($.runtimeTypeToString(typeOfT))] == null)
        return false;
      if (t1 && s.constructor === Array)
        t1 = !(t2 && t.constructor === Array);
      else
        t1 = true;
      if (t1)
        return true;
      t1 = $.getInterceptor$JSStringJSArray(s);
      len = t1.get$length(s);
    case 4:
      var t, s, t1, t2, typeOfS, t3, typeOfT, len, i;
      state0 = 0;
      t2 = $.getInterceptor$JSStringJSArray(t);
      if (!$.eqB(len, t2.get$length(t)))
        return false;
      for (i = 1; $.ltB(i, len); ++i)
        if (!$.isSubtype(t1.operator$index$1(s, i), t2.operator$index$1(t, i)))
          return false;
      return true;
  }
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === "string")
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT20));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT20)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, t2, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (isCaseSensitive !== true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(0, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.getInterceptor$JSNumber(position).operator$add$1(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.getInterceptor$JSNumber(startIndex).operator$add$1(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === "string")
    return !$.eqB($.CONSTANT1.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === "object" && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT1.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).get$iterator(t1).moveNext$0();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl$immediate(value);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListener__FutureListener$wrap = function(future) {
  return $._FutureListenerWrapper$(future);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, t3, i0;
  t1 = {};
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT16);
  completer = $.Completer_Completer();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  $.setRuntimeTypeInfo(values, []);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    t3 = t2.get$current();
    i0 = i + 1;
    t3.then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.get$future();
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!error.is$AsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, _onData, _onError, _onDone, unsubscribeOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _onData, _onError, _onDone, null);
  t1._ForwardingStreamSubscription$5(_stream, _onData, _onError, _onDone, unsubscribeOnError);
  return t1;
};

$.WhereStream$ = function(source, test, T) {
  var t1 = new $.WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Timer_Timer = function(milliseconds, callback) {
  return $.TimerImpl$(milliseconds, callback);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;)
    if ($.eqB(element, t1.get$current()))
      return true;
  return false;
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.is$List());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.getInterceptor$JSArray(c).get$iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}";
      $.getInterceptor$JSArray(result).add$1(result, t1);
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).get$iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  t1 = new $.Maps__emitMap_anon(t1, result, visiting);
  $.getInterceptor$JSArray(m).forEach$1(m, t1);
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.double_parse = function(source, handleError) {
  return $.Primitives_parseDouble(source, handleError);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === "string") {
    t1 = $.CONSTANT1.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.FallThroughError$ = function() {
  return new $.FallThroughError();
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function(length$) {
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  return new Array(length$);
};

$.List_List$fixedLength = function(length$, fill) {
  var result, t1, i;
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  result = $.Primitives_newFixedList(length$);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.is$JavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length$, fill, result);
  if (!$.eqB(length$, 0) && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length$, fill, result) {
  var i;
  if (!$.eqB(length$, 0) && !(fill == null))
    for (i = 0; i < result.length; ++i)
      $.CONSTANT0.operator$indexSet$2(result, i, fill);
  return result;
};

$.List_List$from = function(other, E) {
  var list, t1;
  list = $.List_List(0, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT4.operator$tdiv$1(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  var t1, t2;
  t1 = $.getInterceptor$JSNumber(currentProbe).operator$add$1(currentProbe, numberOfProbes);
  t2 = $.getInterceptor$JSNumber(length$).operator$sub$1(length$, 1);
  return $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
};

$._HashMapImplKeyIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplValueIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set = function(E) {
  return $.HashSet$(E);
};

$.HashSet$ = function(E) {
  var t1 = new $.HashSet($._HashMapImpl$($.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[0]));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashSetIterator$ = function(set) {
  var t1 = set._backingMap._keys;
  return new $._HashSetIterator($.getInterceptor$JSArray(t1).get$iterator(t1));
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!charCodes.constructor === Array) {
    charCodes = $.List_List$from(charCodes);
    $.setRuntimeTypeInfo(charCodes, []);
  }
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.Blob_Blob = function(blobParts, type, endings) {
  var t1, t2;
  t1 = $ === type;
  if (t1)
    type = null;
  t2 = $ === endings;
  if (t2)
    endings = null;
  if (t1)
    return $.Blob__create(blobParts, null, null);
  if (t2)
    return $.Blob__create(blobParts, type, null);
  return $.Blob__create(blobParts, type, endings);
};

$.Blob__create = function(blobParts, type, endings) {
  var t1, bag;
  t1 = type == null;
  if (t1 && endings == null)
    return new Blob(blobParts);
  bag = {};
  if (!t1)
    bag["type"] = type;
  if (!(endings == null))
    bag["endings"] = endings;
  return new Blob(blobParts, bag);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, t2, parentTag, temp, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (!(match == null)) {
    t1 = match.group$1(1);
    tag = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
      t1 = window.get$navigator().get$userAgent();
      t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
      t1 = t2;
    } else
      t1 = false;
    if (t1 && $.CONSTANT17.containsKey$1(tag) === true)
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.CONSTANT18.operator$index$1(tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $.Element_Element$tag(parentTag);
  temp.set$innerHtml(html);
  t1 = temp.get$children();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
    t1 = temp.get$children();
    element = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
  } else {
    if ($.eqB(parentTag, "html")) {
      t1 = temp.get$children();
      t2 = $.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 2);
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = temp.get$children();
      t2 = $.eqB(tag, "head") ? 0 : 1;
      element = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
    } else {
      $._ElementFactoryProvider__singleNode(temp.get$children());
      element = null;
    }
  }
  element.remove$0();
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, table, element;
  div = $.Element_Element$tag("div");
  div.set$innerHtml("<table>" + html + "</table>");
  table = $._ElementFactoryProvider__singleNode(div.get$children());
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__singleNode(table.get$rows()).get$cells());
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode(table.get$rows());
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode(table.get$tBodies());
      break;
    case "thead":
      element = table.get$tHead();
      break;
    case "tfoot":
      element = table.get$tFoot();
      break;
    case "caption":
      element = table.get$caption();
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__getColgroup(table).get$children());
      break;
  }
  element.remove$0();
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  var t1, t2;
  t1 = table.get$children();
  t2 = new $._ElementFactoryProvider__getColgroup_anon();
  t2 = $.getInterceptor$JSArray(t1).where$1(t1, t2);
  return $._ElementFactoryProvider__singleNode($.getInterceptor$JSArray(t2).toList$0(t2));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.eqB(t1.get$length(list), 1))
    return t1.operator$index$1(list, 0);
  throw $.$$throw($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " " + "top level elements but 1 expected"));
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.Float32Array_Float32Array = function(length$) {
  return new Float32Array(length$);
};

$.Float32Array_Float32Array$fromList = function(list) {
  return new Float32Array(list);
};

$.FormData_FormData = function(form) {
  var t1 = $ === form;
  if (t1)
    form = null;
  if (t1)
    return $.FormData__create($);
  return $.FormData__create(form);
};

$.FormData__create = function(form) {
  var t1 = $ === form;
  if (t1)
    form = null;
  if (t1)
    return new FormData();
  return new FormData(form);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = document.$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Uint16Array_Uint16Array$fromList = function(list) {
  return new Uint16Array(list);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.Window__isDartLocation = function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    t1 = typeof t1 === "object" && t1 !== null && t1.is$Location();
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$._FrameSetElementEvents$ = function(_ptr) {
  return new $._FrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Firefox", 0);
};

$._Device_isWebKit = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor$JSString(t1).contains$2(t1, "WebKit", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = window;
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function(location$) {
  var t1 = window.get$location();
  if (location$ == null ? t1 == null : location$ === t1)
    return location$;
  else
    return $._LocationCrossFrame$(location$);
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.getInterceptor$JSStringJSArray(array).get$length(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object, t1;
  if (dict == null)
    return;
  object = {};
  t1 = new $.convertDartToNative_Dictionary_anon(object);
  $.getInterceptor$JSArray(dict).forEach$1(dict, t1);
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values, copies;
  values = [];
  copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot(values, copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.geB(startIndex, t1.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    if ($.eqB(t1.operator$index$1(a, i), element))
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== "number")
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, t1, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.getInterceptor$JSNumber(start).operator$add$1(start, length$);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.gtB(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    accumulator.push(t1.operator$index$1(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$.parse = function(json, reviver) {
  var listener = reviver == null ? $.BuildJsonListener$() : $.ReviverJsonListener$(reviver);
  $.JsonParser$(json, listener).parse$0();
  return listener.get$result();
};

$.BuildJsonListener$ = function() {
  return new $.BuildJsonListener([], null, null, null);
};

$.ReviverJsonListener$ = function(reviver) {
  return new $.ReviverJsonListener(reviver, [], null, null, null);
};

$.JsonParser$ = function(source, listener) {
  return new $.JsonParser(source, listener);
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.Uri$ = function(uri) {
  var t1, t2;
  t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  t2 = $.getInterceptor$JSStringJSArray(t1);
  return new $.Uri($.Uri__emptyIfNull(t2.operator$index$1(t1, 1)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 2)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 3)), $.Uri__parseIntOrZero(t2.operator$index$1(t1, 4)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 5)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 6)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  return !(val == null) ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  if (!(val == null) && !$.eqB(val, ""))
    return $.int_parse(val, null, null);
  else
    return 0;
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  var t1, t2;
  if (!("" === test)) {
    t1 = first == null ? "null" : first;
    t2 = $.getInterceptor$JSArray(sb);
    t2.add$1(sb, t1);
    t2.add$1(sb, second == null ? "null" : second);
  }
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$._convertModel = function(_) {
  var formData, request;
  formData = $.FormData_FormData(document.query$1("form"));
  request = $.HttpRequest_HttpRequest();
  request.open$2("POST", "api/convert");
  request.get$onLoadEnd().listen$1(new $._convertModel_anon(request));
  request.send$1(formData);
};

$._onUpdate = function(time) {
  $._modelViewerComponent.update$1(time);
  $._modelViewerComponent.draw$0();
  window.requestAnimationFrame$1($._onUpdate);
};

$._startup = function() {
  $._modelViewerComponent = document.query$1("#model_viewer").get$xtag();
  $._modelViewerComponent.loadModelFromUrl$1("meshes/cube.mesh");
  document.query$1("#convertModel").get$onClick().listen$1($._convertModel);
  window.get$webkitStorageInfo().requestQuota$4(0, 2097152, new $._startup_anon(), new $._startup_anon0());
  window.requestAnimationFrame$1($._onUpdate);
};

$._onFileSystemCreated = function(fileSystem) {
  $._fileSystem = fileSystem;
};

$._onFileSystemError = function(error) {
  var messageCode;
  switch (error.get$code()) {
    case 10:
      messageCode = "Quota Exceeded";
      break;
    case 1:
      messageCode = "Not found ";
      break;
    case 2:
      messageCode = "Security Error";
      break;
    case 9:
      messageCode = "Invalid Modificaiton";
      break;
    case 7:
      messageCode = "Invalid State";
      break;
    default:
      messageCode = "Unknown error";
      break;
  }
  $.print("Filesystem error: " + messageCode);
};

$._writeText = function(fileName, text) {
  var data, completer;
  data = $.Blob_Blob([text], "text/plain", $);
  completer = $.Completer_Completer();
  $.makeLiteralMap(["create", true]);
  $._fileSystem.get$root().getFile$4$errorCallback$options$successCallback(fileName, $._onFileSystemError, $.makeLiteralMap(["create", true]), new $._writeText_anon(data, completer));
  return completer.get$future();
};

$.main = function() {
  window.setTimeout$2($._startup, 0);
};

$.init_autogenerated = function() {
  var t1, _root, __t;
  t1 = {};
  _root = document.get$body();
  t1.__model_viewer_0 = null;
  __t = $.Template$(_root);
  t1.__model_viewer_0 = _root.query$1("#model_viewer");
  __t.oneWayBind$3(new $.init_autogenerated_anon(), new $.init_autogenerated_anon0(t1), false);
  __t.oneWayBind$3(new $.init_autogenerated_anon1(), new $.init_autogenerated_anon2(t1), false);
  $.ModelViewerComponent$forElement(t1.__model_viewer_0);
  __t.component$1(t1.__model_viewer_0);
  _root.query$1("#convertModel");
  __t.create$0();
  __t.insert$0();
};

$.main0 = function() {
  $.main();
  $.init_autogenerated();
};

$.ModelViewerComponent$forElement = function(e) {
  var t1 = new $.ModelViewerComponent(null, null, null, 320, 320, 240, 240, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.Blend_isValid = function(value) {
  switch (value) {
    case 0:
    case 1:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 32769:
    case 32770:
      return true;
  }
  return false;
};

$.BlendOperation_isValid = function(value) {
  if ($.eqB(value, 32774))
    return true;
  else if ($.eqB(value, 32779))
    return true;
  else if ($.eqB(value, 32778))
    return true;
  return false;
};

$.BlendState$opaque = function(name$, device) {
  return new $.BlendState(false, 1, 1, 1, 1, 32774, 0, 1, 32774, 0, 1, true, true, true, true, device, name$);
};

$.Camera$ = function() {
  var t1 = new $.Camera(null, null, null, null, null, null, null);
  t1.Camera$0();
  return t1;
};

$.CompareFunction_isValid = function(value) {
  switch (value) {
    case 519:
    case 514:
    case 516:
    case 518:
    case 513:
    case 515:
    case 512:
    case 517:
      return true;
  }
  return false;
};

$.CullMode_isValid = function(value) {
  if ($.eqB(value, 0))
    return true;
  else if ($.eqB(value, 1028))
    return true;
  else if ($.eqB(value, 1029))
    return true;
  return false;
};

$.DepthState$depthWrite = function(name$, device) {
  return new $.DepthState(true, true, 515, device, name$);
};

$.FragmentShader$ = function(name$, device) {
  var t1 = new $.FragmentShader("", null, null, true, device, name$);
  t1.FragmentShader$2(name$, device);
  return t1;
};

$.FrontFace_isValid = function(value) {
  return $.eqB(value, 2304) || $.eqB(value, 2305);
};

$.GraphicsContext$ = function(device) {
  var t1 = new $.GraphicsContext(device, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.GraphicsContext$1(device);
  return t1;
};

$.GraphicsDeviceCapabilities$_fromContext = function(gl) {
  var t1 = new $.GraphicsDeviceCapabilities(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.GraphicsDeviceCapabilities$_fromContext$1(gl);
  return t1;
};

$.GraphicsDevice$ = function(gl) {
  var t1 = new $.GraphicsDevice(null, null, null, $.Set_Set($.DeviceChild));
  t1.GraphicsDevice$1(gl);
  return t1;
};

$.IndexBuffer$ = function(name$, device) {
  var t1 = new $.IndexBuffer(null, null, null, 35048, 0, device, name$);
  t1.IndexBuffer$2(name$, device);
  return t1;
};

$.InputLayoutElement$ = function(vboSlot, attributeIndex, attributeOffset, attributeStride, attributeFormat) {
  return new $.InputLayoutElement(vboSlot, attributeIndex, attributeOffset, attributeStride, attributeFormat);
};

$.InputLayout$ = function(name$, device) {
  var t1, t2;
  t1 = $.List_List(0, $.InputLayoutElement);
  $.setRuntimeTypeInfo(t1, [$.InputLayoutElement]);
  t2 = $.List_List(0, $.ShaderProgramAttribute);
  $.setRuntimeTypeInfo(t2, [$.ShaderProgramAttribute]);
  return new $.InputLayout(t1, t2, null, null, device, name$);
};

$.PrintLogger$ = function() {
  return new $.PrintLogger();
};

$.SpectreMeshAttribute$ = function(name$, componentType, componentCount, offset, stride, normalized) {
  return new $.SpectreMeshAttribute(name$, componentType, componentCount, offset, stride, normalized);
};

$.SingleArrayIndexedMesh$ = function(name$, device) {
  return new $.SingleArrayIndexedMesh(null, null, $.Map_Map($.String, $.SpectreMeshAttribute), 0, 4, device, name$);
};

$.MouseKeyboardCameraController$ = function() {
  var t1 = new $.MouseKeyboardCameraController(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.MouseKeyboardCameraController$0();
  return t1;
};

$.RasterizerState$cullClockwise = function(name$, device) {
  return new $.RasterizerState(1029, 2305, 0, 0, false, device, name$);
};

$.RenderTarget$ = function(name$, device) {
  return new $.RenderTarget(36160, 36006, null, null, null, false, device, name$);
};

$.ResourceEvents$ = function() {
  var t1 = new $.ResourceEvents(null, null);
  t1.ResourceEvents$0();
  return t1;
};

$.MeshResource$ = function(url, rm) {
  var t1 = new $.MeshResource(null, null, null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  return t1;
};

$.ShaderResource$ = function(url, rm) {
  var t1 = new $.ShaderResource(null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  t1.ShaderResource$2(url, rm);
  return t1;
};

$.ShaderProgramResource$ = function(url, rm) {
  var t1 = new $.ShaderProgramResource(null, null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  t1.ShaderProgramResource$2(url, rm);
  return t1;
};

$.ImageResource$ = function(url, rm) {
  var t1 = new $.ImageResource(null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  return t1;
};

$.PackResource$ = function(url, rm) {
  var t1 = new $.PackResource(null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  t1.PackResource$2(url, rm);
  return t1;
};

$.RenderConfigResource$ = function(url, rm) {
  var t1 = new $.RenderConfigResource(null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  t1.RenderConfigResource$2(url, rm);
  return t1;
};

$.SceneResource$ = function(url, rm) {
  var t1 = new $.SceneResource(null, null, url, null, rm);
  t1.ResourceBase$2(url, rm);
  t1.SceneResource$2(url, rm);
  return t1;
};

$._ResourceLoaderResult$ = function(success, data) {
  var t1 = new $._ResourceLoaderResult(success, data, null, null);
  t1._ResourceLoaderResult$2(success, data);
  return t1;
};

$._ImageResourceLoader$ = function() {
  return new $._ImageResourceLoader();
};

$._MeshResourceLoader$ = function() {
  return new $._MeshResourceLoader();
};

$._ShaderResourceLoader$ = function() {
  return new $._ShaderResourceLoader();
};

$._ShaderProgramResourceLoader$ = function() {
  return new $._ShaderProgramResourceLoader();
};

$._PackResourceLoader$ = function() {
  return new $._PackResourceLoader();
};

$._RenderConfigResourceLoader$ = function() {
  return new $._RenderConfigResourceLoader();
};

$._SceneResourceLoader$ = function() {
  return new $._SceneResourceLoader();
};

$.ResourceLoaders_urlExtension = function(URL) {
  var chunks, t1;
  chunks = $.getInterceptor$JSString(URL).split$1(URL, ".");
  t1 = $.getInterceptor$JSStringJSArray(chunks);
  if ($.gtB(t1.get$length(chunks), 0))
    return t1.get$last(chunks);
  return "";
};

$.ResourceLoaders$ = function() {
  var t1 = new $.ResourceLoaders(null);
  t1.ResourceLoaders$0();
  return t1;
};

$.ResourceManager$ = function() {
  return new $.ResourceManager($.ResourceLoaders$(), $.Set_Set($.ResourceBase), $.Map_Map($.String, $.ResourceBase), "");
};

$.ShaderProgramUniform$ = function(name$, index, type, size, location$, _apply) {
  return new $.ShaderProgramUniform(name$, index, type, size, location$, _apply);
};

$.ShaderProgramSampler$ = function(name$, index, type, size, location$) {
  return new $.ShaderProgramSampler(name$, index, type, size, location$, 0);
};

$.ShaderProgramAttribute$ = function(name$, index, type, size, _location) {
  return new $.ShaderProgramAttribute(name$, index, type, size, _location);
};

$.ShaderProgram$ = function(name$, device) {
  return new $.ShaderProgram($.Map_Map($.String, $.ShaderProgramUniform), $.Map_Map($.String, $.ShaderProgramAttribute), $.Map_Map($.String, $.ShaderProgramSampler), false, "", null, null, null, device, name$);
};

$.VertexBuffer$ = function(name$, device) {
  var t1 = new $.VertexBuffer(null, null, null, 35048, 0, device, name$);
  t1.VertexBuffer$2(name$, device);
  return t1;
};

$.VertexShader$ = function(name$, device) {
  var t1 = new $.VertexShader("", null, null, true, device, name$);
  t1.VertexShader$2(name$, device);
  return t1;
};

$.Viewport$ = function(name$, device) {
  return new $.Viewport(0, 0, 640, 480, 0, 1, device, name$);
};

$.makeLookAt = function(cameraPosition, cameraFocusPosition, upDirection) {
  var t1, z, x, y, r, t2, rotatedEye;
  t1 = $.getInterceptor$JSNumber(cameraPosition);
  z = t1.operator$sub$1(cameraPosition, cameraFocusPosition);
  z.normalize$0();
  x = upDirection.cross$1(z);
  x.normalize$0();
  y = z.cross$1(x);
  y.normalize$0();
  r = $.mat4$zero();
  r.operator$index$1(0).set$xyz(x);
  r.operator$index$1(1).set$xyz(y);
  r.operator$index$1(2).set$xyz(z);
  r.operator$index$1(3).set$w(1);
  r = r.transposed$0();
  t1 = t1.operator$negate$0(cameraPosition);
  t2 = $.getInterceptor$JSNumber(r);
  rotatedEye = t2.operator$mul$1(r, t1);
  t2.operator$index$1(r, 3).set$xyz(rotatedEye);
  return r;
};

$.makePerspective = function(fov_y_radians, aspect_ratio, znear, zfar) {
  var t1, height, width;
  t1 = $.tan(fov_y_radians * 0.5, null);
  height = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, znear);
  t1 = $.getInterceptor$JSNumber(height);
  width = t1.operator$mul$1(height, aspect_ratio);
  return $.makeFrustum($.getInterceptor$JSNumber(width).operator$negate$0(width), width, t1.operator$negate$0(height), height, znear, zfar);
};

$.makeFrustum = function(left, right, bottom, top$, near, far) {
  var two_near, t1, right_minus_left, t2, top_minus_bottom, far_minus_near, view, t3;
  two_near = 2 * near;
  t1 = $.getInterceptor$JSNumber(right);
  right_minus_left = t1.operator$sub$1(right, left);
  t2 = $.getInterceptor$JSNumber(top$);
  top_minus_bottom = t2.operator$sub$1(top$, bottom);
  far_minus_near = far - near;
  view = $.mat4$zero();
  if (typeof right_minus_left !== "number")
    throw $.iae(right_minus_left);
  t3 = two_near / right_minus_left;
  view.operator$index$1(0).set$x(t3);
  if (typeof top_minus_bottom !== "number")
    throw $.iae(top_minus_bottom);
  t3 = two_near / top_minus_bottom;
  view.operator$index$1(1).set$y(t3);
  t1 = t1.operator$add$1(right, left);
  t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, right_minus_left);
  view.operator$index$1(2).set$x(t1);
  t2 = t2.operator$add$1(top$, bottom);
  t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, top_minus_bottom);
  view.operator$index$1(2).set$y(t2);
  t2 = -(far + near) / far_minus_near;
  view.operator$index$1(2).set$z(t2);
  view.operator$index$1(2).set$w(-1);
  t2 = -(two_near * far) / far_minus_near;
  view.operator$index$1(3).set$z(t2);
  view.operator$index$1(3).set$w(0);
  return view;
};

$.quat$ = function(a, b, c, d) {
  var t1 = new $.quat(null, null, null, null);
  t1.quat$4(a, b, c, d);
  return t1;
};

$.quat$copy = function(original) {
  var t1 = new $.quat(null, null, null, null);
  t1.quat$copy$1(original);
  return t1;
};

$.sin = function(arg, out) {
  var t1;
  if (typeof arg === "number")
    return Math.sin($.checkNum(arg));
  if (typeof arg === "object" && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = Math.sin($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec2");
    out.set$x(t1);
    out.set$y(Math.sin($.checkNum(arg.y)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = Math.sin($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec3");
    out.set$x(t1);
    out.set$y(Math.sin($.checkNum(arg.y)));
    out.set$z(Math.sin($.checkNum(arg.z)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = Math.sin($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec4");
    out.set$x(t1);
    out.set$y(Math.sin($.checkNum(arg.y)));
    out.set$z(Math.sin($.checkNum(arg.z)));
    out.set$w(Math.sin($.checkNum(arg.w)));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$.cos = function(arg, out) {
  var t1;
  if (typeof arg === "number")
    return Math.cos($.checkNum(arg));
  if (typeof arg === "object" && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = Math.cos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec2");
    out.set$x(t1);
    out.set$y(Math.cos($.checkNum(arg.y)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = Math.cos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec3");
    out.set$x(t1);
    out.set$y(Math.cos($.checkNum(arg.y)));
    out.set$z(Math.cos($.checkNum(arg.z)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = Math.cos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec4");
    out.set$x(t1);
    out.set$y(Math.cos($.checkNum(arg.y)));
    out.set$z(Math.cos($.checkNum(arg.z)));
    out.set$w(Math.cos($.checkNum(arg.w)));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$.tan = function(arg, out) {
  var t1;
  if (typeof arg === "number")
    return Math.tan($.checkNum(arg));
  if (typeof arg === "object" && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = Math.tan($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec2");
    out.set$x(t1);
    out.set$y(Math.tan($.checkNum(arg.y)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = Math.tan($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec3");
    out.set$x(t1);
    out.set$y(Math.tan($.checkNum(arg.y)));
    out.set$z(Math.tan($.checkNum(arg.z)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = Math.tan($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec4");
    out.set$x(t1);
    out.set$y(Math.tan($.checkNum(arg.y)));
    out.set$z(Math.tan($.checkNum(arg.z)));
    out.set$w(Math.tan($.checkNum(arg.w)));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$.acos = function(arg, out) {
  var t1;
  if (typeof arg === "number")
    return Math.acos($.checkNum(arg));
  if (typeof arg === "object" && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = Math.acos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec2");
    out.set$x(t1);
    out.set$y(Math.acos($.checkNum(arg.y)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = Math.acos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec3");
    out.set$x(t1);
    out.set$y(Math.acos($.checkNum(arg.y)));
    out.set$z(Math.acos($.checkNum(arg.z)));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = Math.acos($.checkNum(arg.x));
    $.propertyTypeCast(out, "is$vec4");
    out.set$x(t1);
    out.set$y(Math.acos($.checkNum(arg.y)));
    out.set$z(Math.acos($.checkNum(arg.z)));
    out.set$w(Math.acos($.checkNum(arg.w)));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$.degrees = function(arg, out) {
  var t1, t2, t3;
  if (typeof arg === "number")
    return arg * 180 / 3.141592653589793;
  if (typeof arg === "object" && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = arg.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793);
    $.propertyTypeCast(out, "is$vec2");
    out.set$x(t1);
    t1 = arg.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    out.set$y($.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = arg.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793);
    $.propertyTypeCast(out, "is$vec3");
    out.set$x(t1);
    t1 = arg.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    out.set$y($.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793));
    t2 = arg.z;
    t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, 180);
    out.set$z($.getInterceptor$JSNumber(t2).operator$div$1(t2, 3.141592653589793));
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = arg.x;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793);
    $.propertyTypeCast(out, "is$vec4");
    out.set$x(t1);
    t1 = arg.y;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, 180);
    out.set$y($.getInterceptor$JSNumber(t1).operator$div$1(t1, 3.141592653589793));
    t2 = arg.z;
    t2 = $.getInterceptor$JSNumber(t2).operator$mul$1(t2, 180);
    out.set$z($.getInterceptor$JSNumber(t2).operator$div$1(t2, 3.141592653589793));
    t3 = arg.w;
    t3 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, 180);
    out.set$w($.getInterceptor$JSNumber(t3).operator$div$1(t3, 3.141592653589793));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$.mat4$zero = function() {
  var t1 = new $.mat4(null, null, null, null);
  t1.mat4$zero$0();
  return t1;
};

$.mat4$identity = function() {
  var t1 = new $.mat4(null, null, null, null);
  t1.mat4$identity$0();
  return t1;
};

$.mat4$rotationX = function(radians_) {
  var t1 = new $.mat4(null, null, null, null);
  t1.mat4$rotationX$1(radians_);
  return t1;
};

$.vec2$zero = function() {
  var t1 = new $.vec2(null, null);
  t1.vec2$zero$0();
  return t1;
};

$.vec2$raw = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  t1.vec2$raw$2(x_, y_);
  return t1;
};

$.vec3$zero = function() {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$zero$0();
  return t1;
};

$.vec3$raw = function(x_, y_, z_) {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$raw$3(x_, y_, z_);
  return t1;
};

$.vec4$zero = function() {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$zero$0();
  return t1;
};

$.vec4$raw = function(x_, y_, z_, w_) {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$raw$4(x_, y_, z_, w_);
  return t1;
};

$.sanitizeUri = function(uri) {
  if (typeof uri === "object" && uri !== null && !!uri.is$SafeUri)
    return uri.toString$0();
  uri = $.getInterceptor(uri).toString$0(uri);
  return $._isSafeUri(uri) ? uri : "#";
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$(uri).scheme;
  if ($.eqB(scheme, ""))
    return true;
  t1 = $.getInterceptor$JSString(scheme);
  return $.CONSTANT0.contains$1($.CONSTANT19, t1.toLowerCase$0(scheme)) === true || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.DomPropertyBinding$ = function(getter, setter, isUrl) {
  return new $.DomPropertyBinding(setter, getter, isUrl, null);
};

$.ComponentItem$ = function(elem) {
  return new $.ComponentItem(elem);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.watch = function(target, callback, debugName) {
  var isList, e, trace, t1, exp, exception, watcher;
  if (callback == null)
    return new $.watch_anon();
  if ($._watchers == null)
    $._watchers = [];
  isList = false;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!t1.is$Handle)
    exp = $.propertyTypeCast(target, "is$Handle").get$_getter();
  else {
    t1 = target;
    if (typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!t1.is$Function) {
      exp = target;
      try {
        t1 = target.call$0();
        isList = typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.is$List());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.print("error: evaluating " + $.S(!(debugName == null) ? debugName : "<unnamed>") + " " + "watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
      }

    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.is$List())) {
        exp = new $.watch_anon0(target);
        isList = true;
      } else
        exp = null;
    }
  }
  watcher = isList === true ? $._ListWatcher$(exp, callback, debugName) : $._Watcher$(exp, callback, debugName);
  t1 = $._watchers;
  $.getInterceptor$JSArray(t1).add$1(t1, watcher);
  return new $.watch_anon1(watcher);
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res = $.watch(exp, callback, debugName);
  if (typeof exp === "function" || typeof exp === "object" && exp !== null && !!exp.is$Function)
    callback.call$1($.WatchEvent$(null, exp.call$0()));
  else
    callback.call$1($.WatchEvent$(null, exp));
  return res;
};

$.WatchEvent$ = function(oldValue, newValue) {
  return new $.WatchEvent(oldValue, newValue);
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$._unregister = function(watcher) {
  var t1, index;
  t1 = $._watchers;
  index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, watcher);
  if (!$.eqB(index, -1)) {
    t1 = $._watchers;
    $.getInterceptor$JSArray(t1).removeRange$2(t1, index, 1);
  }
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName);
  return t1;
};

$.WebComponent__matches = function(node, selector) {
  if (typeof node === "object" && node !== null && node.is$Text())
    return $.eq(selector, "*");
  return $.callTypeCast(node, "is$Element").matches$1(selector);
};

$.WebComponent__isActive = function(node) {
  for (node = node.get$parent(); !(node == null); node = node.get$parent())
    if ($.eqB(node.get$tagName(), "CONTENT") || $.eqB(node.get$tagName(), "SHADOW"))
      return false;
  return true;
};

$.WebComponent__distribute = function(insertionPoint, nodes) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(nodes).get$iterator(nodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    insertionPoint.get$parent().insertBefore$2(t2, insertionPoint);
  }
  insertionPoint.remove$0();
};

$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$._convertModel.call$1 = $._convertModel;
$._convertModel.$name = "_convertModel";
$._onUpdate.call$1 = $._onUpdate;
$._onUpdate.$name = "_onUpdate";
$._startup.call$0 = $._startup;
$._startup.$name = "_startup";
$._onFileSystemCreated.call$1 = $._onFileSystemCreated;
$._onFileSystemCreated.$name = "_onFileSystemCreated";
$._onFileSystemError.call$1 = $._onFileSystemError;
$._onFileSystemError.$name = "_onFileSystemError";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
Isolate.$finishClasses($$);
$$ = {};
$.SpectreTexture = {builtin$cls: 'SpectreTexture'};
$.ElementInstance = {builtin$cls: 'ElementInstance'};
$.ClientRect = {builtin$cls: 'ClientRect'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.bool = {builtin$cls: 'bool'};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult'};
$.CssRule = {builtin$cls: 'CssRule'};
$.Future = {builtin$cls: 'Future'};
$.CssValue = {builtin$cls: 'CssValue'};
$.StyleSheet = {builtin$cls: 'StyleSheet'};
$.Length = {builtin$cls: 'Length'};
$.$int = {builtin$cls: '$int', is$num: true};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.Number = {builtin$cls: 'Number'};
$.List = {builtin$cls: 'List'};
$.Map = {builtin$cls: 'Map'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.MediaStream = {builtin$cls: 'MediaStream'};
$.Touch = {builtin$cls: 'Touch'};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$.num = {builtin$cls: 'num', is$num: true};
$.Match = {builtin$cls: 'Match'};
$.Element = {builtin$cls: 'Element'};
$.Node = {builtin$cls: 'Node'};
$.Entry = {builtin$cls: 'Entry'};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.String = {builtin$cls: 'String'};
$.File = {builtin$cls: 'File'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.Transform = {builtin$cls: 'Transform'};
$.SamplerState = {builtin$cls: 'SamplerState'};
$.Gamepad = {builtin$cls: 'Gamepad'};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT16 = Isolate.makeConstantList([]);
$.CONSTANT7 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT16);
$.CONSTANT21 = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.CONSTANT17 = new Isolate.$isolateProperties.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, Isolate.$isolateProperties.CONSTANT21);
$.CONSTANT9 = new Isolate.$isolateProperties.EventStreamProvider("mousemove");
$.CONSTANT5 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT22 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CONSTANT18 = new Isolate.$isolateProperties.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, Isolate.$isolateProperties.CONSTANT22);
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT2 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT4 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT15 = new Isolate.$isolateProperties.DeviceFormat(5126, 4, false);
$.CONSTANT14 = new Isolate.$isolateProperties.DeviceFormat(5126, 3, false);
$.CONSTANT13 = new Isolate.$isolateProperties.DeviceFormat(5126, 2, false);
$.CONSTANT12 = new Isolate.$isolateProperties.DeviceFormat(5126, 1, false);
$.CONSTANT19 = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.CONSTANT20 = new Isolate.$isolateProperties.Object();
$.CONSTANT8 = new Isolate.$isolateProperties.EventStreamProvider("webkitfullscreenchange");
$.CONSTANT6 = new Isolate.$isolateProperties.EventStreamProvider("click");
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT10 = new Isolate.$isolateProperties.EventStreamProvider("keyup");
$.CONSTANT3 = new Isolate.$isolateProperties.EventStreamProvider("loadend");
$.CONSTANT11 = new Isolate.$isolateProperties.EventStreamProvider("keydown");
$.Element_keyDownEvent = Isolate.$isolateProperties.CONSTANT11;
$.Notification_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.Element_keyUpEvent = Isolate.$isolateProperties.CONSTANT10;
$.Element_mouseMoveEvent = Isolate.$isolateProperties.CONSTANT9;
$.Element_fullscreenChangeEvent = Isolate.$isolateProperties.CONSTANT8;
$.GraphicsDevice_DeviceFormatFloat1 = Isolate.$isolateProperties.CONSTANT12;
$.GraphicsDevice_DeviceFormatFloat2 = Isolate.$isolateProperties.CONSTANT13;
$.GraphicsDevice_DeviceFormatFloat3 = Isolate.$isolateProperties.CONSTANT14;
$.GraphicsDevice_DeviceFormatFloat4 = Isolate.$isolateProperties.CONSTANT15;
$.Uri__COMPONENT_SCHEME = 1;
$.Uri__COMPONENT_USER_INFO = 2;
$.Uri__COMPONENT_DOMAIN = 3;
$.Uri__COMPONENT_PORT = 4;
$.Uri__COMPONENT_PATH = 5;
$.Uri__COMPONENT_QUERY_DATA = 6;
$.Uri__COMPONENT_FRAGMENT = 7;
$._getTypeNameOf = null;
$.HttpRequestUpload_loadEndEvent = Isolate.$isolateProperties.CONSTANT3;
$.WebGLRenderingContext_ACTIVE_ATTRIBUTES = 35721;
$.WebGLRenderingContext_ACTIVE_UNIFORMS = 35718;
$.WebGLRenderingContext_ALWAYS = 519;
$.WebGLRenderingContext_ARRAY_BUFFER = 34962;
$.WebGLRenderingContext_ARRAY_BUFFER_BINDING = 34964;
$.WebGLRenderingContext_BACK = 1029;
$.WebGLRenderingContext_BLEND = 3042;
$.WebGLRenderingContext_BOOL = 35670;
$.WebGLRenderingContext_BOOL_VEC2 = 35671;
$.WebGLRenderingContext_BOOL_VEC3 = 35672;
$.HttpRequest_loadEndEvent = Isolate.$isolateProperties.CONSTANT3;
$.WebGLRenderingContext_BOOL_VEC4 = 35673;
$.WebGLRenderingContext_CCW = 2305;
$.WebGLRenderingContext_COLOR_BUFFER_BIT = 16384;
$.WebGLRenderingContext_CONSTANT_COLOR = 32769;
$.PI = 3.141592653589793;
$.WebGLRenderingContext_CULL_FACE = 2884;
$.WebGLRenderingContext_CURRENT_PROGRAM = 35725;
$.WebGLRenderingContext_CW = 2304;
$.WebGLRenderingContext_DEPTH_BUFFER_BIT = 256;
$.WebGLRenderingContext_DEPTH_TEST = 2929;
$.WebGLRenderingContext_DST_ALPHA = 772;
$.WebGLRenderingContext_DST_COLOR = 774;
$.FrontFace_Clockwise = 2304;
$.FrontFace_CounterClockwise = 2305;
$.WebGLRenderingContext_ELEMENT_ARRAY_BUFFER = 34963;
$.WebGLRenderingContext_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
$.WebGLRenderingContext_EQUAL = 514;
$.WebGLRenderingContext_FLOAT = 5126;
$.WebGLRenderingContext_FLOAT_MAT2 = 35674;
$.CullMode_None = 0;
$.WebGLRenderingContext_FLOAT_MAT3 = 35675;
$.CullMode_Front = 1028;
$.WebGLRenderingContext_FLOAT_MAT4 = 35676;
$.CullMode_Back = 1029;
$.WebGLRenderingContext_FLOAT_VEC2 = 35664;
$.WebGLRenderingContext_FLOAT_VEC3 = 35665;
$.WebGLRenderingContext_DYNAMIC_DRAW = 35048;
$.WebGLRenderingContext_FLOAT_VEC4 = 35666;
$.WebGLRenderingContext_FRAGMENT_SHADER = 35632;
$.JsonParser_INSIDE_ARRAY = 1;
$.WebGLRenderingContext_FRAMEBUFFER = 36160;
$.JsonParser_INSIDE_OBJECT = 2;
$.JsonParser_AFTER_COLON = 3;
$.JsonParser_ALLOW_STRING_MASK = 8;
$.ElementInstance_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.JsonParser_ALLOW_VALUE_MASK = 4;
$.JsonParser_ALLOW_VALUE = 0;
$.JsonParser_STRING_ONLY = 4;
$.WebGLRenderingContext_FRAMEBUFFER_BINDING = 36006;
$.JsonParser_NO_VALUES = 12;
$.CompareFunction_Always = 519;
$.JsonParser_EMPTY = 0;
$.CompareFunction_Equal = 514;
$.JsonParser_NON_EMPTY = 16;
$.CompareFunction_Greater = 516;
$.CompareFunction_GreaterEqual = 518;
$.JsonParser_VALUE_READ_BITS = 28;
$.JsonParser_STATE_INITIAL = 0;
$.Primitives_hashCodeSeed = 0;
$.CompareFunction_LessEqual = 515;
$.WebGLRenderingContext_FRONT = 1028;
$.JsonParser_STATE_ARRAY_EMPTY = 1;
$.CompareFunction_Fail = 512;
$.WebGLRenderingContext_FUNC_ADD = 32774;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.WebGLRenderingContext_FUNC_REVERSE_SUBTRACT = 32779;
$.CompareFunction_NotEqual = 517;
$.JsonParser_STATE_OBJECT_EMPTY = 6;
$.WebGLRenderingContext_FUNC_SUBTRACT = 32778;
$.JsonParser_STATE_OBJECT_KEY = 30;
$.ElementInstance_keyDownEvent = Isolate.$isolateProperties.CONSTANT11;
$.WebGLRenderingContext_GEQUAL = 518;
$.CompareFunction_Less = 513;
$.WebGLRenderingContext_GREATER = 516;
$.ElementInstance_keyUpEvent = Isolate.$isolateProperties.CONSTANT10;
$.JsonParser_STATE_OBJECT_VALUE = 31;
$.JsonParser_STATE_OBJECT_COMMA = 22;
$.JsonParser_TAB = 9;
$.ElementInstance_mouseMoveEvent = Isolate.$isolateProperties.CONSTANT9;
$.WebGLRenderingContext_INT_VEC2 = 35667;
$.JsonParser_QUOTE = 34;
$.WebGLRenderingContext_INT_VEC4 = 35669;
$.JsonParser_COMMA = 44;
$.Blend_Zero = 0;
$.Blend_One = 1;
$.Blend_SourceColor = 768;
$.WebGLRenderingContext_INT = 5124;
$.Blend_InverseSourceColor = 769;
$.JsonParser_SPACE = 32;
$.Blend_SourceAlpha = 770;
$.WebGLRenderingContext_INT_VEC3 = 35668;
$.JsonParser_COLON = 58;
$.WebGLRenderingContext_LEQUAL = 515;
$.WebGLRenderingContext_LESS = 513;
$.Blend_InverseDestinationAlpha = 773;
$.JsonParser_RBRACKET = 93;
$.Blend_DestinationAlpha = 772;
$.Blend_InverseDestinationColor = 775;
$.Blend_SourceAlphaSaturation = 776;
$.Blend_InverseBlendFactor = 32770;
$.WebGLRenderingContext_LINK_STATUS = 35714;
$.JsonParser_CHAR_n = 110;
$.Blend_DestinationColor = 774;
$.Blend_BlendFactor = 32769;
$.JsonParser_LBRACKET = 91;
$.BlendOperation_Add = 32774;
$.Blend_InverseSourceAlpha = 771;
$.BlendOperation_ReverseSubtract = 32779;
$.JsonParser_LBRACE = 123;
$.WebGLRenderingContext_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
$.JsonParser_RBRACE = 125;
$.BlendOperation_Subtract = 32778;
$.JsonParser_CHAR_9 = 57;
$.WebGLRenderingContext_MAX_TEXTURE_IMAGE_UNITS = 34930;
$.WebGLRenderingContext_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
$.WebGLRenderingContext_MAX_TEXTURE_SIZE = 3379;
$.WebGLRenderingContext_MAX_VARYING_VECTORS = 36348;
$.WebGLRenderingContext_MAX_VERTEX_ATTRIBS = 34921;
$.WebGLRenderingContext_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
$.JsonParser_CHAR_b = 98;
$.WebGLRenderingContext_MAX_VERTEX_UNIFORM_VECTORS = 36347;
$.JsonParser_DECIMALPOINT = 46;
$.WebGLRenderingContext_NEVER = 512;
$.JsonParser_STATE_ARRAY_VALUE = 29;
$.JsonParser_PLUS = 43;
$.JsonParser_NEWLINE = 10;
$.WebGLRenderingContext_NOTEQUAL = 517;
$.JsonParser_CARRIAGE_RETURN = 13;
$.JsonParser_CHAR_f = 102;
$.WebGLRenderingContext_ONE = 1;
$.JsonParser_CHAR_u = 117;
$.JsonParser_STATE_END = 28;
$.WebGLRenderingContext_ONE_MINUS_CONSTANT_COLOR = 32770;
$.WebGLRenderingContext_ONE_MINUS_DST_ALPHA = 773;
$.JsonParser_CHAR_s = 115;
$.WebGLRenderingContext_ONE_MINUS_DST_COLOR = 775;
$.WebGLRenderingContext_ONE_MINUS_SRC_ALPHA = 771;
$.WebGLRenderingContext_ONE_MINUS_SRC_COLOR = 769;
$.JsonParser_CHAR_t = 116;
$.WebGLRenderingContext_POLYGON_OFFSET_FILL = 32823;
$.JsonParser_STATE_ARRAY_COMMA = 17;
$.JsonParser_BACKSLASH = 92;
$._watchers = null;
$.JsonParser_SLASH = 47;
$.JsonParser_CHAR_r = 114;
$.JsonParser_STATE_OBJECT_COLON = 19;
$.JsonParser_CHAR_E = 69;
$.JsonParser_CHAR_l = 108;
$.useShadowDom = false;
$.JsonParser_CHAR_a = 97;
$.JsonParser_CHAR_0 = 48;
$._SAFE_SCHEMES = Isolate.$isolateProperties.CONSTANT19;
$.JsonParser_CHAR_e = 101;
$.JsonParser_BACKSPACE = 8;
$.JsonParser_MINUS = 45;
$._SPAWNED_SIGNAL = "spawned";
$.lazyPort = null;
$.JsonParser_FORM_FEED = 12;
$.WebGLRenderingContext_SAMPLER_2D = 35678;
$.WebGLRenderingContext_SAMPLER_CUBE = 35680;
$.WebGLRenderingContext_SCISSOR_TEST = 3089;
$.WebGLRenderingContext_SRC_ALPHA = 770;
$.WebGLRenderingContext_SRC_ALPHA_SATURATE = 776;
$.WebGLRenderingContext_SRC_COLOR = 768;
$.WebGLRenderingContext_STATIC_DRAW = 35044;
$.WebGLRenderingContext_TEXTURE0 = 33984;
$._FutureImpl__INCOMPLETE = 0;
$._FutureImpl__VALUE = 1;
$._FutureImpl__ERROR = 2;
$._FutureImpl__UNHANDLED_ERROR = 4;
$._modelViewerComponent = null;
$._convertUrl = "http://127.0.0.1:3000/api/convert";
$._fileSystem = null;
$._maxModelSize = 2097152;
$.ModelViewerComponent__keyCodeA = 65;
$.ModelViewerComponent__keyCodeD = 68;
$.ModelViewerComponent__keyCodeS = 83;
$.ModelViewerComponent__keyCodeW = 87;
$.WebGLRenderingContext_TRIANGLES = 4;
$.FileReader_loadEndEvent = Isolate.$isolateProperties.CONSTANT3;
$.ModelViewerComponent__defaultFragmentShaderSource = "  precision mediump float;\n  \n  varying vec2 samplePoint;\n  uniform sampler2D sampler;\n  \n  void main() {\n    gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);//texture2D(sampler, samplePoint);\n  }\n  ";
$.ModelViewerComponent__defaultVertexShaderSource = "  precision highp float;\n  \n  // Vertex attributes\n  attribute vec3 vPosition;\n  attribute vec2 vTexCoord0;\n  \n  // Uniform variables\n  uniform float uTime;\n  uniform mat4 uModelMatrix;\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uModelViewProjectionMatrix;\n  uniform mat4 uProjectionMatrix;\n  uniform mat4 uNormalMatrix;\n  \n  // Varying variables\n  // Allows communication between vertex and fragment stages\n  varying vec2 samplePoint;\n  \n  void main() {\n    vec4 vPosition4 = vec4(vPosition, 1.0);\n    gl_Position = uModelViewProjectionMatrix * vPosition4;\n    samplePoint = vTexCoord0;\n  }\n  ";
$._cachedBrowserPrefix = null;
$.WebGLRenderingContext_UNSIGNED_SHORT = 5123;
$.SpectreBuffer_UsageDynamic = 35048;
$.SpectreBuffer_UsageStatic = 35044;
$.WebGLRenderingContext_VERTEX_SHADER = 35633;
$.WebGLRenderingContext_ZERO = 0;
$.ReceivePortImpl__nextFreeId = 1;
$.RenderTarget__systemRenderTarget = null;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT5;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.FileError_INVALID_MODIFICATION_ERR = 9;
$.FileError_INVALID_STATE_ERR = 7;
$.FileError_NOT_FOUND_ERR = 1;
$.FileError_QUOTA_EXCEEDED_ERR = 10;
$.FileError_SECURITY_ERR = 2;
$.StorageInfo_TEMPORARY = 0;
$._ElementFactoryProvider__CUSTOM_PARENT_TAG_MAP = Isolate.$isolateProperties.CONSTANT18;
$._ElementFactoryProvider__TABLE_TAGS = Isolate.$isolateProperties.CONSTANT17;
$.Element_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'spectreLog', 'spectreLog', 'get$spectreLog', function() {
  return $.PrintLogger$();
});
Isolate.$lazy($, '_START_TAG_REGEXP', '_START_TAG_REGEXP', 'get$_START_TAG_REGEXP', function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, 'globalThis', 'globalThis', 'get$globalThis', function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, '_splitRe', 'Uri__splitRe', 'get$Uri__splitRe', function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, 'globalWindow', 'globalWindow', 'get$globalWindow', function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, 'thisScript', 'IsolateNatives_thisScript', 'get$IsolateNatives_thisScript', function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, 'globalWorker', 'globalWorker', 'get$globalWorker', function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, 'globalPostMessageDefined', 'globalPostMessageDefined', 'get$globalPostMessageDefined', function() {
  return $.get$globalThis().postMessage !== (void 0);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  is$JavaScriptIndexingBehavior: function() {
    return false;
  },
  is$Collection: function() {
    return false;
  },
  is$List: function() {
    return false;
  },
  is$Map: function() {
    return false;
  },
  is$ArrayBuffer: function() {
    return false;
  },
  is$ArrayBufferView: function() {
    return false;
  },
  is$Blob: function() {
    return false;
  },
  is$Element: function() {
    return false;
  },
  is$File: function() {
    return false;
  },
  is$FileList: function() {
    return false;
  },
  is$Float32Array: function() {
    return false;
  },
  is$ImageData: function() {
    return false;
  },
  is$ImageElement: function() {
    return false;
  },
  is$Int32Array: function() {
    return false;
  },
  is$Location: function() {
    return false;
  },
  is$Node: function() {
    return false;
  },
  is$ShadowRoot: function() {
    return false;
  },
  is$Text: function() {
    return false;
  },
  is$KeyRange: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("AbstractWorker", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.AbstractWorkerEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "name>,type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {
  get$on: function() {
    return $.ApplicationCacheEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("ArrayBuffer", {"": "byteLength>",
  is$ArrayBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("ArrayBufferView", {"": "byteLength>",
  is$ArrayBufferView: function() {
    return true;
  }
});

$.$defineNativeClass("BatteryManager", {
  get$on: function() {
    return $.BatteryManagerEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("BeforeLoadEvent", {"": "url>"});

$.$defineNativeClass("Blob", {"": "size>,type>",
  is$Blob: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "name>,type>,value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$1: function(contextId) {
    return this.getContext(contextId);
  }
});

$.$defineNativeClass("CharacterData", {"": "data>,length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("ClientRect", {"": "height>,width>"});

$.$defineNativeClass("CloseEvent", {"": "code>"});

$.$defineNativeClass("CompositionEvent", {"": "data>"});

$.$defineNativeClass("WebKitCSSKeyframesRule", {"": "name>"});

$.$defineNativeClass("WebKitCSSMatrix", {
  multiply$1: function(secondMatrix) {
    return this.multiply(secondMatrix);
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("CSSRule", {"": "type>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  set$aspectRatio: function(value) {
    this.setProperty$3($.S($._browserPrefix()) + "aspect-ratio", value, "");
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  clear$1: function(arg0) {
    return this.get$clear().call$1(arg0);
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$position: function() {
    return this.getPropertyValue$1("position");
  },
  set$position: function(value) {
    this.setProperty$3("position", value, "");
  },
  get$size: function() {
    return this.getPropertyValue$1("size");
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("DataTransferItem", {"": "type>"});

$.$defineNativeClass("DataTransferItemList", {"": "length>",
  add$2: function(data_OR_file, type) {
    return this.add(data_OR_file,type);
  },
  add$1: function(data_OR_file) {
    return this.add(data_OR_file);
  },
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  get$on: function() {
    return $.DedicatedWorkerContextEvents$(this);
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  }
});

$.$defineNativeClass("HTMLDetailsElement", {
  open$2: function(arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  },
  open$3: function(arg0, arg1, arg2) {
    return this.open.call$3(arg0, arg1, arg2);
  }
});

$.$defineNativeClass("DirectoryEntry", {
  getFile$4$errorCallback$options$successCallback: function(path, errorCallback, options, successCallback) {
    var t1, t2, t3;
    t1 = $ === errorCallback;
    if (t1)
      errorCallback = null;
    t1 = !t1;
    t2 = $ === options;
    if (t2)
      options = null;
    t2 = !t2;
    t3 = $ === successCallback;
    if (t3)
      successCallback = null;
    t3 = !t3;
    if (t1) {
      this._getFile_1$4(path, $.convertDartToNative_Dictionary(options), successCallback, errorCallback);
      return;
    }
    if (t3) {
      this._getFile_2$3(path, $.convertDartToNative_Dictionary(options), successCallback);
      return;
    }
    if (t2) {
      this._getFile_3$2(path, $.convertDartToNative_Dictionary(options));
      return;
    }
    this._getFile_4$1(path);
    return;
  },
  _getFile_1$4: function(path, options, successCallback, errorCallback) {
    return this.getFile(path,options,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  },
  _getFile_2$3: function(path, options, successCallback) {
    return this.getFile(path,options,$.convertDartClosureToJS(successCallback, 1));
  },
  _getFile_3$2: function(path, options) {
    return this.getFile(path,options);
  },
  _getFile_4$1: function(path) {
    return this.getFile(path);
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~,$$dom_webkitIsFullScreen:webkitIsFullScreen~,$$dom_webkitPointerLockElement:webkitPointerLockElement~",
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_getElementsByName$1: function(elementName) {
    return this.getElementsByName(elementName);
  },
  $$dom_getElementsByTagName$1: function(tagname) {
    return this.getElementsByTagName(tagname);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  $$dom_webkitExitPointerLock$0: function() {
    return this.webkitExitPointerLock();
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onFullscreenChange: function() {
    return $.CONSTANT8.forTarget$1(this);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.getInterceptor$JSString(selectors).substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, i;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  queryAll$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        mutableMatches = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        mutableMatches = env0;
        break;
      case 3:
        mutableMatches = env0;
        break;
      case 4:
        t2 = env2;
        mutableMatches = env1;
        len = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var mutableMatches, t2, len, copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true)
          switch (state0) {
            case 0:
              mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
              $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
              for (i = 0; $.ltB(i, len); ++i) {
                t1 = t2.operator$index$1(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true)
                switch (state0) {
                  case 0:
                    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
                    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                    for (i = 0; $.ltB(i, len); ++i) {
                      t1 = t2.operator$index$1(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
          }
    }
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$elements: function() {
    return this.get$children();
  },
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, e, nodes;
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).clear$0(t1);
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes());
      $.setRuntimeTypeInfo(nodes, []);
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  },
  get$id: function() {
    return "";
  },
  get$tagName: function() {
    return "";
  },
  get$parent: function() {
    return;
  },
  get$attributes: function() {
    return $.CONSTANT7;
  },
  set$id: function(value) {
    throw $.$$throw($.UnsupportedError$("ID can't be set for document fragments."));
  },
  get$on: function() {
    return $.ElementEvents$(this);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  }
});

$.$defineNativeClass("DOMError", {"": "name>"});

$.$defineNativeClass("DOMException", {
  get$name: function() {
    var errorName = this.name;
    if ($._Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($._Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("MimeType", {"": "type>"});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.DomMimeType);
    $.setRuntimeTypeInfo(t1, [$.DomMimeType]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Plugin", {"": "length>,name>"});

$.$defineNativeClass("PluginArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.DomPlugin);
    $.setRuntimeTypeInfo(t1, [$.DomPlugin]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Selection", {"": "type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value="});

$.$defineNativeClass("DOMStringList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  contains$1: function(string) {
    return this.contains(string);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length>",
  contains$1: function(token) {
    return this.contains(token);
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "xtag=,$$dom_children:children~,id=,innerHtml:innerHTML|,$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~,tagName>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$elements: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$elements")) {
      return this.get$children();
    } else
      return Object.prototype.get$elements.call(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  set$children: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$children")) {
      var copy, children, t1;
      copy = $.List_List$from(value);
      $.setRuntimeTypeInfo(copy, []);
      children = this.get$children();
      t1 = $.getInterceptor$JSArray(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    } else
      return Object.prototype.set$children.call(this, value);
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  matches$1: function(selectors) {
    if (!!this.matches)
      return this.matches(selectors);
    else if (!!this.webkitMatchesSelector)
      return this.webkitMatchesSelector(selectors);
    else if (!!this.mozMatchesSelector)
      return this.mozMatchesSelector(selectors);
    else if (!!this.msMatchesSelector)
      return this.msMatchesSelector(selectors);
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_getAttribute$1: function(name$) {
    return this.getAttribute(name$);
  },
  $$dom_hasAttribute$1: function(name$) {
    return this.hasAttribute(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this.removeAttribute(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this.setAttribute(name$,value);
  },
  createShadowRoot$0: function() {
    return this.webkitCreateShadowRoot();
  },
  webkitRequestPointerLock$0: function() {
    return this.webkitRequestPointerLock();
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onFullscreenChange: function() {
    return $.CONSTANT8.forTarget$1(this);
  },
  is$Element: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,name>,src<,type>,width="});

$.$defineNativeClass("Entry", {"": "name>",
  remove$2: function(successCallback, errorCallback) {
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove(successCallback);
  },
  toUrl$0: function() {
    return this.toURL();
  }
});

$.$defineNativeClass("EntrySync", {"": "name>",
  remove$0: function() {
    return this.remove();
  },
  toUrl$0: function() {
    return this.toURL();
  }
});

$.$defineNativeClass("Event", {"": "type>"});

$.$defineNativeClass("EventException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventSource", {"": "url>",
  get$on: function() {
    return $.EventSourceEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "elements>,name>,type>"});

$.$defineNativeClass("File", {"": "name>",
  is$File: function() {
    return true;
  }
});

$.$defineNativeClass("FileEntry", {
  createWriter$2: function(successCallback, errorCallback) {
    return this.createWriter($.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  },
  createWriter$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 1);
    return this.createWriter(successCallback);
  }
});

$.$defineNativeClass("FileError", {"": "code>"});

$.$defineNativeClass("FileException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.File);
    $.setRuntimeTypeInfo(t1, [$.File]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$FileList: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("FileReader", {"": "error>,result>",
  get$on: function() {
    return $.FileReaderEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onLoadEnd: function() {
    return $.CONSTANT3.forTarget$1(this);
  }
});

$.$defineNativeClass("DOMFileSystem", {"": "name>,root>"});

$.$defineNativeClass("DOMFileSystemSync", {"": "name>,root>"});

$.$defineNativeClass("FileWriter", {"": "error>,length>,position>",
  get$on: function() {
    return $.FileWriterEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  truncate$1: function(size) {
    return this.truncate(size);
  },
  write$1: function(data) {
    return this.write(data);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length>,position>",
  truncate$1: function(size) {
    return this.truncate(size);
  },
  write$1: function(data) {
    return this.write(data);
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.num);
    $.setRuntimeTypeInfo(t1, [$.num]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$Float32Array: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.num);
    $.setRuntimeTypeInfo(t1, [$.num]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>,name>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("Gamepad", {"": "id>,index>"});

$.$defineNativeClass("History", {"": "length>"});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  },
  webkitExitPointerLock$0: function() {
    document.$$dom_webkitExitPointerLock$0();
  },
  get$webkitIsFullScreen: function() {
    return $.document().get$$$dom_webkitIsFullScreen();
  },
  get$webkitPointerLockElement: function() {
    return $.document().get$$$dom_webkitPointerLockElement();
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "response>,responseText>",
  get$on: function() {
    return $.HttpRequestEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  open$5: function(method, url, async, user, password) {
    return this.open(method,url,async,user,password);
  },
  open$2: function(method, url) {
    return this.open(method, url);
  },
  open$3: function(method, url, async) {
    return this.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  },
  send$0: function() {
    return this.send();
  },
  get$onLoadEnd: function() {
    return $.CONSTANT3.forTarget$1(this);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestProgressEvent", {"": "position>"});

$.$defineNativeClass("XMLHttpRequestUpload", {
  get$on: function() {
    return $.HttpRequestUploadEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onLoadEnd: function() {
    return $.CONSTANT3.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,name>,src<,width="});

$.$defineNativeClass("ImageData", {"": "data>,height>,width>",
  is$ImageData: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,src<,width=,x>,y>",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  },
  is$ImageElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height=,name>,pattern>,size>,src<,type>,value=,width=",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$Int32Array: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("JavaScriptCallFrame", {"": "type>"});

$.$defineNativeClass("KeyboardEvent", {
  get$keyCode: function() {
    return this.keyCode;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "name>,type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type>,value="});

$.$defineNativeClass("HTMLLinkElement", {"": "type>"});

$.$defineNativeClass("Location", {
  toString$0: function() {
    return this.toString();
  },
  is$Location: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLMapElement", {"": "name>"});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,src<",
  get$on: function() {
    return $.MediaElementEvents$(this);
  },
  load$0: function() {
    return this.load();
  },
  get$load: function() {
    return new $.BoundClosure1(this, "load$0");
  }
});

$.$defineNativeClass("MediaError", {"": "code>"});

$.$defineNativeClass("MediaKeyError", {"": "code>"});

$.$defineNativeClass("MediaList", {"": "length>"});

$.$defineNativeClass("MediaQueryList", {
  matches$1: function(arg0) {
    return this.matches.call$1(arg0);
  }
});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id>",
  get$on: function() {
    return $.MediaStreamEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "enabled=,id>",
  get$on: function() {
    return $.MediaStreamTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>",
  get$data: function() {
    return $.convertNativeToDart_SerializedScriptValue(this.data);
  },
  get$source: function() {
    return $._convertNativeToDart_Window(this.source);
  }
});

$.$defineNativeClass("MessagePort", {
  get$on: function() {
    return $.MessagePortEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMetaElement", {"": "name>"});

$.$defineNativeClass("Metadata", {"": "size>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MouseEvent", {"": "webkitMovementX>,webkitMovementY>,x>,y>"});

$.$defineNativeClass("MutationEvent", {"": "newValue>"});

$.$defineNativeClass("MutationRecord", {"": "type>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("NavigatorUserMediaError", {"": "code>"});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~,parentNode>,text:textContent|",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  replaceWith$1: function(otherNode) {
    var parent$, exception;
    try {
      parent$ = this.parentNode;
      parent$.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  insertBefore$2: function(newChild, refChild) {
    return this.insertBefore(newChild,refChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("NodeIterator", {"": "root>"});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Notification", {
  get$on: function() {
    return $.NotificationEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  cancel$0: function() {
    return this.cancel();
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type>"});

$.$defineNativeClass("HTMLObjectElement", {"": "code>,data>,height=,name>,type>,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "index>,value="});

$.$defineNativeClass("HTMLOutputElement", {"": "name>,type>,value="});

$.$defineNativeClass("HTMLParamElement", {"": "name>,value="});

$.$defineNativeClass("PerformanceNavigation", {"": "type>"});

$.$defineNativeClass("WebKitPoint", {"": "x=,y="});

$.$defineNativeClass("PositionError", {"": "code>"});

$.$defineNativeClass("ProcessingInstruction", {"": "data>"});

$.$defineNativeClass("HTMLProgressElement", {"": "position>,value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("Range", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {
  get$on: function() {
    return $.RtcDataChannelEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  get$on: function() {
    return $.RtcPeerConnectionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type>"});

$.$defineNativeClass("RTCStatsResponse", {
  result$0: function() {
    return this.result();
  },
  get$result: function() {
    return new $.BoundClosure1(this, "result$0");
  }
});

$.$defineNativeClass("Screen", {"": "height>,width>"});

$.$defineNativeClass("HTMLScriptElement", {"": "src<,type>"});

$.$defineNativeClass("ScriptProfileNode", {"": "url>",
  children$0: function() {
    return this.children();
  },
  get$children: function() {
    return new $.BoundClosure1(this, "children$0");
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,name>,size>,type>,value="});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML|",
  is$ShadowRoot: function() {
    return true;
  }
});

$.$defineNativeClass("SharedWorkerContext", {"": "name>",
  get$on: function() {
    return $.SharedWorkerContextEvents$(this);
  }
});

$.$defineNativeClass("SourceBufferList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SourceBuffer);
    $.setRuntimeTypeInfo(t1, [$.SourceBuffer]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "src<,type>"});

$.$defineNativeClass("SpeechGrammar", {"": "src<"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechGrammar);
    $.setRuntimeTypeInfo(t1, [$.SpeechGrammar]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  get$on: function() {
    return $.SpeechRecognitionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("SpeechRecognitionEvent", {"": "result>"});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length>"});

$.$defineNativeClass("SQLError", {"": "code>"});

$.$defineNativeClass("SQLException", {"": "code>"});

$.$defineNativeClass("SQLResultSet", {"": "rows>"});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Map);
    $.setRuntimeTypeInfo(t1, [$.Map]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  operator$index$1: function(key) {
    return this.$$dom_getItem$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.operator$index$1(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.operator$index$1(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  is$Map: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>,newValue>,url>"});

$.$defineNativeClass("StorageInfo", {
  requestQuota$4: function(storageType, newQuotaInBytes, quotaCallback, errorCallback) {
    return this.requestQuota(storageType,newQuotaInBytes,$.convertDartClosureToJS(quotaCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  }
});

$.$defineNativeClass("HTMLStyleElement", {"": "type>"});

$.$defineNativeClass("StyleMedia", {"": "type>"});

$.$defineNativeClass("StyleSheet", {"": "type>"});

$.$defineNativeClass("HTMLTableElement", {"": "caption>,rows>,tBodies>,tFoot>,tHead>"});

$.$defineNativeClass("HTMLTableRowElement", {"": "cells>"});

$.$defineNativeClass("HTMLTableSectionElement", {"": "rows>"});

$.$defineNativeClass("Text", {
  is$Text: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "cols>,name>,rows>,type>,value="});

$.$defineNativeClass("TextEvent", {"": "data>"});

$.$defineNativeClass("TextMetrics", {"": "width>"});

$.$defineNativeClass("TextTrack", {
  get$on: function() {
    return $.TextTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id=,position=,size>,text<",
  get$on: function() {
    return $.TextTrackCueEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.TextTrackCue);
    $.setRuntimeTypeInfo(t1, [$.TextTrackCue]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackList", {
  get$on: function() {
    return $.TextTrackListEvents$(this);
  },
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.TextTrack);
    $.setRuntimeTypeInfo(t1, [$.TextTrack]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length>"});

$.$defineNativeClass("TouchList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Touch);
    $.setRuntimeTypeInfo(t1, [$.Touch]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTrackElement", {"": "src<"});

$.$defineNativeClass("WebKitTransitionEvent", {
  propertyName$0: function() {
    return this.propertyName.call$0();
  }
});

$.$defineNativeClass("TreeWalker", {"": "root>",
  parentNode$0: function() {
    return this.parentNode();
  },
  get$parentNode: function() {
    return new $.BoundClosure1(this, "parentNode$0");
  }
});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  operator$index$1: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$index$1")) {
      return this[index];
    } else
      return Object.prototype.operator$index$1.call(this, index);
  },
  operator$indexSet$2: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$indexSet$2")) {
      this[index] = value;
    } else
      return Object.prototype.operator$indexSet$2.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      var t1 = $.List_List$from(this, $.$int);
      $.setRuntimeTypeInfo(t1, [$.$int]);
      return t1;
    } else
      return Object.prototype.toList$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1 = $.getInterceptor$JSStringJSArray(this);
      if ($.gtB(t1.get$length(this), 0)) {
        t1 = t1.get$length(this);
        return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
      }
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("WebGLActiveInfo", {"": "name>,size>,type>"});

$.$defineNativeClass("WebGLRenderingContext", {
  attachShader$2: function(program, shader) {
    return this.attachShader(program,shader);
  },
  bindBuffer$2: function(target, buffer) {
    return this.bindBuffer(target,buffer);
  },
  bindFramebuffer$2: function(target, framebuffer) {
    return this.bindFramebuffer(target,framebuffer);
  },
  blendColor$4: function(red, green, blue, alpha) {
    return this.blendColor(red,green,blue,alpha);
  },
  blendEquationSeparate$2: function(modeRGB, modeAlpha) {
    return this.blendEquationSeparate(modeRGB,modeAlpha);
  },
  blendFuncSeparate$4: function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return this.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
  },
  bufferData$3: function(target, data_OR_size, usage) {
    return this.bufferData(target,data_OR_size,usage);
  },
  clear$1: function(mask) {
    return this.clear(mask);
  },
  clearColor$4: function(red, green, blue, alpha) {
    return this.clearColor(red,green,blue,alpha);
  },
  clearDepth$1: function(depth) {
    return this.clearDepth(depth);
  },
  colorMask$4: function(red, green, blue, alpha) {
    return this.colorMask(red,green,blue,alpha);
  },
  compileShader$1: function(shader) {
    return this.compileShader(shader);
  },
  createBuffer$0: function() {
    return this.createBuffer();
  },
  createFramebuffer$0: function() {
    return this.createFramebuffer();
  },
  createProgram$0: function() {
    return this.createProgram();
  },
  createShader$1: function(type) {
    return this.createShader(type);
  },
  cullFace$1: function(mode) {
    return this.cullFace(mode);
  },
  deleteBuffer$1: function(buffer) {
    return this.deleteBuffer(buffer);
  },
  deleteFramebuffer$1: function(framebuffer) {
    return this.deleteFramebuffer(framebuffer);
  },
  deleteProgram$1: function(program) {
    return this.deleteProgram(program);
  },
  deleteShader$1: function(shader) {
    return this.deleteShader(shader);
  },
  depthFunc$1: function(func) {
    return this.depthFunc(func);
  },
  depthMask$1: function(flag) {
    return this.depthMask(flag);
  },
  depthRange$2: function(zNear, zFar) {
    return this.depthRange(zNear,zFar);
  },
  detachShader$2: function(program, shader) {
    return this.detachShader(program,shader);
  },
  disable$1: function(cap) {
    return this.disable(cap);
  },
  disableVertexAttribArray$1: function(index) {
    return this.disableVertexAttribArray(index);
  },
  drawElements$4: function(mode, count, type, offset) {
    return this.drawElements(mode,count,type,offset);
  },
  enable$1: function(cap) {
    return this.enable(cap);
  },
  enableVertexAttribArray$1: function(index) {
    return this.enableVertexAttribArray(index);
  },
  frontFace$1: function(mode) {
    return this.frontFace(mode);
  },
  get$frontFace: function() {
    return new $.BoundClosure0(this, "frontFace$1");
  },
  getActiveAttrib$2: function(program, index) {
    return this.getActiveAttrib(program,index);
  },
  getActiveUniform$2: function(program, index) {
    return this.getActiveUniform(program,index);
  },
  getAttribLocation$2: function(program, name$) {
    return this.getAttribLocation(program,name$);
  },
  getExtension$1: function(name$) {
    return this.getExtension(name$);
  },
  getParameter$1: function(pname) {
    return this.getParameter(pname);
  },
  getProgramInfoLog$1: function(program) {
    return this.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(program, pname) {
    return this.getProgramParameter(program,pname);
  },
  getUniformLocation$2: function(program, name$) {
    return this.getUniformLocation(program,name$);
  },
  linkProgram$1: function(program) {
    return this.linkProgram(program);
  },
  polygonOffset$2: function(factor, units) {
    return this.polygonOffset(factor,units);
  },
  shaderSource$2: function(shader, string) {
    return this.shaderSource(shader,string);
  },
  uniform1f$2: function(location$, x) {
    return this.uniform1f(location$,x);
  },
  uniform1fv$2: function(location$, v) {
    return this.uniform1fv(location$,v);
  },
  uniform1i$2: function(location$, x) {
    return this.uniform1i(location$,x);
  },
  uniform1iv$2: function(location$, v) {
    return this.uniform1iv(location$,v);
  },
  uniform2f$3: function(location$, x, y) {
    return this.uniform2f(location$,x,y);
  },
  uniform2fv$2: function(location$, v) {
    return this.uniform2fv(location$,v);
  },
  uniform2i$3: function(location$, x, y) {
    return this.uniform2i(location$,x,y);
  },
  uniform2iv$2: function(location$, v) {
    return this.uniform2iv(location$,v);
  },
  uniform3f$4: function(location$, x, y, z) {
    return this.uniform3f(location$,x,y,z);
  },
  uniform3fv$2: function(location$, v) {
    return this.uniform3fv(location$,v);
  },
  uniform3i$4: function(location$, x, y, z) {
    return this.uniform3i(location$,x,y,z);
  },
  uniform3iv$2: function(location$, v) {
    return this.uniform3iv(location$,v);
  },
  uniform4f$5: function(location$, x, y, z, w) {
    return this.uniform4f(location$,x,y,z,w);
  },
  uniform4fv$2: function(location$, v) {
    return this.uniform4fv(location$,v);
  },
  uniform4i$5: function(location$, x, y, z, w) {
    return this.uniform4i(location$,x,y,z,w);
  },
  uniform4iv$2: function(location$, v) {
    return this.uniform4iv(location$,v);
  },
  uniformMatrix2fv$3: function(location$, transpose, array) {
    return this.uniformMatrix2fv(location$,transpose,array);
  },
  uniformMatrix3fv$3: function(location$, transpose, array) {
    return this.uniformMatrix3fv(location$,transpose,array);
  },
  uniformMatrix4fv$3: function(location$, transpose, array) {
    return this.uniformMatrix4fv(location$,transpose,array);
  },
  useProgram$1: function(program) {
    return this.useProgram(program);
  },
  vertexAttribPointer$6: function(indx, size, type, normalized, stride, offset) {
    return this.vertexAttribPointer(indx,size,type,normalized,stride,offset);
  },
  viewport$4: function(x, y, width, height) {
    return this.viewport(x,y,width,height);
  }
});

$.$defineNativeClass("WebKitNamedFlow", {"": "name>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {"": "url>",
  get$on: function() {
    return $.WebSocketEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$2: function(code, reason) {
    return this.close(code,reason);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("DOMWindow", {"": "name>,navigator>,screen>,webkitStorageInfo>",
  open$3: function(url, name$, options) {
    if (options == null)
      return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
    else
      return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
  },
  open$2: function(url, name$) {
    return this.open$3(url, name$, null);
  },
  get$location: function() {
    var result = this.get$_location();
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == this._location_wrapper)
      this._location_wrapper = $._LocationWrapper$(result);
    return this._location_wrapper;
  },
  get$_location: function() {
    return this.location;
  },
  requestAnimationFrame$1: function(callback) {
    this._ensureRequestAnimationFrame$0();
    return this._requestAnimationFrame$1(callback);
  },
  _requestAnimationFrame$1: function(callback) {
    return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function() {
    if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
  },
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  _postMessage_1$2: function(message, targetOrigin) {
    return this.postMessage(message,targetOrigin);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  },
  requestFileSystem$4: function(type, size, successCallback, errorCallback) {
    return this.webkitRequestFileSystem(type,size,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("Worker", {
  get$on: function() {
    return $.WorkerEvents$(this);
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  terminate$0: function() {
    return this.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {"": "location>,navigator>",
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.WorkerContextEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  },
  requestFileSystem$4: function(type, size, successCallback, errorCallback) {
    return this.webkitRequestFileSystem(type,size,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("WorkerNavigator", {"": "userAgent>"});

$.$defineNativeClass("XPathException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XSLTProcessor", {
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.ClientRect);
    $.setRuntimeTypeInfo(t1, [$.ClientRect]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.CssRule);
    $.setRuntimeTypeInfo(t1, [$.CssRule]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.CssValue);
    $.setRuntimeTypeInfo(t1, [$.CssValue]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Entry);
    $.setRuntimeTypeInfo(t1, [$.Entry]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.EntrySync);
    $.setRuntimeTypeInfo(t1, [$.EntrySync]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._FrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Gamepad);
    $.setRuntimeTypeInfo(t1, [$.Gamepad]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("MediaStreamList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.MediaStream);
    $.setRuntimeTypeInfo(t1, [$.MediaStream]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechInputResult);
    $.setRuntimeTypeInfo(t1, [$.SpeechInputResult]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechRecognitionResult);
    $.setRuntimeTypeInfo(t1, [$.SpeechRecognitionResult]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.StyleSheet);
    $.setRuntimeTypeInfo(t1, [$.StyleSheet]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("IDBCursor", {"": "key>,source>",
  update$1: function(value) {
    return this._update_1$1($._convertDartToNative_PrepareForStructuredClone(value));
  },
  _update_1$1: function(value) {
    return this.update(value);
  }
});

$.$defineNativeClass("IDBCursorWithValue", {"": "value>"});

$.$defineNativeClass("IDBDatabase", {"": "name>",
  get$on: function() {
    return $.DatabaseEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBFactory", {
  open$2: function(name$, version) {
    return this.open(name$,version);
  }
});

$.$defineNativeClass("IDBIndex", {"": "name>",
  count$1: function(key_OR_range) {
    var t1, t2;
    t1 = $ === key_OR_range;
    if (t1)
      key_OR_range = null;
    t2 = !t1;
    if (t1)
      return this._count_1$0();
    if (typeof key_OR_range === "object" && key_OR_range !== null && key_OR_range.is$KeyRange() || key_OR_range == null)
      return this._count_2$1(key_OR_range);
    if (t2)
      return this._count_3$1(key_OR_range);
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  get$count: function() {
    return new $.BoundClosure2(this, "count$1");
  },
  _count_1$0: function() {
    return this.count();
  },
  _count_2$1: function(range) {
    return this.count(range);
  },
  _count_3$1: function(key) {
    return this.count(key);
  }
});

$.$defineNativeClass("IDBKeyRange", {
  is$KeyRange: function() {
    return true;
  }
});

$.$defineNativeClass("IDBObjectStore", {"": "name>",
  add$2: function(value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
    return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
  },
  add$1: function(value) {
    return this.add$2(value, $);
  },
  _add_1$2: function(value, key) {
    return this.add(value,key);
  },
  _add_2$1: function(value) {
    return this.add(value);
  },
  clear$0: function() {
    return this.clear();
  },
  count$1: function(key_OR_range) {
    var t1, t2;
    t1 = $ === key_OR_range;
    if (t1)
      key_OR_range = null;
    t2 = !t1;
    if (t1)
      return this._count_1$0();
    if (typeof key_OR_range === "object" && key_OR_range !== null && key_OR_range.is$KeyRange() || key_OR_range == null)
      return this._count_2$1(key_OR_range);
    if (t2)
      return this._count_3$1(key_OR_range);
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  get$count: function() {
    return new $.BoundClosure3(this, "count$1");
  },
  _count_1$0: function() {
    return this.count();
  },
  _count_2$1: function(range) {
    return this.count(range);
  },
  _count_3$1: function(key) {
    return this.count(key);
  },
  index$1: function(name$) {
    return this.index(name$);
  },
  get$index: function() {
    return new $.BoundClosure0(this, "index$1");
  }
});

$.$defineNativeClass("IDBOpenDBRequest", {
  get$on: function() {
    return $.OpenDBRequestEvents$(this);
  }
});

$.$defineNativeClass("IDBRequest", {"": "error>,source>",
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.RequestEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  get$result: function() {
    return $._convertNativeToDart_IDBAny(this.result);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBTransaction", {"": "error>",
  get$on: function() {
    return $.TransactionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBVersionChangeRequest", {
  get$on: function() {
    return $.VersionChangeRequestEvents$(this);
  }
});

$.$defineNativeClass("SVGAngle", {"": "value="});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "offset>,type>"});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGElementInstance", {"": "parentNode>",
  get$on: function() {
    return $.ElementInstanceEvents$(this);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,result>,width>,x>,y>",
  scale$1: function(arg0) {
    return this.scale.call$1(arg0);
  }
});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>,z>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>,z>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>,height>,result>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x=,y="});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGLength", {"": "value="});

$.$defineNativeClass("SVGLengthList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Length);
    $.setRuntimeTypeInfo(t1, [$.Length]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMatrix", {
  multiply$1: function(secondMatrix) {
    return this.multiply(secondMatrix);
  },
  scale$1: function(scaleFactor) {
    return this.scale(scaleFactor);
  }
});

$.$defineNativeClass("SVGNumber", {"": "value="});

$.$defineNativeClass("SVGNumberList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Number);
    $.setRuntimeTypeInfo(t1, [$.Number]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegArcAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegArcRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalAbs", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalRel", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalAbs", {"": "y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalRel", {"": "y="});

$.$defineNativeClass("SVGPathSegList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.PathSeg);
    $.setRuntimeTypeInfo(t1, [$.PathSeg]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegMovetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegMovetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPoint", {"": "x=,y="});

$.$defineNativeClass("SVGPointList", {
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("SVGRect", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGScriptElement", {"": "type>"});

$.$defineNativeClass("SVGStopElement", {"": "offset>"});

$.$defineNativeClass("SVGStringList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type>"});

$.$defineNativeClass("SVGElement", {
  get$elements: function() {
    return $.FilteredElementList$(this);
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children, t1;
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, value);
  },
  set$innerHtml: function(svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = container.get$children();
    this.set$children($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  },
  set$id: function(value) {
    this.id = value;
  }
});

$.$defineNativeClass("SVGException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>",
  viewport$4: function(arg0, arg1, arg2, arg3) {
    return this.viewport.call$4(arg0, arg1, arg2, arg3);
  }
});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>"});

$.$defineNativeClass("SVGTransform", {"": "type>"});

$.$defineNativeClass("SVGTransformList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Transform);
    $.setRuntimeTypeInfo(t1, [$.Transform]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.ElementInstance);
    $.setRuntimeTypeInfo(t1, [$.ElementInstance]);
    return t1;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("AudioBuffer", {"": "length>"});

$.$defineNativeClass("AudioContext", {"": "listener>",
  get$on: function() {
    return $.AudioContextEvents$(this);
  }
});

$.$defineNativeClass("AudioNode", {"": "context>"});

$.$defineNativeClass("AudioParam", {"": "name>,value="});

$.$defineNativeClass("BiquadFilterNode", {"": "type>"});

$.$defineNativeClass("ConvolverNode", {
  normalize$0: function() {
    return this.normalize.call$0();
  }
});

$.$defineNativeClass("OscillatorNode", {"": "type>"});

// 277 dynamic classes.
// 433 classes
// 38 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Text = "Text|CDATASection", v2_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement", v3_ComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v4_MediaElement = "HTMLMediaElement|HTMLAudioElement|HTMLVideoElement", v5_SvgElement = [v2_TextPositioningElement, v3_ComponentTransferFunctionElement, "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v6_MouseEvent = "MouseEvent|WheelEvent", v7_Element = [v4_MediaElement, v5_SvgElement, "Element|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement"].join("|"), v8_CharacterData = [v1_Text, "CharacterData|Comment"].join("|"), v9_Document = "Document|HTMLDocument|SVGDocument", v10_DocumentFragment = "DocumentFragment|ShadowRoot", v11_Node = [v7_Element, v8_CharacterData, v9_Document, v10_DocumentFragment, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|"), v12_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v13_WorkerContext = "WorkerContext|DedicatedWorkerContext|SharedWorkerContext", v14_MediaStream = "MediaStream|LocalMediaStream", v15_Request = "IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest", v16_AudioContext = "AudioContext|OfflineAudioContext";
  $.dynamicSetMetadata([["StyleSheet", "StyleSheet|CSSStyleSheet"], ["Text", v1_Text], ["Uint8Array", v0_Uint8Array], ["WorkerContext", v13_WorkerContext], ["CSSValueList", "CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue"], ["IDBCursor", "IDBCursor|IDBCursorWithValue"], ["IDBRequest", v15_Request], ["AbstractWorker", v12_AbstractWorker], ["SVGComponentTransferFunctionElement", v3_ComponentTransferFunctionElement], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["CharacterData", v8_CharacterData], ["CSSRule", "CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule"], ["Document", v9_Document], ["DocumentFragment", v10_DocumentFragment], ["DOMTokenList", "DOMTokenList|DOMSettableTokenList"], ["HTMLMediaElement", v4_MediaElement], ["SVGTextPositioningElement", v2_TextPositioningElement], ["SVGElement", v5_SvgElement], ["Element", v7_Element], ["Entry", "Entry|DirectoryEntry|FileEntry"], ["EntrySync", "EntrySync|DirectoryEntrySync|FileEntrySync"], ["MouseEvent", v6_MouseEvent], ["Event", [v6_MouseEvent, "Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent"].join("|")], ["Node", v11_Node], ["MediaStream", v14_MediaStream], ["AudioContext", v16_AudioContext], ["EventTarget", [v11_Node, v12_AbstractWorker, v13_WorkerContext, v14_MediaStream, v15_Request, v16_AudioContext, "EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["AudioNode", "AudioNode|AnalyserNode|AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|OscillatorNode|AudioDestinationNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode"], ["AudioParam", "AudioParam|AudioGain"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main0.call$0 = $.main0;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main0); });
      } else {
        $.startRootIsolate($.main0);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main0); });
  } else {
    $.startRootIsolate($.main0);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=components.html_bootstrap.dart.js.map